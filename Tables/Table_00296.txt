OBJECT Table 296 Reminder Line
{
  OBJECT-PROPERTIES
  {
    Date=09/15/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               ReminderHeader.GET("Reminder No.");
               "Attached to Line No." := 0;
             END;

    OnModify=BEGIN
               TESTFIELD("System-Created Entry",FALSE);
             END;

    OnDelete=BEGIN
               ReminderLine.SETRANGE("Reminder No.","Reminder No.");
               ReminderLine.SETRANGE("Attached to Line No.","Line No.");
               ReminderLine.DELETEALL;
             END;

    CaptionML=[ENU=Reminder Line;
               ESM=L°n. recordatorio;
               FRC=Ligne rappel;
               ENC=Reminder Line];
  }
  FIELDS
  {
    { 1   ;   ;Reminder No.        ;Code20        ;TableRelation="Reminder Header";
                                                   CaptionML=[ENU=Reminder No.;
                                                              ESM=Nß recordatorio;
                                                              FRC=N¯ rappel;
                                                              ENC=Reminder No.] }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ESM=Nß l°nea;
                                                              FRC=N¯ ligne;
                                                              ENC=Line No.];
                                                   NotBlank=Yes }
    { 3   ;   ;Attached to Line No.;Integer       ;TableRelation="Reminder Line"."Line No." WHERE (Reminder No.=FIELD(Reminder No.));
                                                   CaptionML=[ENU=Attached to Line No.;
                                                              ESM=Nß l°nea texto adicional;
                                                              FRC=ReliÇ Ö la ligne nß;
                                                              ENC=Attached to Line No.];
                                                   Editable=No }
    { 4   ;   ;Type                ;Option        ;OnValidate=VAR
                                                                CustPostingGr@1000 : Record 92;
                                                              BEGIN
                                                                IF Type <> xRec.Type THEN BEGIN
                                                                  ReminderLine := Rec;
                                                                  INIT;
                                                                  Type := ReminderLine.Type;
                                                                  GetReminderHeader;
                                                                  IF Type = Type::"Line Fee" THEN BEGIN
                                                                    "Line Type" := "Line Type"::"Line Fee";
                                                                    CustPostingGr.GET(ReminderHeader."Customer Posting Group");
                                                                    IF CustPostingGr."Add. Fee per Line Account" <> '' THEN
                                                                      VALIDATE("No.",CustPostingGr."Add. Fee per Line Account");
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              ESM=Tipo;
                                                              FRC=Type;
                                                              ENC=Type];
                                                   OptionCaptionML=[ENU=" ,G/L Account,Customer Ledger Entry,Line Fee";
                                                                    ESM=" ,Cuenta,Mov. cliente,Recargo l°nea";
                                                                    FRC=" ,Compte du grand livre,êcriture client,Frais ligne";
                                                                    ENC=" ,G/L Account,Customer Ledger Entry,Line Fee"];
                                                   OptionString=[ ,G/L Account,Customer Ledger Entry,Line Fee] }
    { 5   ;   ;Entry No.           ;Integer       ;TableRelation="Cust. Ledger Entry";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Type,Type::"Customer Ledger Entry");
                                                                GetReminderHeader;
                                                                CustLedgEntry.GET("Entry No.");
                                                                CustLedgEntry.TESTFIELD(Open,TRUE);
                                                                CustLedgEntry.TESTFIELD("Customer No.",ReminderHeader."Customer No.");
                                                                IF CustLedgEntry."Currency Code" <> ReminderHeader."Currency Code" THEN
                                                                  ERROR(
                                                                    MustBeSameErr,
                                                                    ReminderHeader.FIELDCAPTION("Currency Code"),
                                                                    ReminderHeader.TABLECAPTION,CustLedgEntry.TABLECAPTION);
                                                                "Posting Date" := CustLedgEntry."Posting Date";
                                                                "Document Date" := CustLedgEntry."Document Date";
                                                                "Due Date" := CustLedgEntry."Due Date";
                                                                "Document Type" := CustLedgEntry."Document Type";
                                                                "Document No." := CustLedgEntry."Document No.";
                                                                Description := CustLedgEntry.Description;
                                                                CustLedgEntry.CALCFIELDS(Amount,"Remaining Amount");
                                                                "Original Amount" := CustLedgEntry.Amount;
                                                                "Remaining Amount" := CustLedgEntry."Remaining Amount";
                                                                "No. of Reminders" := GetNoOfReminderForCustLedgEntry("Entry No.");

                                                                CalcFinChrg;
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF Type <> Type::"Customer Ledger Entry" THEN
                                                                EXIT;
                                                              SetCustLedgEntryView;
                                                              IF CustLedgEntry.GET("Entry No.") THEN;
                                                              LookupCustLedgEntry;
                                                            END;

                                                   CaptionML=[ENU=Entry No.;
                                                              ESM=Nß mov.;
                                                              FRC=N¯ Çcriture;
                                                              ENC=Entry No.];
                                                   BlankZero=Yes }
    { 6   ;   ;No. of Reminders    ;Integer       ;OnValidate=BEGIN
                                                                IF Type = Type::"Line Fee" THEN
                                                                  VALIDATE("Applies-to Document No.");
                                                              END;

                                                   CaptionML=[ENU=No. of Reminders;
                                                              ESM=Nß de recordatorios;
                                                              FRC=Nombre de rappels;
                                                              ENC=No. of Reminders] }
    { 7   ;   ;Posting Date        ;Date          ;CaptionML=[ENU=Posting Date;
                                                              ESM=Fecha registro;
                                                              FRC=Date de report;
                                                              ENC=Posting Date];
                                                   Editable=No }
    { 8   ;   ;Document Date       ;Date          ;CaptionML=[ENU=Document Date;
                                                              ESM=Fecha emisi¢n documento;
                                                              FRC=Date document;
                                                              ENC=Document Date];
                                                   Editable=No }
    { 9   ;   ;Due Date            ;Date          ;CaptionML=[ENU=Due Date;
                                                              ESM=Fecha vencimiento;
                                                              FRC=Date d'ÇchÇance;
                                                              ENC=Due Date];
                                                   Editable=No }
    { 10  ;   ;Document Type       ;Option        ;OnValidate=BEGIN
                                                                TESTFIELD(Type,Type::"Customer Ledger Entry");
                                                                VALIDATE("Document No.");
                                                              END;

                                                   CaptionML=[ENU=Document Type;
                                                              ESM=Tipo documento;
                                                              FRC=Type de document;
                                                              ENC=Document Type];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                                    ESM=" ,Pago,Factura,Nota crÇdito,Docs. interÇs,Recordatorio,Reembolso";
                                                                    FRC=" ,Paiement,Facture,Note de crÇdit,Note de frais financiers,Rappel,Remboursement";
                                                                    ENC=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 11  ;   ;Document No.        ;Code20        ;OnValidate=BEGIN
                                                                TESTFIELD(Type,Type::"Customer Ledger Entry");
                                                                "Entry No." := 0;
                                                                IF "Document No." <> '' THEN BEGIN
                                                                  SetCustLedgEntryView;
                                                                  IF "Document Type" <> 0 THEN
                                                                    CustLedgEntry.SETRANGE("Document Type","Document Type");
                                                                  CustLedgEntry.SETRANGE("Document No.","Document No.");
                                                                  IF CustLedgEntry.FINDFIRST THEN
                                                                    VALIDATE("Entry No.",CustLedgEntry."Entry No.")
                                                                  ELSE
                                                                    ERROR(NoOpenEntriesErr,FORMAT(Type),FIELDCAPTION("Document No."),"Document No.");
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF Type <> Type::"Customer Ledger Entry" THEN
                                                                EXIT;
                                                              SetCustLedgEntryView;
                                                              IF "Document Type" <> 0 THEN
                                                                CustLedgEntry.SETRANGE("Document Type","Document Type");
                                                              IF "Document No." <> '' THEN
                                                                CustLedgEntry.SETRANGE("Document No.","Document No.");
                                                              IF CustLedgEntry.FINDFIRST THEN;
                                                              CustLedgEntry.SETRANGE("Document Type");
                                                              CustLedgEntry.SETRANGE("Document No.");
                                                              LookupCustLedgEntry;
                                                            END;

                                                   CaptionML=[ENU=Document No.;
                                                              ESM=Nß documento;
                                                              FRC=N¯ de document;
                                                              ENC=Document No.] }
    { 12  ;   ;Description         ;Text100       ;CaptionML=[ENU=Description;
                                                              ESM=Descripci¢n;
                                                              FRC=Description;
                                                              ENC=Description] }
    { 13  ;   ;Original Amount     ;Decimal       ;CaptionML=[ENU=Original Amount;
                                                              ESM=Importe inicial;
                                                              FRC=Montant initial;
                                                              ENC=Original Amount];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCodeFromHeader }
    { 14  ;   ;Remaining Amount    ;Decimal       ;CaptionML=[ENU=Remaining Amount;
                                                              ESM=Importe pendiente;
                                                              FRC=Solde ouvert;
                                                              ENC=Remaining Amount];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCodeFromHeader }
    { 15  ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(" ")) "Standard Text"
                                                                 ELSE IF (Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Type=CONST(Line Fee)) "G/L Account";
                                                   OnValidate=BEGIN
                                                                IF "No." <> '' THEN
                                                                  CASE Type OF
                                                                    Type::" ":
                                                                      BEGIN
                                                                        StdTxt.GET("No.");
                                                                        Description := StdTxt.Description;
                                                                      END;
                                                                    Type::"Customer Ledger Entry":
                                                                      BEGIN
                                                                        ReminderLine.Type := ReminderLine.Type::" ";
                                                                        ReminderLine2.Type := ReminderLine2.Type::"G/L Account";
                                                                        ERROR(
                                                                          MustBeErr,
                                                                          FIELDCAPTION(Type),ReminderLine.Type,ReminderLine2.Type);
                                                                      END;
                                                                    Type::"G/L Account":
                                                                      FillLineWithGLAccountData("No.");
                                                                    Type::"Line Fee":
                                                                      FillLineWithGLAccountData("No.");
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              ESM=Nß;
                                                              FRC=N¯;
                                                              ENC=No.] }
    { 16  ;   ;Amount              ;Decimal       ;OnValidate=BEGIN
                                                                IF Type = Type::" " THEN BEGIN
                                                                  ReminderLine.Type := ReminderLine.Type::"G/L Account";
                                                                  ReminderLine2.Type := ReminderLine.Type::"Customer Ledger Entry";
                                                                  ERROR(
                                                                    MustBeErr,
                                                                    FIELDCAPTION(Type),ReminderLine.Type,ReminderLine2.Type);
                                                                END;
                                                                IF (Type = Type::"Line Fee") AND (Amount < 0) THEN
                                                                  ERROR(MustBePositiveErr,FIELDCAPTION(Amount));

                                                                GetReminderHeader;
                                                                Amount := ROUND(Amount,Currency."Amount Rounding Precision");
                                                                CASE "VAT Calculation Type" OF
                                                                  "VAT Calculation Type"::"Normal VAT",
                                                                  "VAT Calculation Type"::"Reverse Charge VAT",
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    "VAT Amount" := Amount * ("VAT %" / 100);
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    BEGIN
                                                                      "VAT Amount" :=
                                                                        SalesTaxCalculate.CalculateTax(
                                                                          ReminderHeader."Tax Area Code","Tax Group Code",ReminderHeader."Tax Liable",
                                                                          ReminderHeader."Posting Date",Amount,0,0);
                                                                      IF Amount - "VAT Amount" <> 0 THEN
                                                                        "VAT %" := ROUND(100 * "VAT Amount" / Amount,0.00001)
                                                                      ELSE
                                                                        "VAT %" := 0;
                                                                    END;
                                                                  "VAT Calculation Type"::"4":
                                                                    BEGIN
                                                                      "VAT Amount" := 0;
                                                                      "VAT %" := 0;
                                                                    END;
                                                                END;
                                                                "VAT Amount" := ROUND("VAT Amount",Currency."Amount Rounding Precision");
                                                              END;

                                                   CaptionML=[ENU=Amount;
                                                              ESM=Importe;
                                                              FRC=Montant;
                                                              ENC=Amount];
                                                   BlankZero=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCodeFromHeader }
    { 17  ;   ;Interest Rate       ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD(Type,Type::"Customer Ledger Entry");
                                                                TESTFIELD("Entry No.");
                                                                CalcFinChrg;
                                                              END;

                                                   CaptionML=[ENU=Interest Rate;
                                                              ESM=Tipo interÇs;
                                                              FRC=Taux d'intÇràt;
                                                              ENC=Interest Rate];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 18  ;   ;Gen. Prod. Posting Group;Code10    ;TableRelation="Gen. Product Posting Group";
                                                   OnValidate=BEGIN
                                                                IF xRec."Gen. Prod. Posting Group" <> "Gen. Prod. Posting Group" THEN
                                                                  IF GenProdPostingGrp.ValidateVatProdPostingGroup(GenProdPostingGrp,"Gen. Prod. Posting Group") THEN
                                                                    VALIDATE("VAT Prod. Posting Group",GenProdPostingGrp."Def. VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Gen. Prod. Posting Group;
                                                              ESM=Grupo contable producto;
                                                              FRC=Groupe de report de produit;
                                                              ENC=Gen. Prod. Posting Group] }
    { 19  ;   ;VAT %               ;Decimal       ;CaptionML=[ENU=Tax %;
                                                              ESM=% IVA;
                                                              FRC=% TVA;
                                                              ENC=Tax %];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 20  ;   ;VAT Calculation Type;Option        ;CaptionML=[ENU=Tax Calculation Type;
                                                              ESM=Tipo c†lculo IVA;
                                                              FRC=Type de calcul taxe;
                                                              ENC=Tax Calculation Type];
                                                   OptionCaptionML=[ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                                    ESM=Normal,Reversi¢n,Total,Impto. venta;
                                                                    FRC=TVA normale,Frais renversÇs TVA,TVA compläte,Taxe de vente;
                                                                    ENC=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax];
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   Editable=No }
    { 21  ;   ;VAT Amount          ;Decimal       ;CaptionML=[ENU=Tax Amount;
                                                              ESM=Importe IVA;
                                                              FRC=Montant de TVA;
                                                              ENC=Tax Amount];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCodeFromHeader }
    { 22  ;   ;Tax Group Code      ;Code10        ;TableRelation="Tax Group";
                                                   OnValidate=BEGIN
                                                                VALIDATE("VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Tax Group Code;
                                                              ESM=C¢d. grupo impuesto;
                                                              FRC=Code groupe fiscal;
                                                              ENC=Tax Group Code] }
    { 23  ;   ;VAT Prod. Posting Group;Code10     ;TableRelation="VAT Product Posting Group";
                                                   OnValidate=BEGIN
                                                                GetReminderHeader;
                                                                VATPostingSetup.GET(ReminderHeader."VAT Bus. Posting Group","VAT Prod. Posting Group");
                                                                "VAT %" := VATPostingSetup."VAT %";
                                                                "VAT Calculation Type" := VATPostingSetup."VAT Calculation Type";
                                                                "VAT Identifier" := VATPostingSetup."VAT Identifier";
                                                                "VAT Clause Code" := VATPostingSetup."VAT Clause Code";
                                                                CASE "VAT Calculation Type" OF
                                                                  "VAT Calculation Type"::"Reverse Charge VAT":
                                                                    "VAT %" := 0;
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    BEGIN
                                                                      TESTFIELD(Type,Type::"G/L Account");
                                                                      VATPostingSetup.TESTFIELD("Sales VAT Account");
                                                                      TESTFIELD("No.",VATPostingSetup."Sales VAT Account");
                                                                    END;
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    BEGIN
                                                                      "VAT Amount" :=
                                                                        SalesTaxCalculate.CalculateTax(
                                                                          ReminderHeader."Tax Area Code","Tax Group Code",ReminderHeader."Tax Liable",
                                                                          ReminderHeader."Posting Date",Amount,0,0);
                                                                      IF Amount - "VAT Amount" <> 0 THEN
                                                                        "VAT %" := ROUND(100 * "VAT Amount" / Amount,0.00001)
                                                                      ELSE
                                                                        "VAT %" := 0;
                                                                      "VAT Amount" := ROUND("VAT Amount",Currency."Amount Rounding Precision");
                                                                    END;
                                                                END;
                                                                VALIDATE(Amount);
                                                              END;

                                                   CaptionML=[ENU=Tax Prod. Posting Group;
                                                              ESM=Grupo registro IVA prod.;
                                                              FRC=Groupe de report de produit taxe;
                                                              ENC=Tax Prod. Posting Group] }
    { 24  ;   ;VAT Identifier      ;Code10        ;CaptionML=[ENU=Tax Identifier;
                                                              ESM=Identific. IVA;
                                                              FRC=Identificateur de TVA;
                                                              ENC=Tax Identifier];
                                                   Editable=No }
    { 25  ;   ;Line Type           ;Option        ;CaptionML=[ENU=Line Type;
                                                              ESM=Tipo l°nea;
                                                              FRC=Type ligne;
                                                              ENC=Line Type];
                                                   OptionCaptionML=[ENU=Reminder Line,Not Due,Beginning Text,Ending Text,Rounding,On Hold,Additional Fee,Line Fee;
                                                                    ESM=L°n. recordatorio,No vencido,Texto inicial,Texto final,Redondeo,Esperar,Recargo fijo,Recargo l°nea;
                                                                    FRC=Ligne rappel,Non Çchu,Texte dÇbut,Texte fin,Arrondissement,En attente,Frais supplÇmentaires,Frais ligne;
                                                                    ENC=Reminder Line,Not Due,Beginning Text,Ending Text,Rounding,On Hold,Additional Fee,Line Fee];
                                                   OptionString=Reminder Line,Not Due,Beginning Text,Ending Text,Rounding,On Hold,Additional Fee,Line Fee }
    { 26  ;   ;VAT Clause Code     ;Code10        ;TableRelation="VAT Clause";
                                                   CaptionML=[ENU=Tax Clause Code;
                                                              ESM=C¢digo de cl†usula de IVA;
                                                              FRC=Code clause TVA;
                                                              ENC=Tax Clause Code] }
    { 27  ;   ;Applies-to Document Type;Option    ;OnValidate=BEGIN
                                                                TESTFIELD(Type,Type::"Line Fee");
                                                                VALIDATE("Applies-to Document No.");
                                                              END;

                                                   CaptionML=[ENU=Applies-to Document Type;
                                                              ESM=Liq. por tipo documento;
                                                              FRC=Type de document de rÇfÇrence;
                                                              ENC=Applies-to Document Type];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                                    ESM=" ,Pago,Factura,Nota crÇdito,Docs. interÇs,Recordatorio,Reembolso";
                                                                    FRC=" ,Paiement,Facture,Note de crÇdit,Note de frais financiers,Rappel,Remboursement";
                                                                    ENC=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 28  ;   ;Applies-to Document No.;Code20     ;OnValidate=VAR
                                                                NextLineFeeLevel@1000 : Integer;
                                                              BEGIN
                                                                TESTFIELD(Type,Type::"Line Fee");
                                                                "Entry No." := 0;
                                                                IF "Applies-to Document No." <> '' THEN BEGIN
                                                                  SetCustLedgEntryView;
                                                                  IF "Applies-to Document Type" <> 0 THEN
                                                                    CustLedgEntry.SETRANGE("Document Type","Applies-to Document Type");
                                                                  CustLedgEntry.SETRANGE("Document No.","Applies-to Document No.");
                                                                  IF NOT CustLedgEntry.FINDFIRST THEN
                                                                    ERROR(NoOpenEntriesErr,CustLedgEntry.TABLENAME,FIELDCAPTION("Document No."),"Applies-to Document No.");
                                                                  "Applies-to Document Type" := CustLedgEntry."Document Type";

                                                                  IF CustLedgEntry."Due Date" >= ReminderHeader."Document Date" THEN
                                                                    ERROR(EntryNotOverdueErr,CustLedgEntry.FIELDCAPTION("Document No."),"Applies-to Document No.",CustLedgEntry.TABLENAME);

                                                                  IF "No. of Reminders" <> 0 THEN
                                                                    NextLineFeeLevel := "No. of Reminders"
                                                                  ELSE
                                                                    NextLineFeeLevel := GetNoOfReminderForCustLedgEntry(CustLedgEntry."Entry No.");

                                                                  IF LineFeeIssuedForReminderLevel(CustLedgEntry,NextLineFeeLevel) THEN
                                                                    ERROR(LineFeeAlreadyIssuedErr,"Applies-to Document Type","Applies-to Document No.",NextLineFeeLevel);

                                                                  GetReminderHeader;
                                                                  IF CustLedgEntry."Currency Code" <> ReminderHeader."Currency Code" THEN
                                                                    ERROR(
                                                                      MustBeSameErr,
                                                                      ReminderHeader.FIELDCAPTION("Currency Code"),
                                                                      ReminderHeader.TABLECAPTION,CustLedgEntry.TABLECAPTION);

                                                                  GetReminderLevel(ReminderLevel,NextLineFeeLevel,NextLineFeeLevel);
                                                                  "Posting Date" := ReminderHeader."Posting Date";
                                                                  "Document Date" := ReminderHeader."Document Date";
                                                                  "Due Date" := ReminderHeader."Due Date";
                                                                  "No. of Reminders" := NextLineFeeLevel;

                                                                  CustLedgEntry.CALCFIELDS("Remaining Amount");
                                                                  VALIDATE(Amount,ReminderLevel.GetAdditionalFee(
                                                                      CustLedgEntry."Remaining Amount",
                                                                      ReminderHeader."Currency Code",
                                                                      TRUE,
                                                                      ReminderHeader."Posting Date"));

                                                                  Description := '';
                                                                  IF (Amount <> 0) AND (ReminderLevel."Add. Fee per Line Description" <> '') THEN
                                                                    Description := STRSUBSTNO(ReminderLevel."Add. Fee per Line Description",
                                                                        "Reminder No.",
                                                                        "No. of Reminders",
                                                                        "Document Date",
                                                                        "Posting Date",
                                                                        "No.",
                                                                        Amount,
                                                                        "Applies-to Document Type",
                                                                        "Applies-to Document No.",
                                                                        ReminderLevel."No.")
                                                                  ELSE
                                                                    IF GLAcc.GET("No.") THEN
                                                                      Description := GLAcc.Name;
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF Type <> Type::"Line Fee" THEN
                                                                EXIT;
                                                              SetCustLedgEntryView;
                                                              IF "Applies-to Document Type" <> 0 THEN
                                                                CustLedgEntry.SETRANGE("Document Type","Applies-to Document Type");
                                                              IF "Applies-to Document No." <> '' THEN
                                                                CustLedgEntry.SETRANGE("Document No.","Applies-to Document No.");
                                                              IF CustLedgEntry.FINDFIRST THEN;
                                                              CustLedgEntry.SETRANGE("Document Type");
                                                              CustLedgEntry.SETRANGE("Document No.");
                                                              LookupCustLedgEntry;
                                                            END;

                                                   CaptionML=[ENU=Applies-to Document No.;
                                                              ESM=Liq. por n.ß documento;
                                                              FRC=N¯ document de rÇfÇrence;
                                                              ENC=Applies-to Document No.] }
    { 101 ;   ;System-Created Entry;Boolean       ;CaptionML=[ENU=System-Created Entry;
                                                              ESM=Asiento autom†tico;
                                                              FRC=êcriture crÇÇe par systäme;
                                                              ENC=System-Created Entry];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Reminder No.,Line No.                   ;SumIndexFields=Amount,VAT Amount,Remaining Amount;
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Reminder No.,Type,Line Type             ;SumIndexFields=Amount,VAT Amount,Remaining Amount;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      MustBeSameErr@1000 : TextConst 'ENU=The %1 on the %2 and the %3 must be the same.;ESM=El/la %1 en el/la %2 y en el/la %3 deben ser igual.;FRC=Le %1 sur le %2 et le %3 doivent àtre les màmes.;ENC=The %1 on the %2 and the %3 must be the same.';
      MustBeErr@1001 : TextConst 'ENU=%1 must be %2 or %3.;ESM=%1 debe ser %2 o %3.;FRC=%1 doit àtre %2 ou %3.;ENC=%1 must be %2 or %3.';
      FinChrgTerms@1002 : Record 5;
      ReminderTerms@1003 : Record 292;
      ReminderLevel@1004 : Record 293;
      ReminderHeader@1005 : Record 295;
      ReminderLine@1006 : Record 296;
      ReminderLine2@1007 : Record 296;
      ReminderEntry@1008 : Record 300;
      CustLedgEntry@1009 : Record 21;
      Currency@1011 : Record 4;
      VATPostingSetup@1012 : Record 325;
      CustPostingGr@1013 : Record 92;
      GLAcc@1014 : Record 15;
      StdTxt@1015 : Record 7;
      GenProdPostingGrp@1016 : Record 251;
      SalesTaxCalculate@1017 : Codeunit 398;
      InterestCalcDate@1018 : Date;
      CalcInterest@1019 : Boolean;
      NoOpenEntriesErr@1010 : TextConst '@@@="%1 = Table name, %2 = Document Type, %3 = Document No.";ENU=There is no open %1 with %2 %3.;ESM=No hay %1 abiertos con el %2 %3.;FRC=Il n''y a pas de %1 ouvert avec %2 %3.;ENC=There is no open %1 with %2 %3.';
      EntryNotOverdueErr@1020 : TextConst '@@@="%1 = Document Type, %2 = Document No., %3 = Table name";ENU=%1 %2 in %3 is not overdue.;ESM=%1 %2 en %3 no ha vencido todav°a.;FRC=%1 %2 dans %3 n''est pas Çchu.;ENC=%1 %2 in %3 is not overdue.';
      LineFeeAlreadyIssuedErr@1021 : TextConst '@@@="%1 = Document TYpe, %2 = Document No, %3 = Level number";ENU=The Line Fee for %1 %2 on reminder level %3 has already been issued.;ESM=El recargo de l°nea para %1 %2 en el nivel de recordatorio %3 ya se emiti¢.;FRC=Les frais de ligne pour %1 %2 sur le niveau de rappel %3 ont dÇjÖ ÇtÇ Çmis.;ENC=The Line Fee for %1 %2 on reminder level %3 has already been issued.';
      MustBePositiveErr@1022 : TextConst 'ENU=%1 must be positive.;ESM=El %1 debe ser positivo.;FRC=%1 doit àtre positif.;ENC=%1 must be positive.';

    LOCAL PROCEDURE CalcFinChrg@6();
    VAR
      DtldCLE@1001 : Record 379;
      IssuedReminderHeader@1004 : Record 297;
      InterestStartDate@1002 : Date;
      LineFee@1003 : Decimal;
    BEGIN
      GetReminderHeader;
      "Interest Rate" := 0;
      Amount := 0;
      "VAT Amount" := 0;
      "VAT Calculation Type" := "VAT Calculation Type"::"Normal VAT";
      "Gen. Prod. Posting Group" := '';
      "VAT Prod. Posting Group" := '';
      CustLedgEntry.GET("Entry No.");
      IF (CustLedgEntry."On Hold" <> '') OR ("Due Date" >= ReminderHeader."Document Date") THEN
        EXIT;

      ReminderLevel.SETRANGE("Reminder Terms Code",ReminderHeader."Reminder Terms Code");
      IF ReminderHeader."Use Header Level" THEN
        ReminderLevel.SETRANGE("No.",1,ReminderHeader."Reminder Level")
      ELSE
        ReminderLevel.SETRANGE("No.",1,"No. of Reminders");
      IF NOT ReminderLevel.FINDLAST THEN
        ReminderLevel.INIT;
      IF (NOT ReminderLevel."Calculate Interest") OR (ReminderHeader."Fin. Charge Terms Code" = '') THEN
        EXIT;
      FinChrgTerms.GET(ReminderHeader."Fin. Charge Terms Code");
      "Interest Rate" := FinChrgTerms."Interest Rate";
      CASE FinChrgTerms."Interest Calculation Method" OF
        FinChrgTerms."Interest Calculation Method"::"Average Daily Balance":
          BEGIN
            CalcInterest := FALSE;
            FinChrgTerms.TESTFIELD("Interest Period (Days)");
            InterestCalcDate := CustLedgEntry."Due Date";
            ReminderEntry.SETCURRENTKEY("Customer Entry No.");
            ReminderEntry.SETRANGE("Customer Entry No.","Entry No.");
            ReminderEntry.SETRANGE(Type,ReminderEntry.Type::Reminder);
            ReminderEntry.SETRANGE("Interest Posted",TRUE);
            IF ReminderEntry.FINDLAST THEN
              InterestCalcDate := ReminderEntry."Document Date";
            ReminderEntry.SETRANGE(Type,ReminderEntry.Type::"Finance Charge Memo");
            ReminderEntry.SETRANGE("Interest Posted");
            IF ReminderEntry.FINDLAST THEN
              IF ReminderEntry."Document Date" > InterestCalcDate THEN
                InterestCalcDate := ReminderEntry."Document Date";
            IF InterestCalcDate < ReminderHeader."Document Date" THEN BEGIN
              CalcInterest := TRUE;
              DtldCLE.SETCURRENTKEY("Cust. Ledger Entry No.","Entry Type","Posting Date");
              DtldCLE.SETRANGE("Cust. Ledger Entry No.",CustLedgEntry."Entry No.");
              DtldCLE.SETFILTER("Entry Type",'%1|%2|%3|%4|%5',
                DtldCLE."Entry Type"::"Initial Entry",
                DtldCLE."Entry Type"::Application,
                DtldCLE."Entry Type"::"Payment Tolerance",
                DtldCLE."Entry Type"::"Payment Discount Tolerance (VAT Excl.)",
                DtldCLE."Entry Type"::"Payment Discount Tolerance (VAT Adjustment)");
              DtldCLE.SETRANGE("Posting Date",0D,ReminderHeader."Document Date");
              IF DtldCLE.FIND('-') THEN
                REPEAT
                  IF DtldCLE."Entry Type" = DtldCLE."Entry Type"::"Initial Entry" THEN
                    InterestStartDate := CustLedgEntry."Due Date"
                  ELSE
                    InterestStartDate := DtldCLE."Posting Date";
                  IF InterestCalcDate > InterestStartDate THEN
                    InterestStartDate := InterestCalcDate;
                  Amount := Amount + DtldCLE.Amount * (ReminderHeader."Document Date" - InterestStartDate);
                UNTIL DtldCLE.NEXT = 0;
              IF NOT FinChrgTerms."Add. Line Fee in Interest" THEN
                IF CustLedgEntry."Document Type" = CustLedgEntry."Document Type"::Reminder THEN
                  IF IssuedReminderHeader.GET(CustLedgEntry."Document No.") THEN BEGIN
                    IssuedReminderHeader.CALCFIELDS("Add. Fee per Line");
                    LineFee := IssuedReminderHeader."Add. Fee per Line" + IssuedReminderHeader.CalculateLineFeeVATAmount;
                    Amount := Amount - LineFee * (ReminderHeader."Document Date" - InterestStartDate);
                    IF Amount < 0 THEN
                      Amount := 0;
                  END;
            END;
            IF CalcInterest THEN
              Amount := Amount / FinChrgTerms."Interest Period (Days)" * "Interest Rate" / 100
            ELSE
              Amount := 0;
          END;
        FinChrgTerms."Interest Calculation Method"::"Balance Due":
          IF "Due Date" < ReminderHeader."Document Date"
          THEN
            Amount := "Remaining Amount" * "Interest Rate" / 100;
      END;
      IF Amount <> 0 THEN BEGIN
        CustPostingGr.GET(ReminderHeader."Customer Posting Group");
        CustPostingGr.TESTFIELD("Interest Account");
        GLAcc.GET(CustPostingGr."Interest Account");
        GLAcc.TESTFIELD("Gen. Prod. Posting Group");
        VALIDATE("Gen. Prod. Posting Group",GLAcc."Gen. Prod. Posting Group");
        VALIDATE("VAT Prod. Posting Group",GLAcc."VAT Prod. Posting Group");
      END;
    END;

    LOCAL PROCEDURE SetCustLedgEntryView@9();
    BEGIN
      GetReminderHeader;
      CustLedgEntry.SETCURRENTKEY("Customer No.",Open);
      CustLedgEntry.SETRANGE("Customer No.",ReminderHeader."Customer No.");
      CustLedgEntry.SETRANGE(Open,TRUE);
    END;

    LOCAL PROCEDURE LookupCustLedgEntry@12();
    BEGIN
      IF PAGE.RUNMODAL(0,CustLedgEntry) = ACTION::LookupOK THEN
        IF Type = Type::"Line Fee" THEN BEGIN
          VALIDATE("Applies-to Document Type",CustLedgEntry."Document Type");
          VALIDATE("Applies-to Document No.",CustLedgEntry."Document No.");
        END ELSE
          VALIDATE("Entry No.",CustLedgEntry."Entry No.");
    END;

    LOCAL PROCEDURE GetReminderHeader@2();
    BEGIN
      IF "Reminder No." <> ReminderHeader."No." THEN BEGIN
        ReminderHeader.GET("Reminder No.");
        ProcessReminderHeader;
      END;
    END;

    LOCAL PROCEDURE ProcessReminderHeader@1();
    BEGIN
      ReminderHeader.TESTFIELD("Customer No.");
      ReminderHeader.TESTFIELD("Document Date");
      ReminderHeader.TESTFIELD("Customer Posting Group");
      ReminderHeader.TESTFIELD("Reminder Terms Code");
      ReminderTerms.GET(ReminderHeader."Reminder Terms Code");
      IF ReminderHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE BEGIN
        Currency.GET(ReminderHeader."Currency Code");
        Currency.TESTFIELD("Amount Rounding Precision");
      END;
    END;

    PROCEDURE GetCurrencyCodeFromHeader@4() : Code[10];
    VAR
      ReminderHeader@1000 : Record 295;
    BEGIN
      IF "Reminder No." = ReminderHeader."No." THEN
        EXIT(ReminderHeader."Currency Code");

      IF ReminderHeader.GET("Reminder No.") THEN
        EXIT(ReminderHeader."Currency Code");

      EXIT('');
    END;

    LOCAL PROCEDURE FillLineWithGLAccountData@1023(GLAccountNo@1000 : Code[20]);
    BEGIN
      GLAcc.GET(GLAccountNo);
      GLAcc.CheckGLAcc;
      IF NOT "System-Created Entry" THEN
        GLAcc.TESTFIELD("Direct Posting",TRUE);
      GLAcc.TESTFIELD("Gen. Prod. Posting Group");
      IF Description = '' THEN
        Description := GLAcc.Name;
      GetReminderHeader;
      "Tax Group Code" := GLAcc."Tax Group Code";
      VALIDATE("Gen. Prod. Posting Group",GLAcc."Gen. Prod. Posting Group");
      VALIDATE("VAT Prod. Posting Group",GLAcc."VAT Prod. Posting Group");
    END;

    LOCAL PROCEDURE GetNoOfReminderForCustLedgEntry@1024(EntryNo@1002 : Integer) : Integer;
    VAR
      CustLedgerEntry@1000 : Record 21;
      NoOfReminders@1001 : Integer;
    BEGIN
      CustLedgerEntry.GET(EntryNo);
      NoOfReminders := 0;
      ReminderEntry.RESET;
      ReminderEntry.SETCURRENTKEY("Customer Entry No.");
      ReminderEntry.SETRANGE("Customer Entry No.",EntryNo);
      ReminderEntry.SETRANGE(Type,ReminderEntry.Type::Reminder);
      IF ReminderEntry.FINDLAST THEN
        NoOfReminders := ReminderEntry."Reminder Level";
      IF (CustLedgerEntry."On Hold" = '') AND (CustLedgerEntry."Due Date" < ReminderHeader."Document Date") THEN
        NoOfReminders := NoOfReminders + 1;

      EXIT(NoOfReminders);
    END;

    LOCAL PROCEDURE LineFeeIssuedForReminderLevel@1025(VAR CustLedgEntry@1002 : Record 21;IssuedNoOfReminders@1000 : Integer) : Boolean;
    VAR
      IssuedReminderLine@1001 : Record 298;
    BEGIN
      IssuedReminderLine.SETRANGE("Applies-To Document Type",CustLedgEntry."Document Type");
      IssuedReminderLine.SETRANGE("Applies-To Document No.",CustLedgEntry."Document No.");
      IssuedReminderLine.SETRANGE(Type,IssuedReminderLine.Type::"Line Fee");
      IssuedReminderLine.SETRANGE("No. of Reminders",IssuedNoOfReminders);
      EXIT(IssuedReminderLine.FINDFIRST);
    END;

    LOCAL PROCEDURE GetReminderLevel@1026(VAR ReminderLevel@1001 : Record 293;LevelStart@1000 : Integer;LevelEnd@1002 : Integer);
    BEGIN
      ReminderLevel.SETRANGE("Reminder Terms Code",ReminderHeader."Reminder Terms Code");
      IF ReminderHeader."Use Header Level" THEN
        ReminderLevel.SETRANGE("No.",LevelStart,ReminderHeader."Reminder Level")
      ELSE
        ReminderLevel.SETRANGE("No.",LevelStart,LevelEnd);
      IF NOT ReminderLevel.FINDLAST THEN
        ReminderLevel.INIT;
    END;

    BEGIN
    END.
  }
}

