OBJECT Table 273 Bank Acc. Reconciliation
{
  OBJECT-PROPERTIES
  {
    Date=09/15/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00,NAVNA9.00;
  }
  PROPERTIES
  {
    Permissions=TableData 1220=rimd;
    DataCaptionFields=Bank Account No.,Statement No.;
    OnInsert=BEGIN
               TESTFIELD("Bank Account No.");
               TESTFIELD("Statement No.");
               BankAccRecon.RESET;
               BankAccRecon.SETRANGE("Statement Type",BankAccRecon."Statement Type");
               BankAccRecon.SETRANGE("Bank Account No.","Bank Account No.");
               CASE "Statement Type" OF
                 "Statement Type"::"Bank Reconciliation":
                   IF PostedBankAccStmt.GET("Bank Account No.","Statement No.") THEN
                     ERROR(Text000,"Statement No.");
                 "Statement Type"::"Payment Application":
                   IF PostedPaymentReconHdr.GET("Bank Account No.","Statement No.") THEN
                     ERROR(Text000,"Statement No.");
               END;
             END;

    OnDelete=BEGIN
               IF BankAccReconLine.LinesExist(Rec) THEN
                 BankAccReconLine.DELETEALL(TRUE);
             END;

    OnRename=BEGIN
               ERROR(Text001,TABLECAPTION);
             END;

    CaptionML=[ENU=Bank Acc. Reconciliation;
               ESM=Conciliaci¢n banco;
               FRC=Rapprochement compte bancaire;
               ENC=Bank Acc. Reconciliation];
    LookupPageID=Page388;
  }
  FIELDS
  {
    { 1   ;   ;Bank Account No.    ;Code20        ;TableRelation="Bank Account";
                                                   OnValidate=BEGIN
                                                                IF "Statement No." = '' THEN BEGIN
                                                                  BankAcc.LOCKTABLE;
                                                                  BankAcc.GET("Bank Account No.");

                                                                  IF "Statement Type" = "Statement Type"::"Payment Application" THEN BEGIN
                                                                    SetLastPaymentStatementNo(BankAcc);
                                                                    "Statement No." := INCSTR(BankAcc."Last Payment Statement No.");
                                                                    BankAcc."Last Payment Statement No." := "Statement No.";
                                                                  END ELSE BEGIN
                                                                    SetLastStatementNo(BankAcc);
                                                                    "Statement No." := INCSTR(BankAcc."Last Statement No.");
                                                                    BankAcc."Last Statement No." := "Statement No.";
                                                                  END;

                                                                  "Balance Last Statement" := BankAcc."Balance Last Statement";
                                                                  BankAcc.MODIFY;
                                                                END;

                                                                CreateDim(DATABASE::"Bank Account",BankAcc."No.");
                                                              END;

                                                   CaptionML=[ENU=Bank Account No.;
                                                              ESM=C¢d. cuenta banco;
                                                              FRC=Nø compte bancaire;
                                                              ENC=Bank Account No.];
                                                   NotBlank=Yes }
    { 2   ;   ;Statement No.       ;Code20        ;OnValidate=BEGIN
                                                                TESTFIELD("Bank Account No.");
                                                                IF "Statement Type" = "Statement Type"::"Bank Reconciliation" THEN BEGIN
                                                                  BankAcc.LOCKTABLE;
                                                                  BankAcc.GET("Bank Account No.");
                                                                  BankAcc."Last Statement No." := "Statement No.";
                                                                  BankAcc.MODIFY;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Statement No.;
                                                              ESM=N§ estado de cta. banco;
                                                              FRC=Nø de relev‚;
                                                              ENC=Statement No.];
                                                   NotBlank=Yes }
    { 3   ;   ;Statement Ending Balance;Decimal   ;CaptionML=[ENU=Statement Ending Balance;
                                                              ESM=Saldo final estado de cuenta;
                                                              FRC=Solde final du relev‚;
                                                              ENC=Statement Ending Balance];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 4   ;   ;Statement Date      ;Date          ;CaptionML=[ENU=Statement Date;
                                                              ESM=Fecha estado de cuenta banco;
                                                              FRC=Date du relev‚;
                                                              ENC=Statement Date] }
    { 5   ;   ;Balance Last Statement;Decimal     ;OnValidate=BEGIN
                                                                TESTFIELD("Statement Type","Statement Type"::"Bank Reconciliation");
                                                                BankAcc.GET("Bank Account No.");
                                                                IF "Balance Last Statement" <> BankAcc."Balance Last Statement" THEN
                                                                  IF NOT
                                                                     CONFIRM(
                                                                       Text002,FALSE,
                                                                       FIELDCAPTION("Balance Last Statement"),BankAcc.FIELDCAPTION("Balance Last Statement"),
                                                                       BankAcc.TABLECAPTION)
                                                                  THEN
                                                                    "Balance Last Statement" := xRec."Balance Last Statement";
                                                              END;

                                                   CaptionML=[ENU=Balance Last Statement;
                                                              ESM=Saldo £lt. edo. cta. banco;
                                                              FRC=Solde dernier relev‚;
                                                              ENC=Balance Last Statement];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 6   ;   ;Bank Statement      ;BLOB          ;CaptionML=[ENU=Bank Statement;
                                                              ESM=Estado de cuenta banco;
                                                              FRC=Relev‚ bancaire;
                                                              ENC=Bank Statement] }
    { 7   ;   ;Total Balance on Bank Account;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Bank Account Ledger Entry".Amount WHERE (Bank Account No.=FIELD(Bank Account No.)));
                                                   CaptionML=[ENU=Total Balance on Bank Account;
                                                              ESM=Saldo total en cuenta bancaria;
                                                              FRC=Solde total sur compte bancaire;
                                                              ENC=Total Balance on Bank Account];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 8   ;   ;Total Applied Amount;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Bank Acc. Reconciliation Line"."Applied Amount" WHERE (Statement Type=FIELD(Statement Type),
                                                                                                                           Bank Account No.=FIELD(Bank Account No.),
                                                                                                                           Statement No.=FIELD(Statement No.)));
                                                   CaptionML=[ENU=Total Applied Amount;
                                                              ESM=Importe liquidado total;
                                                              FRC=Montant affect‚ total;
                                                              ENC=Total Applied Amount];
                                                   Editable=No;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 9   ;   ;Total Transaction Amount;Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Bank Acc. Reconciliation Line"."Statement Amount" WHERE (Statement Type=FIELD(Statement Type),
                                                                                                                             Bank Account No.=FIELD(Bank Account No.),
                                                                                                                             Statement No.=FIELD(Statement No.)));
                                                   CaptionML=[ENU=Total Transaction Amount;
                                                              ESM=Importe total de la transacci¢n;
                                                              FRC=Montant transaction total;
                                                              ENC=Total Transaction Amount];
                                                   Editable=No;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 20  ;   ;Statement Type      ;Option        ;CaptionML=[ENU=Statement Type;
                                                              ESM=Tipo de estado de cuenta;
                                                              FRC=Type relev‚;
                                                              ENC=Statement Type];
                                                   OptionCaptionML=[ENU=Bank Reconciliation,Payment Application;
                                                                    ESM=Conciliaci¢n banco,liquidaci¢n de pago;
                                                                    FRC=Rapprochement bancaire,Affectation paiement;
                                                                    ENC=Bank Reconciliation,Payment Application];
                                                   OptionString=Bank Reconciliation,Payment Application }
    { 21  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ESM=C¢d. dim. acceso dir. 1;
                                                              FRC=Code raccourci de dimension 1;
                                                              ENC=Shortcut Dimension 1 Code];
                                                   CaptionClass='1,2,1' }
    { 22  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ESM=C¢d. dim. acceso dir. 2;
                                                              FRC=Code raccourci de dimension 2;
                                                              ENC=Shortcut Dimension 2 Code];
                                                   CaptionClass='1,2,2' }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDocDim;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              ESM=Id. grupo dimensiones;
                                                              FRC=Code ensemble de dimensions;
                                                              ENC=Dimension Set ID];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Statement Type,Bank Account No.,Statement No.;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Statement %1 already exists.;ESM=El estado de cta. banco %1 ya existe.;FRC=Le relev‚ %1 existe d‚j….;ENC=Statement %1 already exists.';
      Text001@1001 : TextConst 'ENU=You cannot rename a %1.;ESM=No se puede cambiar el nombre a %1.;FRC=Vous ne pouvez pas renommer un %1.;ENC=You cannot rename a %1.';
      Text002@1002 : TextConst 'ENU=%1 is different from %2 on the %3. Do you want to change the value?;ESM=%1 es diferente del %2 en el %3. ¨Confirma que desea cambiar el valor?;FRC=%1 est diff‚rent de %2 sur le %3. Voulez-vous changer la valeur?;ENC=%1 is different from %2 on the %3. Do you want to change the value?';
      BankAcc@1003 : Record 270;
      BankAccRecon@1004 : Record 273;
      BankAccReconLine@1005 : Record 274;
      PostedBankAccStmt@1006 : Record 275;
      PostedPaymentReconHdr@1007 : Record 1295;
      DimMgt@1008 : Codeunit 408;
      YouChangedDimQst@1009 : TextConst 'ENU=You may have changed a dimension.\\Do you want to update the lines?;ESM=Puede que haya cambiado una dimensi¢n.\\¨Desea actualizar las l¡neas?;FRC=Vous avez probablement modifi‚ une dimension.\\Souhaitez-vous mettre … jour les lignes?;ENC=You may have changed a dimension.\\Do you want to update the lines?';
      NoBankAccountsMsg@1010 : TextConst 'ENU=You have not set up a bank account.\To use the payments import process, set up a bank account.;ESM=No ha configurado ninguna cuenta bancaria.\Para usar el proceso de importaci¢n de pagos, configure una cuenta bancaria.;FRC=Vous n''avez param‚tr‚ aucun compte bancaire.\Veuillez en param‚trer un pour utiliser le processus d''importation de paiements.;ENC=You have not set up a bank account.\To use the payments import process, set up a bank account.';
      NoBankAccWithFileFormatMsg@1011 : TextConst 'ENU=No bank account exists that is ready for import of bank statement files.\Fill the Bank Statement Import Format field on the card of the bank account that you want to use.;ESM=No existen cuentas bancarias listas para la importaci¢n de los archivos de estado de cuenta bancario.\Rellene el campo Formato de importaci¢n de estado de cuenta bancario de la ficha de la cuenta bancaria que desee usar.;FRC=Il n''existe aucun compte bancaire prˆt pour l''importation de fichiers de relev‚ bancaire.\Compl‚tez le champ Format importation relev‚ bancaire sur la fiche du compte bancaire que vous souhaitez utiliser.;ENC=No bank account exists that is ready for import of bank statement files.\Fill the Bank Statement Import Format field on the card of the bank account that you want to use.';
      PostHighConfidentLinesQst@1012 : TextConst 'ENU=All imported bank statement lines were applied with high confidence level.\Do you want to post the payment applications?;ESM=Todas las l¡neas del estado de cuenta bancario importado se aplicaron con un nivel de confianza elevado.\¨Desea registrar las liquidaciones de pago?;FRC=Toutes les lignes de relev‚ bancaire import‚es ont ‚t‚ lettr‚es avec un niveau de confiance ‚lev‚.\Voulez-vous valider les lettrages paiementÿ?;ENC=All imported bank statement lines were applied with high confidence level.\Do you want to post the payment applications?';
      MustHaveValueQst@1015 : TextConst 'ENU=The bank account must have a value in %1. Do you want to open the bank account card?;ESM=La cuenta bancaria debe tener un valor en %1. ¨Desea abrir la tarjeta de cuenta bancaria?;FRC=Le compte bancaire doit avoir une valeur dans %1. Voulez-vous ouvrir la fiche compte bancaire?;ENC=The bank account must have a value in %1. Do you want to open the bank account card?';

    LOCAL PROCEDURE CreateDim@22(Type1@1000 : Integer;No1@1001 : Code[20]);
    VAR
      SourceCodeSetup@1010 : Record 242;
      TableID@1011 : ARRAY [10] OF Integer;
      No@1012 : ARRAY [10] OF Code[20];
      OldDimSetID@1013 : Integer;
    BEGIN
      SourceCodeSetup.GET;
      TableID[1] := Type1;
      No[1] := No1;
      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      OldDimSetID := "Dimension Set ID";
      "Dimension Set ID" :=
        DimMgt.GetDefaultDimID(
          TableID,No,SourceCodeSetup."Payment Reconciliation Journal","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);

      IF (OldDimSetID <> "Dimension Set ID") AND LinesExist THEN BEGIN
        MODIFY;
        UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;
    END;

    LOCAL PROCEDURE GetCurrencyCode@1() : Code[10];
    VAR
      BankAcc2@1000 : Record 270;
    BEGIN
      IF "Bank Account No." = BankAcc2."No." THEN
        EXIT(BankAcc2."Currency Code");

      IF BankAcc2.GET("Bank Account No.") THEN
        EXIT(BankAcc2."Currency Code");

      EXIT('');
    END;

    PROCEDURE MatchSingle@5(DateRange@1008 : Integer);
    VAR
      MatchBankRecLines@1000 : Codeunit 1252;
    BEGIN
      MatchBankRecLines.MatchSingle(Rec,DateRange);
    END;

    PROCEDURE ImportBankStatement@6();
    VAR
      DataExch@1001 : Record 1220;
      ProcessBankAccRecLines@1000 : Codeunit 1248;
    BEGIN
      IF BankAccountCouldBeUsedForImport THEN BEGIN
        DataExch.INIT;
        ProcessBankAccRecLines.ImportBankStatement(Rec,DataExch);
      END;
    END;

    LOCAL PROCEDURE ValidateShortcutDimCode@7(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    VAR
      DimMgt@1002 : Codeunit 408;
      OldDimSetID@1003 : Integer;
    BEGIN
      OldDimSetID := "Dimension Set ID";
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");

      IF OldDimSetID <> "Dimension Set ID" THEN BEGIN
        MODIFY;
        UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;
    END;

    PROCEDURE ShowDocDim@3();
    VAR
      OldDimSetID@1000 : Integer;
    BEGIN
      OldDimSetID := "Dimension Set ID";
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet2(
          "Dimension Set ID",STRSUBSTNO('%1 %2',TABLECAPTION,"Statement No."),
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");

      IF OldDimSetID <> "Dimension Set ID" THEN BEGIN
        MODIFY;
        UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;
    END;

    LOCAL PROCEDURE UpdateAllLineDim@34(NewParentDimSetID@1000 : Integer;OldParentDimSetID@1001 : Integer);
    VAR
      BankAccReconciliationLine@1003 : Record 274;
      NewDimSetID@1002 : Integer;
    BEGIN
      // Update all lines with changed dimensions.
      IF NewParentDimSetID = OldParentDimSetID THEN
        EXIT;

      BankAccReconciliationLine.LOCKTABLE;
      IF BankAccReconciliationLine.LinesExist(Rec) THEN BEGIN
        IF NOT CONFIRM(YouChangedDimQst) THEN
          EXIT;

        REPEAT
          NewDimSetID :=
            DimMgt.GetDeltaDimSetID(BankAccReconciliationLine."Dimension Set ID",NewParentDimSetID,OldParentDimSetID);
          IF BankAccReconciliationLine."Dimension Set ID" <> NewDimSetID THEN BEGIN
            BankAccReconciliationLine."Dimension Set ID" := NewDimSetID;
            DimMgt.UpdateGlobalDimFromDimSetID(
              BankAccReconciliationLine."Dimension Set ID",
              BankAccReconciliationLine."Shortcut Dimension 1 Code",
              BankAccReconciliationLine."Shortcut Dimension 2 Code");
            BankAccReconciliationLine.MODIFY;
          END;
        UNTIL BankAccReconciliationLine.NEXT = 0;
      END;
    END;

    PROCEDURE OpenNewWorksheet@19();
    VAR
      BankAccount@1000 : Record 270;
      BankAccReconciliation@1002 : Record 273;
    BEGIN
      IF NOT SelectBankAccountToUse(BankAccount,FALSE) THEN
        EXIT;

      CreateNewBankPaymentAppBatch(BankAccount."No.",BankAccReconciliation);
      OpenWorksheet(BankAccReconciliation);
    END;

    PROCEDURE ImportAndProcessToNewStatement@8();
    VAR
      BankAccount@1000 : Record 270;
      BankAccReconciliation@1001 : Record 273;
      DataExch@1002 : Record 1220;
      DataExchDef@1003 : Record 1222;
    BEGIN
      IF NOT SelectBankAccountToUse(BankAccount,TRUE) THEN
        EXIT;
      BankAccount.GetDataExchDef(DataExchDef);

      IF NOT DataExch.ImportFileContent(DataExchDef) THEN
        EXIT;

      CreateNewBankPaymentAppBatch(BankAccount."No.",BankAccReconciliation);
      ImportAndProcessStatement(BankAccReconciliation,DataExch);
    END;

    LOCAL PROCEDURE ImportAndProcessStatement@15(BankAccReconciliation@1000 : Record 273;DataExch@1002 : Record 1220);
    VAR
      ProcessBankAccRecLines@1001 : Codeunit 1248;
    BEGIN
      IF NOT ProcessBankAccRecLines.ImportBankStatement(BankAccReconciliation,DataExch) THEN
        EXIT;

      COMMIT;
      CODEUNIT.RUN(CODEUNIT::"Match Bank Pmt. Appl.",BankAccReconciliation);

      IF ConfidenceLevelPermitToPost(BankAccReconciliation) THEN
        CODEUNIT.RUN(CODEUNIT::"Bank Acc. Reconciliation Post",BankAccReconciliation)
      ELSE
        OpenWorksheet(BankAccReconciliation);
    END;

    PROCEDURE CreateNewBankPaymentAppBatch@16(BankAccountNo@1001 : Code[20];VAR BankAccReconciliation@1000 : Record 273);
    BEGIN
      BankAccReconciliation.INIT;
      BankAccReconciliation."Statement Type" := BankAccReconciliation."Statement Type"::"Payment Application";
      BankAccReconciliation.VALIDATE("Bank Account No.",BankAccountNo);
      BankAccReconciliation.INSERT(TRUE);
    END;

    LOCAL PROCEDURE SelectBankAccountToUse@4(VAR BankAccount@1000 : Record 270;OnlyWithImportFormatSet@1002 : Boolean) : Boolean;
    VAR
      PaymentBankAccountList@1001 : Page 1282;
    BEGIN
      IF OnlyWithImportFormatSet THEN
        BankAccount.SETFILTER("Bank Statement Import Format",'<>%1','');

      CASE BankAccount.COUNT OF
        0:
          BEGIN
            IF NOT BankAccount.GET(CantFindBancAccToUseInPaymentFileImport) THEN
              EXIT(FALSE);

            EXIT(TRUE);
          END;
        1:
          BankAccount.FINDFIRST;
        ELSE BEGIN
          PaymentBankAccountList.LOOKUPMODE(TRUE);
          PaymentBankAccountList.SETTABLEVIEW(BankAccount);
          IF PaymentBankAccountList.RUNMODAL = ACTION::LookupOK THEN
            PaymentBankAccountList.GETRECORD(BankAccount)
          ELSE
            EXIT(FALSE);
        END;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE OpenWorksheet@14(BankAccReconciliation@1001 : Record 273);
    VAR
      BankAccReconciliationLine@1000 : Record 274;
    BEGIN
      SetFiltersOnBankAccReconLineTable(BankAccReconciliation,BankAccReconciliationLine);
      PAGE.RUN(PAGE::"Payment Reconciliation Journal",BankAccReconciliationLine);
    END;

    LOCAL PROCEDURE CantFindBancAccToUseInPaymentFileImport@18() : Code[20];
    VAR
      BankAccount@1000 : Record 270;
    BEGIN
      IF BankAccount.COUNT = 0 THEN
        MESSAGE(NoBankAccountsMsg)
      ELSE
        MESSAGE(NoBankAccWithFileFormatMsg);

      IF PAGE.RUNMODAL(PAGE::"Payment Bank Account List",BankAccount) = ACTION::LookupOK THEN
        IF BankAccount."Bank Statement Import Format" <> '' THEN
          EXIT(BankAccount."No.");

      EXIT('');
    END;

    LOCAL PROCEDURE SetLastPaymentStatementNo@9(VAR BankAccount@1000 : Record 270);
    BEGIN
      IF BankAccount."Last Payment Statement No." = '' THEN BEGIN
        BankAccount."Last Payment Statement No." := '0';
        BankAccount.MODIFY;
      END;
    END;

    LOCAL PROCEDURE SetLastStatementNo@17(VAR BankAccount@1000 : Record 270);
    BEGIN
      IF BankAccount."Last Statement No." = '' THEN BEGIN
        BankAccount."Last Statement No." := '0';
        BankAccount.MODIFY;
      END;
    END;

    PROCEDURE SetFiltersOnBankAccReconLineTable@10(BankAccReconciliation@1001 : Record 273;VAR BankAccReconciliationLine@1000 : Record 274);
    BEGIN
      BankAccReconciliationLine.FILTERGROUP := 2;
      BankAccReconciliationLine.SETRANGE("Statement Type",BankAccReconciliation."Statement Type");
      BankAccReconciliationLine.SETRANGE("Bank Account No.",BankAccReconciliation."Bank Account No.");
      BankAccReconciliationLine.SETRANGE("Statement No.",BankAccReconciliation."Statement No.");
      BankAccReconciliationLine.FILTERGROUP := 0;
    END;

    LOCAL PROCEDURE ConfidenceLevelPermitToPost@25(BankAccReconciliation@1000 : Record 273) : Boolean;
    VAR
      BankAccReconciliationLine@1001 : Record 274;
    BEGIN
      SetFiltersOnBankAccReconLineTable(BankAccReconciliation,BankAccReconciliationLine);
      IF BankAccReconciliationLine.COUNT = 0 THEN
        EXIT(FALSE);

      BankAccReconciliationLine.SETFILTER("Match Confidence",'<>%1',BankAccReconciliationLine."Match Confidence"::High);
      IF BankAccReconciliationLine.COUNT <> 0 THEN
        EXIT(FALSE);

      IF CONFIRM(PostHighConfidentLinesQst) THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE LinesExist@11() : Boolean;
    VAR
      BankAccReconciliationLine@1000 : Record 274;
    BEGIN
      EXIT(BankAccReconciliationLine.LinesExist(Rec));
    END;

    LOCAL PROCEDURE BankAccountCouldBeUsedForImport@2() : Boolean;
    VAR
      BankAccount@1000 : Record 270;
    BEGIN
      BankAccount.GET("Bank Account No.");
      IF BankAccount."Bank Statement Import Format" <> '' THEN
        EXIT(TRUE);

      IF NOT CONFIRM(MustHaveValueQst,TRUE,BankAccount.FIELDCAPTION("Bank Statement Import Format")) THEN
        EXIT(FALSE);

      IF PAGE.RUNMODAL(PAGE::"Payment Bank Account Card",BankAccount) = ACTION::LookupOK THEN
        IF BankAccount."Bank Statement Import Format" <> '' THEN
          EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE GetTempCopy@1020000(VAR BankAccReconciliation@1020000 : Record 273);
    BEGIN
      IF BankAccReconciliation.HASFILTER THEN
        COPYFILTERS(BankAccReconciliation);

      SETRANGE("Statement Type","Statement Type"::"Bank Reconciliation");
      IF NOT FINDSET THEN
        EXIT;

      REPEAT
        BankAccReconciliation := Rec;
        BankAccReconciliation.INSERT;
      UNTIL NEXT = 0;
    END;

    PROCEDURE GetTempCopyFromBankRecHeader@1020004(VAR BankAccReconciliation@1020000 : Record 273);
    VAR
      BankRecHeader@1020001 : Record 10120;
    BEGIN
      IF BankAccReconciliation.HASFILTER THEN BEGIN
        BankRecHeader.SETFILTER("Bank Account No.",BankAccReconciliation.GETFILTER("Bank Account No."));
        BankRecHeader.SETFILTER("Statement No.",BankAccReconciliation.GETFILTER("Statement No."));
        BankRecHeader.SETFILTER("Statement Date",BankAccReconciliation.GETFILTER("Statement Date"));
        BankRecHeader.SETFILTER("Statement Balance",BankAccReconciliation.GETFILTER("Balance Last Statement"));
      END;

      IF NOT BankRecHeader.FINDSET THEN
        EXIT;

      REPEAT
        BankAccReconciliation."Statement Type" := BankAccReconciliation."Statement Type"::"Bank Reconciliation";
        BankAccReconciliation."Bank Account No." := BankRecHeader."Bank Account No.";
        BankAccReconciliation."Statement No." := BankRecHeader."Statement No.";
        BankAccReconciliation."Statement Date" := BankRecHeader."Statement Date";
        BankAccReconciliation."Balance Last Statement" := BankRecHeader."Statement Balance";
        BankAccReconciliation."Statement Ending Balance" := BankRecHeader.CalculateEndingBalance;
        BankAccReconciliation.INSERT;
      UNTIL BankRecHeader.NEXT = 0;
    END;

    PROCEDURE InsertRec@1020001(StatementType@1020000 : Option;BankAccountNo@1020001 : Code[20]);
    BEGIN
      INIT;
      VALIDATE("Statement Type",StatementType);
      VALIDATE("Bank Account No.",BankAccountNo);
      INSERT(TRUE);
    END;

    BEGIN
    END.
  }
}

