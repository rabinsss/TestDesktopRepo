OBJECT Table 274 Bank Acc. Reconciliation Line
{
  OBJECT-PROPERTIES
  {
    Date=10/23/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.43402;
  }
  PROPERTIES
  {
    Permissions=TableData 1221=rimd;
    OnInsert=BEGIN
               BankAccRecon.GET("Statement Type","Bank Account No.","Statement No.");
               "Applied Entries" := 0;
               VALIDATE("Applied Amount",0);
             END;

    OnModify=BEGIN
               IF xRec."Statement Amount" <> "Statement Amount" THEN
                 RemoveApplication(Type);
             END;

    OnDelete=BEGIN
               RemoveApplication(Type);
               ClearDataExchEntries;
               RemoveAppliedPaymentEntries;
               DeletePaymentMatchingDetails;
               FIND;
             END;

    OnRename=BEGIN
               ERROR(Text000,TABLECAPTION);
             END;

    CaptionML=[ENU=Bank Acc. Reconciliation Line;
               ESM=L°n. conciliaci¢n banco;
               FRC=Ligne rapproch. cpte bancaire;
               ENC=Bank Acc. Reconciliation Line];
  }
  FIELDS
  {
    { 1   ;   ;Bank Account No.    ;Code20        ;TableRelation="Bank Account";
                                                   CaptionML=[ENU=Bank Account No.;
                                                              ESM=C¢d. cuenta banco;
                                                              FRC=N¯ compte bancaire;
                                                              ENC=Bank Account No.] }
    { 2   ;   ;Statement No.       ;Code20        ;TableRelation="Bank Acc. Reconciliation"."Statement No." WHERE (Bank Account No.=FIELD(Bank Account No.));
                                                   CaptionML=[ENU=Statement No.;
                                                              ESM=Nß estado de cta. banco;
                                                              FRC=N¯ de relevÇ;
                                                              ENC=Statement No.] }
    { 3   ;   ;Statement Line No.  ;Integer       ;CaptionML=[ENU=Statement Line No.;
                                                              ESM=Nß l°n. estado de cta. banco;
                                                              FRC=N¯ ligne relevÇ;
                                                              ENC=Statement Line No.] }
    { 4   ;   ;Document No.        ;Code20        ;CaptionML=[ENU=Document No.;
                                                              ESM=Nß documento;
                                                              FRC=N¯ de document;
                                                              ENC=Document No.] }
    { 5   ;   ;Transaction Date    ;Date          ;CaptionML=[ENU=Transaction Date;
                                                              ESM=Fecha movimiento;
                                                              FRC=Date transaction;
                                                              ENC=Transaction Date] }
    { 6   ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ESM=Descripci¢n;
                                                              FRC=Description;
                                                              ENC=Description] }
    { 7   ;   ;Statement Amount    ;Decimal       ;OnValidate=BEGIN
                                                                Difference := "Statement Amount" - "Applied Amount";
                                                              END;

                                                   CaptionML=[ENU=Statement Amount;
                                                              ESM=Importe estado de cuenta;
                                                              FRC=Montant relevÇ;
                                                              ENC=Statement Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 8   ;   ;Difference          ;Decimal       ;OnValidate=BEGIN
                                                                "Statement Amount" := "Applied Amount" + Difference;
                                                              END;

                                                   CaptionML=[ENU=Difference;
                                                              ESM=Diferencia;
                                                              FRC=DiffÇrence;
                                                              ENC=Difference];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 9   ;   ;Applied Amount      ;Decimal       ;OnValidate=BEGIN
                                                                Difference := "Statement Amount" - "Applied Amount";
                                                              END;

                                                   OnLookup=BEGIN
                                                              DisplayApplication;
                                                            END;

                                                   CaptionML=[ENU=Applied Amount;
                                                              ESM=Importe conciliado;
                                                              FRC=Montant affectÇ;
                                                              ENC=Applied Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 10  ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                IF (Type <> xRec.Type) AND
                                                                   ("Applied Entries" <> 0)
                                                                THEN
                                                                  IF CONFIRM(Text001,FALSE) THEN BEGIN
                                                                    RemoveApplication(xRec.Type);
                                                                    VALIDATE("Applied Amount",0);
                                                                    "Applied Entries" := 0;
                                                                    "Check No." := '';
                                                                  END ELSE
                                                                    ERROR(Text002);
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              ESM=Tipo;
                                                              FRC=Type;
                                                              ENC=Type];
                                                   OptionCaptionML=[ENU=Bank Account Ledger Entry,Check Ledger Entry,Difference;
                                                                    ESM=Mov. banco,Mov. cheque,Diferencia;
                                                                    FRC=êcriture compte bancaire,êcriture compte Chäque,DiffÇrence;
                                                                    ENC=Bank Account Ledger Entry,Cheque Ledger Entry,Difference];
                                                   OptionString=Bank Account Ledger Entry,Check Ledger Entry,Difference }
    { 11  ;   ;Applied Entries     ;Integer       ;OnLookup=BEGIN
                                                              DisplayApplication;
                                                            END;

                                                   CaptionML=[ENU=Applied Entries;
                                                              ESM=Movs. conciliados;
                                                              FRC=êcritures affectÇes;
                                                              ENC=Applied Entries];
                                                   Editable=No }
    { 12  ;   ;Value Date          ;Date          ;CaptionML=[ENU=Value Date;
                                                              ESM=Fecha valor;
                                                              FRC=Date de valeur;
                                                              ENC=Value Date] }
    { 13  ;   ;Ready for Application;Boolean      ;CaptionML=[ENU=Ready for Application;
                                                              ESM=Listo para conciliar;
                                                              FRC=Pràt Ö utiliser;
                                                              ENC=Ready for Application] }
    { 14  ;   ;Check No.           ;Code20        ;CaptionML=[ENU=Check No.;
                                                              ESM=Nß cheque;
                                                              FRC=N¯ de chäque;
                                                              ENC=Cheque No.] }
    { 15  ;   ;Related-Party Name  ;Text250       ;CaptionML=[ENU=Related-Party Name;
                                                              ESM=Nombre de parte vinculada;
                                                              FRC=Nom partie associÇe;
                                                              ENC=Related-Party Name] }
    { 16  ;   ;Additional Transaction Info;Text100;CaptionML=[ENU=Additional Transaction Info;
                                                              ESM=Informaci¢n adicional de la transacci¢n;
                                                              FRC=Info transaction supplÇmentaire;
                                                              ENC=Additional Transaction Info] }
    { 17  ;   ;Data Exch. Entry No.;Integer       ;TableRelation="Data Exch.";
                                                   CaptionML=[ENU=Data Exch. Entry No.;
                                                              ESM=N.ß mov. intercambio de datos;
                                                              FRC=N¯ Çcriture Çchge donnÇes;
                                                              ENC=Data Exch. Entry No.];
                                                   Editable=No }
    { 18  ;   ;Data Exch. Line No. ;Integer       ;CaptionML=[ENU=Data Exch. Line No.;
                                                              ESM=N.ß l°nea intercambio de datos;
                                                              FRC=N¯ ligne Çchge donnÇes;
                                                              ENC=Data Exch. Line No.];
                                                   Editable=No }
    { 20  ;   ;Statement Type      ;Option        ;CaptionML=[ENU=Statement Type;
                                                              ESM=Tipo de estado de cuenta;
                                                              FRC=Type relevÇ;
                                                              ENC=Statement Type];
                                                   OptionCaptionML=[ENU=Bank Reconciliation,Payment Application;
                                                                    ESM=Conciliaci¢n banco,liquidaci¢n de pago;
                                                                    FRC=Rapprochement bancaire,Affectation paiement;
                                                                    ENC=Bank Reconciliation,Payment Application];
                                                   OptionString=Bank Reconciliation,Payment Application }
    { 21  ;   ;Account Type        ;Option        ;OnValidate=BEGIN
                                                                TESTFIELD("Applied Amount",0);
                                                              END;

                                                   CaptionML=[ENU=Account Type;
                                                              ESM=Tipo de cta.;
                                                              FRC=Type de compte;
                                                              ENC=Account Type];
                                                   OptionCaptionML=[ENU=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner;
                                                                    ESM=Cuenta,Cliente,Proveedor,Banco,Activo,Empresa vinculada asociada;
                                                                    FRC=Compte du grand livre,Client,Fournisseur,Compte bancaire,Immobilisation,Partenaire IC;
                                                                    ENC=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner];
                                                   OptionString=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner }
    { 22  ;   ;Account No.         ;Code20        ;TableRelation=IF (Account Type=CONST(G/L Account)) "G/L Account" WHERE (Account Type=CONST(Posting),
                                                                                                                           Blocked=CONST(No))
                                                                                                                           ELSE IF (Account Type=CONST(Customer)) Customer
                                                                                                                           ELSE IF (Account Type=CONST(Vendor)) Vendor
                                                                                                                           ELSE IF (Account Type=CONST(Bank Account)) "Bank Account"
                                                                                                                           ELSE IF (Account Type=CONST(Fixed Asset)) "Fixed Asset"
                                                                                                                           ELSE IF (Account Type=CONST(IC Partner)) "IC Partner";
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Applied Amount",0);
                                                                CreateDim(DimMgt.TypeToTableID1("Account Type"),"Account No.");
                                                                DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Account No.;
                                                              ESM=Nß cuenta;
                                                              FRC=N¯ de compte;
                                                              ENC=Account No.] }
    { 23  ;   ;Transaction Text    ;Text140       ;OnValidate=BEGIN
                                                                IF ("Statement Type" = "Statement Type"::"Payment Application") OR (Description = '') THEN
                                                                  Description := COPYSTR("Transaction Text",1,MAXSTRLEN(Description));
                                                              END;

                                                   CaptionML=[ENU=Transaction Text;
                                                              ESM=Texto transacci¢n;
                                                              FRC=Texte transaction;
                                                              ENC=Transaction Text] }
    { 24  ;   ;Related-Party Bank Acc. No.;Text100;CaptionML=[ENU=Related-Party Bank Acc. No.;
                                                              ESM=N.ß cta. bancaria parte vinculada;
                                                              FRC=N¯ cpte bancaire partie associÇe;
                                                              ENC=Related-Party Bank Acc. No.] }
    { 25  ;   ;Related-Party Address;Text100      ;CaptionML=[ENU=Related-Party Address;
                                                              ESM=Direcci¢n parte vinculada;
                                                              FRC=Adresse partie associÇe;
                                                              ENC=Related-Party Address] }
    { 26  ;   ;Related-Party City  ;Text50        ;CaptionML=[ENU=Related-Party City;
                                                              ESM=Municipio/Ciudad parte vinculada;
                                                              FRC=Ville partie associÇe;
                                                              ENC=Related-Party City] }
    { 31  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ESM=C¢d. dim. acceso dir. 1;
                                                              FRC=Code raccourci de dimension 1;
                                                              ENC=Shortcut Dimension 1 Code];
                                                   CaptionClass='1,2,1' }
    { 32  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ESM=C¢d. dim. acceso dir. 2;
                                                              FRC=Code raccourci de dimension 2;
                                                              ENC=Shortcut Dimension 2 Code];
                                                   CaptionClass='1,2,2' }
    { 50  ;   ;Match Confidence    ;Option        ;FieldClass=FlowField;
                                                   InitValue=None;
                                                   CalcFormula=Max("Applied Payment Entry"."Match Confidence" WHERE (Statement Type=FIELD(Statement Type),
                                                                                                                     Bank Account No.=FIELD(Bank Account No.),
                                                                                                                     Statement No.=FIELD(Statement No.),
                                                                                                                     Statement Line No.=FIELD(Statement Line No.)));
                                                   CaptionML=[ENU=Match Confidence;
                                                              ESM=Confianza de la coincidencia;
                                                              FRC=FiabilitÇ correspondance;
                                                              ENC=Match Confidence];
                                                   OptionCaptionML=[ENU=None,Low,Medium,High,High - Text-to-Account Mapping,Manual,Accepted;
                                                                    ESM=Ninguna,Baja,Media,Alta,Alta: asignaci¢n de texto a cuentas,Manual,Aceptada;
                                                                    FRC=Aucune,Faible,Moyenne,êlevÇe,êlevÇe - Correspondance texte et compte,Manuelle,AcceptÇe;
                                                                    ENC=None,Low,Medium,High,High - Text-to-Account Mapping,Manual,Accepted];
                                                   OptionString=None,Low,Medium,High,High - Text-to-Account Mapping,Manual,Accepted;
                                                   Editable=No }
    { 51  ;   ;Match Quality       ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Max("Applied Payment Entry".Quality WHERE (Bank Account No.=FIELD(Bank Account No.),
                                                                                                          Statement No.=FIELD(Statement No.),
                                                                                                          Statement Line No.=FIELD(Statement Line No.),
                                                                                                          Statement Type=FIELD(Statement Type)));
                                                   CaptionML=[ENU=Match Quality;
                                                              ESM=Corresponder calidad;
                                                              FRC=QualitÇ correspondance;
                                                              ENC=Match Quality];
                                                   Editable=No }
    { 60  ;   ;Sorting Order       ;Integer       ;CaptionML=[ENU=Sorting Order;
                                                              ESM=Orden clasificaci¢n;
                                                              FRC=Ordre de tri;
                                                              ENC=Sorting Order] }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              ESM=Id. grupo dimensiones;
                                                              FRC=Code ensemble de dimensions;
                                                              ENC=Dimension Set ID];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Statement Type,Bank Account No.,Statement No.,Statement Line No.;
                                                   SumIndexFields=Statement Amount,Difference;
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot rename a %1.;ESM=No se puede cambiar el nombre a %1.;FRC=Vous ne pouvez pas renommer un %1.;ENC=You cannot rename a %1.';
      Text001@1001 : TextConst 'ENU=Delete application?;ESM=®Confirma que desea eliminar la conciliaci¢n?;FRC=Supprimer utilisation?;ENC=Delete application?';
      Text002@1002 : TextConst 'ENU=Update canceled.;ESM=Actualizaci¢n cancelada.;FRC=Mise-Ö-jour annulÇe.;ENC=Update cancelled.';
      BankAccLedgEntry@1003 : Record 271;
      CheckLedgEntry@1004 : Record 272;
      BankAccRecon@1005 : Record 273;
      BankAccSetStmtNo@1006 : Codeunit 375;
      CheckSetStmtNo@1007 : Codeunit 376;
      DimMgt@1009 : Codeunit 408;
      AmountWithinToleranceRangeTok@1011 : TextConst '@@@=Do not translate.;ENU=">=%1&<=%2";ESM=">=%1&<=%2";FRC=">=%1&<=%2";ENC=">=%1&<=%2"';
      AmountOustideToleranceRangeTok@1012 : TextConst '@@@=Do not translate.;ENU=<%1|>%2;ESM=<%1|>%2;FRC=<%1|>%2;ENC=<%1|>%2';
      TransactionAmountMustNotBeZeroErr@1008 : TextConst 'ENU=The Transaction Amount field must have a value different than 0.;ESM=El campo Importe de la transacci¢n debe tener un valor distinto de 0.;FRC=La valeur du champ Montant transaction dont àtre diffÇrente de 0.;ENC=The Transaction Amount field must have a value different than 0.';

    PROCEDURE DisplayApplication@2();
    VAR
      PaymentApplication@1000 : Page 1292;
    BEGIN
      CASE "Statement Type" OF
        "Statement Type"::"Bank Reconciliation":
          CASE Type OF
            Type::"Bank Account Ledger Entry":
              BEGIN
                BankAccLedgEntry.RESET;
                BankAccLedgEntry.SETCURRENTKEY("Bank Account No.",Open);
                BankAccLedgEntry.SETRANGE("Bank Account No.","Bank Account No.");
                BankAccLedgEntry.SETRANGE(Open,TRUE);
                BankAccLedgEntry.SETRANGE(
                  "Statement Status",BankAccLedgEntry."Statement Status"::"Bank Acc. Entry Applied");
                BankAccLedgEntry.SETRANGE("Statement No.","Statement No.");
                BankAccLedgEntry.SETRANGE("Statement Line No.","Statement Line No.");
                PAGE.RUN(0,BankAccLedgEntry);
              END;
            Type::"Check Ledger Entry":
              BEGIN
                CheckLedgEntry.RESET;
                CheckLedgEntry.SETCURRENTKEY("Bank Account No.",Open);
                CheckLedgEntry.SETRANGE("Bank Account No.","Bank Account No.");
                CheckLedgEntry.SETRANGE(Open,TRUE);
                CheckLedgEntry.SETRANGE(
                  "Statement Status",CheckLedgEntry."Statement Status"::"Check Entry Applied");
                CheckLedgEntry.SETRANGE("Statement No.","Statement No.");
                CheckLedgEntry.SETRANGE("Statement Line No.","Statement Line No.");
                PAGE.RUN(0,CheckLedgEntry);
              END;
          END;
        "Statement Type"::"Payment Application":
          BEGIN
            IF "Statement Amount" = 0 THEN
              ERROR(TransactionAmountMustNotBeZeroErr);
            PaymentApplication.SetBankAccReconcLine(Rec);
            PaymentApplication.RUNMODAL;
          END;
      END;
    END;

    PROCEDURE GetCurrencyCode@3() : Code[10];
    VAR
      BankAcc@1000 : Record 270;
    BEGIN
      IF "Bank Account No." = BankAcc."No." THEN
        EXIT(BankAcc."Currency Code");

      IF BankAcc.GET("Bank Account No.") THEN
        EXIT(BankAcc."Currency Code");

      EXIT('');
    END;

    PROCEDURE GetStyle@35() : Text;
    BEGIN
      IF "Applied Entries" <> 0 THEN
        EXIT('Favorable');

      EXIT('');
    END;

    PROCEDURE ClearDataExchEntries@5();
    VAR
      DataExchField@1000 : Record 1221;
      BankAccReconciliationLine@1001 : Record 274;
    BEGIN
      DataExchField.DeleteRelatedRecords("Data Exch. Entry No.","Data Exch. Line No.");

      BankAccReconciliationLine.SETRANGE("Statement Type","Statement Type");
      BankAccReconciliationLine.SETRANGE("Bank Account No.","Bank Account No.");
      BankAccReconciliationLine.SETRANGE("Statement No.","Statement No.");
      BankAccReconciliationLine.SETRANGE("Data Exch. Entry No.","Data Exch. Entry No.");
      BankAccReconciliationLine.SETFILTER("Statement Line No.",'<>%1',"Statement Line No.");
      IF BankAccReconciliationLine.ISEMPTY THEN
        DataExchField.DeleteRelatedRecords("Data Exch. Entry No.",0);
    END;

    PROCEDURE ShowDimensions@25();
    BEGIN
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2 %3',TABLECAPTION,"Statement No.","Statement Line No."));
      DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    LOCAL PROCEDURE CreateDim@26(Type1@1000 : Integer;No1@1001 : Code[20]);
    VAR
      SourceCodeSetup@1002 : Record 242;
      BankAccReconciliation@1005 : Record 273;
      TableID@1003 : ARRAY [10] OF Integer;
      No@1004 : ARRAY [10] OF Code[20];
    BEGIN
      SourceCodeSetup.GET;
      TableID[1] := Type1;
      No[1] := No1;
      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      BankAccReconciliation.GET("Statement Type","Bank Account No.","Statement No.");
      "Dimension Set ID" :=
        DimMgt.GetDefaultDimID(
          TableID,No,SourceCodeSetup."Payment Reconciliation Journal",
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",BankAccReconciliation."Dimension Set ID",DATABASE::"Bank Account");
    END;

    PROCEDURE SetUpNewLine@34();
    BEGIN
      "Transaction Date" := WORKDATE;
      "Match Confidence" := "Match Confidence"::None;
      "Document No." := '';
    END;

    LOCAL PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    END;

    LOCAL PROCEDURE LookupShortcutDimCode@28(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.LookupDimValueCode(FieldNumber,ShortcutDimCode);
      ValidateShortcutDimCode(FieldNumber,ShortcutDimCode);
    END;

    LOCAL PROCEDURE ShowShortcutDimCode@27(VAR ShortcutDimCode@1000 : ARRAY [8] OF Code[20]);
    BEGIN
      DimMgt.GetShortcutDimensions("Dimension Set ID",ShortcutDimCode);
    END;

    PROCEDURE AcceptAppliedPaymentEntriesSelectedLines@12();
    BEGIN
      IF FINDSET THEN
        REPEAT
          AcceptApplication;
        UNTIL NEXT = 0;
    END;

    PROCEDURE RejectAppliedPaymentEntriesSelectedLines@18();
    BEGIN
      IF FINDSET THEN
        REPEAT
          RejectAppliedPayment;
        UNTIL NEXT = 0;
    END;

    PROCEDURE RejectAppliedPayment@6();
    BEGIN
      RemoveAppliedPaymentEntries;
      DeletePaymentMatchingDetails;
    END;

    PROCEDURE AcceptApplication@4();
    VAR
      AppliedPaymentEntry@1000 : Record 1294;
    BEGIN
      IF Difference > 0 THEN
        TransferRemainingAmountToAccount;

      AppliedPaymentEntry.FilterAppliedPmtEntry(Rec);
      AppliedPaymentEntry.MODIFYALL("Match Confidence","Match Confidence"::Accepted);
    END;

    LOCAL PROCEDURE RemoveApplication@1(AppliedType@1000 : Option);
    BEGIN
      IF "Statement Type" = "Statement Type"::"Bank Reconciliation" THEN
        CASE AppliedType OF
          Type::"Bank Account Ledger Entry":
            BEGIN
              BankAccLedgEntry.RESET;
              BankAccLedgEntry.SETCURRENTKEY("Bank Account No.",Open);
              BankAccLedgEntry.SETRANGE("Bank Account No.","Bank Account No.");
              BankAccLedgEntry.SETRANGE(Open,TRUE);
              BankAccLedgEntry.SETRANGE(
                "Statement Status",BankAccLedgEntry."Statement Status"::"Bank Acc. Entry Applied");
              BankAccLedgEntry.SETRANGE("Statement No.","Statement No.");
              BankAccLedgEntry.SETRANGE("Statement Line No.","Statement Line No.");
              BankAccLedgEntry.LOCKTABLE;
              CheckLedgEntry.LOCKTABLE;
              IF BankAccLedgEntry.FIND('-') THEN
                REPEAT
                  BankAccSetStmtNo.RemoveReconNo(BankAccLedgEntry,Rec,TRUE);
                UNTIL BankAccLedgEntry.NEXT = 0;
              "Applied Entries" := 0;
              VALIDATE("Applied Amount",0);
              MODIFY;
            END;
          Type::"Check Ledger Entry":
            BEGIN
              CheckLedgEntry.RESET;
              CheckLedgEntry.SETCURRENTKEY("Bank Account No.",Open);
              CheckLedgEntry.SETRANGE("Bank Account No.","Bank Account No.");
              CheckLedgEntry.SETRANGE(Open,TRUE);
              CheckLedgEntry.SETRANGE(
                "Statement Status",CheckLedgEntry."Statement Status"::"Check Entry Applied");
              CheckLedgEntry.SETRANGE("Statement No.","Statement No.");
              CheckLedgEntry.SETRANGE("Statement Line No.","Statement Line No.");
              BankAccLedgEntry.LOCKTABLE;
              CheckLedgEntry.LOCKTABLE;
              IF CheckLedgEntry.FIND('-') THEN
                REPEAT
                  CheckSetStmtNo.RemoveReconNo(CheckLedgEntry,Rec,TRUE);
                UNTIL CheckLedgEntry.NEXT = 0;
              "Applied Entries" := 0;
              VALIDATE("Applied Amount",0);
              "Check No." := '';
              MODIFY;
            END;
        END;
    END;

    PROCEDURE SetManualApplication@33();
    VAR
      AppliedPaymentEntry@1000 : Record 1294;
    BEGIN
      AppliedPaymentEntry.FilterAppliedPmtEntry(Rec);
      AppliedPaymentEntry.MODIFYALL("Match Confidence","Match Confidence"::Manual)
    END;

    LOCAL PROCEDURE RemoveAppliedPaymentEntries@9();
    VAR
      AppliedPmtEntry@1000 : Record 1294;
    BEGIN
      AppliedPmtEntry.SETRANGE("Statement Type","Statement Type");
      AppliedPmtEntry.SETRANGE("Bank Account No.","Bank Account No.");
      AppliedPmtEntry.SETRANGE("Statement No.","Statement No.");
      AppliedPmtEntry.SETRANGE("Statement Line No.","Statement Line No.");
      AppliedPmtEntry.DELETEALL;
      AppliedPmtEntry.FilterAppliedPmtEntry(Rec);
      AppliedPmtEntry.DELETEALL(TRUE);

      VALIDATE("Applied Amount",0);
      VALIDATE("Applied Entries",0);
      VALIDATE("Account No.",'');
      MODIFY(TRUE);
    END;

    LOCAL PROCEDURE DeletePaymentMatchingDetails@10();
    VAR
      PaymentMatchingDetails@1000 : Record 1299;
    BEGIN
      PaymentMatchingDetails.SETRANGE("Statement Type","Statement Type");
      PaymentMatchingDetails.SETRANGE("Bank Account No.","Bank Account No.");
      PaymentMatchingDetails.SETRANGE("Statement No.","Statement No.");
      PaymentMatchingDetails.SETRANGE("Statement Line No.","Statement Line No.");
      PaymentMatchingDetails.DELETEALL(TRUE);
    END;

    PROCEDURE GetAppliedToName@14() : Text;
    VAR
      Customer@1002 : Record 18;
      Vendor@1001 : Record 23;
      GLAccount@1000 : Record 15;
      Name@1003 : Text;
    BEGIN
      Name := '';

      CASE "Account Type" OF
        "Account Type"::Customer:
          IF Customer.GET("Account No.") THEN
            Name := Customer.Name;
        "Account Type"::Vendor:
          IF Vendor.GET("Account No.") THEN
            Name := Vendor.Name;
        "Account Type"::"G/L Account":
          IF GLAccount.GET("Account No.") THEN
            Name := GLAccount.Name;
      END;

      EXIT(Name);
    END;

    PROCEDURE AppliedToDrillDown@16();
    VAR
      Customer@1002 : Record 18;
      Vendor@1001 : Record 23;
      GLAccount@1000 : Record 15;
    BEGIN
      CASE "Account Type" OF
        "Account Type"::Customer:
          BEGIN
            Customer.GET("Account No.");
            PAGE.RUN(PAGE::"Customer Card",Customer);
          END;
        "Account Type"::Vendor:
          BEGIN
            Vendor.GET("Account No.");
            PAGE.RUN(PAGE::"Vendor Card",Vendor);
          END;
        "Account Type"::"G/L Account":
          BEGIN
            GLAccount.GET("Account No.");
            PAGE.RUN(PAGE::"G/L Account Card",GLAccount);
          END;
      END;
    END;

    PROCEDURE DrillDownOnNoOfLedgerEntriesWithinAmountTolerance@21();
    BEGIN
      DrillDownOnNoOfLedgerEntriesBasedOnAmount(AmountWithinToleranceRangeTok);
    END;

    PROCEDURE DrillDownOnNoOfLedgerEntriesOutsideOfAmountTolerance@23();
    BEGIN
      DrillDownOnNoOfLedgerEntriesBasedOnAmount(AmountOustideToleranceRangeTok);
    END;

    LOCAL PROCEDURE DrillDownOnNoOfLedgerEntriesBasedOnAmount@24(AmountFilter@1005 : Text);
    VAR
      CustLedgerEntry@1003 : Record 21;
      VendorLedgerEntry@1004 : Record 25;
      MinAmount@1001 : Decimal;
      MaxAmount@1002 : Decimal;
    BEGIN
      GetAmountRangeForTolerance(MinAmount,MaxAmount);

      CASE "Account Type" OF
        "Account Type"::Customer:
          BEGIN
            GetCustomerLedgerEntriesInAmountRange(CustLedgerEntry,"Account No.",AmountFilter,MinAmount,MaxAmount);
            PAGE.RUN(PAGE::"Customer Ledger Entries",CustLedgerEntry);
          END;
        "Account Type"::Vendor:
          BEGIN
            GetVendorLedgerEntriesInAmountRange(VendorLedgerEntry,"Account No.",AmountFilter,MinAmount,MaxAmount);
            PAGE.RUN(PAGE::"Vendor Ledger Entries",VendorLedgerEntry);
          END;
      END;
    END;

    LOCAL PROCEDURE GetCustomerLedgerEntriesInAmountRange@41(VAR CustLedgerEntry@1004 : Record 21;AccountNo@1005 : Code[20];AmountFilter@1001 : Text;MinAmount@1002 : Decimal;MaxAmount@1003 : Decimal) : Integer;
    VAR
      BankAccount@1000 : Record 270;
    BEGIN
      CustLedgerEntry.SETAUTOCALCFIELDS("Remaining Amount","Remaining Amt. (LCY)");
      BankAccount.GET("Bank Account No.");
      GetApplicableCustomerLedgerEntries(CustLedgerEntry,BankAccount."Currency Code",AccountNo);

      IF BankAccount.IsInLocalCurrency THEN
        CustLedgerEntry.SETFILTER("Remaining Amt. (LCY)",AmountFilter,MinAmount,MaxAmount)
      ELSE
        CustLedgerEntry.SETFILTER("Remaining Amount",AmountFilter,MinAmount,MaxAmount);

      EXIT(CustLedgerEntry.COUNT);
    END;

    LOCAL PROCEDURE GetVendorLedgerEntriesInAmountRange@42(VAR VendorLedgerEntry@1004 : Record 25;AccountNo@1005 : Code[20];AmountFilter@1002 : Text;MinAmount@1001 : Decimal;MaxAmount@1000 : Decimal) : Integer;
    VAR
      BankAccount@1003 : Record 270;
    BEGIN
      VendorLedgerEntry.SETAUTOCALCFIELDS("Remaining Amount","Remaining Amt. (LCY)");

      BankAccount.GET("Bank Account No.");
      GetApplicableVendorLedgerEntries(VendorLedgerEntry,BankAccount."Currency Code",AccountNo);

      IF BankAccount.IsInLocalCurrency THEN
        VendorLedgerEntry.SETFILTER("Remaining Amt. (LCY)",AmountFilter,MinAmount,MaxAmount)
      ELSE
        VendorLedgerEntry.SETFILTER("Remaining Amount",AmountFilter,MinAmount,MaxAmount);

      EXIT(VendorLedgerEntry.COUNT);
    END;

    LOCAL PROCEDURE GetApplicableCustomerLedgerEntries@15(VAR CustLedgerEntry@1000 : Record 21;CurrencyCode@1001 : Code[10];AccountNo@1002 : Code[20]);
    BEGIN
      CustLedgerEntry.SETRANGE(Open,TRUE);
      CustLedgerEntry.SETRANGE("Applies-to ID",'');
      CustLedgerEntry.SETFILTER("Document Type",'<>%1&<>%2',
        CustLedgerEntry."Document Type"::Payment,
        CustLedgerEntry."Document Type"::Refund);

      IF CurrencyCode <> '' THEN
        CustLedgerEntry.SETRANGE("Currency Code",CurrencyCode);

      IF AccountNo <> '' THEN
        CustLedgerEntry.SETFILTER("Customer No.",AccountNo);
    END;

    LOCAL PROCEDURE GetApplicableVendorLedgerEntries@22(VAR VendorLedgerEntry@1000 : Record 25;CurrencyCode@1002 : Code[10];AccountNo@1001 : Code[20]);
    BEGIN
      VendorLedgerEntry.SETRANGE(Open,TRUE);
      VendorLedgerEntry.SETRANGE("Applies-to ID",'');
      VendorLedgerEntry.SETFILTER("Document Type",'<>%1&<>%2',
        VendorLedgerEntry."Document Type"::Payment,
        VendorLedgerEntry."Document Type"::Refund);

      IF CurrencyCode <> '' THEN
        VendorLedgerEntry.SETRANGE("Currency Code",CurrencyCode);

      IF AccountNo <> '' THEN
        VendorLedgerEntry.SETFILTER("Vendor No.",AccountNo);
    END;

    PROCEDURE FilterBankRecLines@20(BankAccRecon@1000 : Record 273);
    BEGIN
      RESET;
      SETRANGE("Statement Type",BankAccRecon."Statement Type");
      SETRANGE("Bank Account No.",BankAccRecon."Bank Account No.");
      SETRANGE("Statement No.",BankAccRecon."Statement No.");
    END;

    PROCEDURE LinesExist@19(BankAccRecon@1001 : Record 273) : Boolean;
    BEGIN
      FilterBankRecLines(BankAccRecon);
      EXIT(FINDSET);
    END;

    PROCEDURE GetAppliedToDocumentNo@30() : Text;
    VAR
      ApplyType@1002 : 'Document No.,Entry No.';
    BEGIN
      EXIT(GetAppliedNo(ApplyType::"Document No."));
    END;

    PROCEDURE GetAppliedToEntryNo@13() : Text;
    VAR
      ApplyType@1000 : 'Document No.,Entry No.';
    BEGIN
      EXIT(GetAppliedNo(ApplyType::"Entry No."));
    END;

    LOCAL PROCEDURE GetAppliedNo@32(ApplyType@1000 : 'Document No.,Entry No.') : Text;
    VAR
      AppliedPaymentEntry@1002 : Record 1294;
      AppliedNumbers@1001 : Text;
    BEGIN
      AppliedPaymentEntry.SETRANGE("Statement Type","Statement Type");
      AppliedPaymentEntry.SETRANGE("Bank Account No.","Bank Account No.");
      AppliedPaymentEntry.SETRANGE("Statement No.","Statement No.");
      AppliedPaymentEntry.SETRANGE("Statement Line No.","Statement Line No.");

      AppliedNumbers := '';
      IF AppliedPaymentEntry.FINDSET THEN BEGIN
        REPEAT
          IF ApplyType = ApplyType::"Document No." THEN BEGIN
            IF AppliedPaymentEntry."Document No." <> '' THEN
              IF AppliedNumbers = '' THEN
                AppliedNumbers := AppliedPaymentEntry."Document No."
              ELSE
                AppliedNumbers := AppliedNumbers + ', ' + AppliedPaymentEntry."Document No.";
          END ELSE BEGIN
            IF AppliedPaymentEntry."Applies-to Entry No." <> 0 THEN
              IF AppliedNumbers = '' THEN
                AppliedNumbers := FORMAT(AppliedPaymentEntry."Applies-to Entry No.")
              ELSE
                AppliedNumbers := AppliedNumbers + ', ' + FORMAT(AppliedPaymentEntry."Applies-to Entry No.");
          END;
        UNTIL AppliedPaymentEntry.NEXT = 0;
      END;

      EXIT(AppliedNumbers);
    END;

    PROCEDURE TransferRemainingAmountToAccount@31();
    VAR
      AppliedPaymentEntry@1000 : Record 1294;
    BEGIN
      TESTFIELD("Account No.");

      AppliedPaymentEntry.TransferFromBankAccReconLine(Rec);
      AppliedPaymentEntry."Account Type" := "Account Type";
      AppliedPaymentEntry."Account No." := "Account No.";
      AppliedPaymentEntry.VALIDATE("Applied Amount",Difference);
      AppliedPaymentEntry.VALIDATE("Match Confidence",AppliedPaymentEntry."Match Confidence"::Manual);
      AppliedPaymentEntry.INSERT(TRUE);
    END;

    PROCEDURE GetAmountRangeForTolerance@8(VAR MinAmount@1001 : Decimal;VAR MaxAmount@1002 : Decimal);
    VAR
      BankAccount@1000 : Record 270;
      TempAmount@1003 : Decimal;
    BEGIN
      BankAccount.GET("Bank Account No.");
      CASE BankAccount."Match Tolerance Type" OF
        BankAccount."Match Tolerance Type"::Amount:
          BEGIN
            MinAmount := "Statement Amount" - BankAccount."Match Tolerance Value";
            MaxAmount := "Statement Amount" + BankAccount."Match Tolerance Value";

            IF ("Statement Amount" >= 0) AND (MinAmount < 0) THEN
              MinAmount := 0
            ELSE
              IF ("Statement Amount" < 0) AND (MaxAmount > 0) THEN
                MaxAmount := 0;
          END;
        BankAccount."Match Tolerance Type"::Percentage:
          BEGIN
            MinAmount := "Statement Amount" / (1 + BankAccount."Match Tolerance Value" / 100);
            MaxAmount := "Statement Amount" / (1 - BankAccount."Match Tolerance Value" / 100);

            IF "Statement Amount" < 0 THEN BEGIN
              TempAmount := MinAmount;
              MinAmount := MaxAmount;
              MaxAmount := TempAmount;
            END;
          END;
      END;

      MinAmount := ROUND(MinAmount);
      MaxAmount := ROUND(MaxAmount);
    END;

    BEGIN
    END.
  }
}

