OBJECT Table 5062 Attachment
{
  OBJECT-PROPERTIES
  {
    Date=09/15/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    OnInsert=VAR
               Attachment2@1000 : Record 5062;
               "NextAttachmentNo."@1001 : Integer;
             BEGIN
               "Last Date Modified" := TODAY;
               "Last Time Modified" := TIME;

               Attachment2.LOCKTABLE;
               IF Attachment2.FINDLAST THEN
                 "NextAttachmentNo." := Attachment2."No." + 1
               ELSE
                 "NextAttachmentNo." := 1;

               "No." := "NextAttachmentNo.";

               RMSetup.GET;
               "Storage Type" := RMSetup."Attachment Storage Type";
               IF "Storage Type" = "Storage Type"::"Disk File" THEN BEGIN
                 RMSetup.TESTFIELD("Attachment Storage Location");
                 "Storage Pointer" := RMSetup."Attachment Storage Location";
               END;
             END;

    OnModify=BEGIN
               "Last Date Modified" := TODAY;
               "Last Time Modified" := TIME;
             END;

    CaptionML=[ENU=Attachment;
               ESM=Anexo;
               FRC=PiŠce jointe;
               ENC=Attachment];
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Integer       ;CaptionML=[ENU=No.;
                                                              ESM=N§;
                                                              FRC=Nø;
                                                              ENC=No.];
                                                   NotBlank=Yes }
    { 2   ;   ;Attachment          ;BLOB          ;CaptionML=[ENU=Attachment;
                                                              ESM=Anexo;
                                                              FRC=PiŠce jointe;
                                                              ENC=Attachment] }
    { 3   ;   ;Storage Type        ;Option        ;CaptionML=[ENU=Storage Type;
                                                              ESM=Tipo almacenamiento;
                                                              FRC=Type stockage;
                                                              ENC=Storage Type];
                                                   OptionCaptionML=[ENU=Embedded,Disk File,Exchange Storage;
                                                                    ESM=Incorporado,Archivo disco,Almacenamiento Exchange;
                                                                    FRC=Base de donn‚es,Dossier disque,Stockage ‚change;
                                                                    ENC=Embedded,Disk File,Exchange Storage];
                                                   OptionString=Embedded,Disk File,Exchange Storage }
    { 4   ;   ;Storage Pointer     ;Text250       ;CaptionML=[ENU=Storage Pointer;
                                                              ESM=Ruta archivo;
                                                              FRC=Pointeur de stockage;
                                                              ENC=Storage Pointer] }
    { 5   ;   ;File Extension      ;Text250       ;CaptionML=[ENU=File Extension;
                                                              ESM=Extensi¢n archivo;
                                                              FRC=Extension de fichier;
                                                              ENC=File Extension] }
    { 6   ;   ;Read Only           ;Boolean       ;CaptionML=[ENU=Read Only;
                                                              ESM=S¢lo lectura;
                                                              FRC=Lecture seule;
                                                              ENC=Read Only] }
    { 7   ;   ;Last Date Modified  ;Date          ;CaptionML=[ENU=Last Date Modified;
                                                              ESM=Fecha £lt. modificaci¢n;
                                                              FRC=Date derniŠre modification;
                                                              ENC=Last Date Modified] }
    { 8   ;   ;Last Time Modified  ;Time          ;CaptionML=[ENU=Last Time Modified;
                                                              ESM=élt. hora modificaci¢n;
                                                              FRC=Heure dern. modification;
                                                              ENC=Last Time Modified] }
    { 13  ;   ;Merge Source        ;BLOB          ;CaptionML=[ENU=Merge Source;
                                                              ESM=Origen fusi¢n;
                                                              FRC=Fusionner source;
                                                              ENC=Merge Source] }
    { 14  ;   ;Email Message ID    ;BLOB          ;CaptionML=[ENU=Email Message ID;
                                                              ESM=Id. mensaje correo elect.;
                                                              FRC=Code courriel;
                                                              ENC=Email Message ID] }
    { 15  ;   ;Email Entry ID      ;BLOB          ;CaptionML=[ENU=Email Entry ID;
                                                              ESM=Id. mov. correo elect.;
                                                              FRC=Code ‚criture courriel;
                                                              ENC=Email Entry ID] }
    { 16  ;   ;Email Message Checksum;Integer     ;CaptionML=[ENU=Email Message Checksum;
                                                              ESM=Suma comprob. mensaje correo elect.;
                                                              FRC=Somme de contr“le courriel;
                                                              ENC=Email Message Checksum] }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Email Message Checksum                   }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text002@1002 : TextConst 'ENU=The attachment is empty.;ESM=El anexo est  vac¡o.;FRC=Il n''y a pas de piŠce jointe.;ENC=The attachment is empty.';
      Text003@1003 : TextConst 'ENU=Attachment is already in use on this machine.;ESM=El anexo ya est  utiliz ndose en esta m quina.;FRC=La piŠce jointe est d‚j… utilis‚e par cette machine.;ENC=Attachment is already in use on this machine.';
      Text004@1004 : TextConst 'ENU=When you have saved your document, click Yes to import the document.;ESM=Cuando haya guardado su documento, pulse S¡ para importarlo.;FRC=AprŠs avoir sauvegard‚ votre document, cliquez sur Oui pour importer le document.;ENC=When you have saved your document, click Yes to import the document.';
      Text005@1005 : TextConst 'ENU=Export Attachment;ESM=Exportar anexo;FRC=Exporter piŠce jointe;ENC=Export Attachment';
      Text006@1006 : TextConst 'ENU=Import Attachment;ESM=Importar anexo;FRC=Importer piŠce jointe;ENC=Import Attachment';
      Text007@1007 : TextConst 'ENU=All Files (*.*)|*.*;ESM=Todos los archivos (*.*)|*.*;FRC=Tous les fichiers (*.*)|*.*;ENC=All Files (*.*)|*.*';
      Text008@1008 : TextConst 'ENU=Error during copying file: %1.;ESM=Error al copiar el archivo: %1.;FRC=Une erreur est survenue pendant la copie du fichierÿ: %1.;ENC=Error during copying file: %1.';
      Text009@1009 : TextConst 'ENU=Do you want to remove %1?;ESM=¨Confirma que desea eliminar %1?;FRC=Souhaitez-vous supprimer cet enregistrement %1 ?;ENC=Do you want to remove %1?';
      Text010@1010 : TextConst 'ENU=External file could not be removed.;ESM=Un archivo externo no se puede eliminar.;FRC=Impossible de supprimer le fichier externe.;ENC=External file could not be removed.';
      Text013@1013 : TextConst 'ENU=You can only print Microsoft Word documents.;ESM=S¢lo puede imprimir documentos de Microsoft Word.;FRC=Seuls les documents Microsoft Word peuvent ˆtre imprim‚s.;ENC=You can only print Microsoft Word documents.';
      Text014@1014 : TextConst 'ENU=You can only fax Microsoft Word documents.;ESM=S¢lo puede enviar por fax documentos de Microsoft Word.;FRC=Seuls les documents Microsoft Word peuvent ˆtre t‚l‚copi‚s.;ENC=You can only fax Microsoft Word documents.';
      Text015@1001 : TextConst 'ENU=The e-mail can not be displayed or has been deleted.;ESM=No se puede mostrar el mensaje de correo electr¢nico o se ha eliminado.;FRC=Le courriel ne peut pas ˆtre affich‚ ou il a ‚t‚ effac‚.;ENC=The e-mail can not be displayed or has been deleted.';
      Text016@1011 : TextConst 'ENU=When you have finished working with a document, you should delete the associated temporary file. Please note that this will not delete the document.\\Do you want to delete the temporary file?;ESM=Cuando haya terminado de trabajar con un documento, debe borrar el archivo temporal asociado. Por favor, tenga en cuenta que esto no eliminar  el documento.\\¨Desea borrar el archivo temporal?;FRC=Lorsque vous avez fini de travailler avec un document, vous devriez supprimer le fichier temporaire associ‚. Veuillez noter que cela ne supprimera pas le document.\\Voulez-vous supprimer le fichier temporaire?;ENC=When you have finished working with a document, you should delete the associated temporary file. Please note that this will not delete the document.\\Do you want to delete the temporary file?';
      Text020@1022 : TextConst 'ENU=An Outlook dialog box is open. Close it and try again.;ESM=Hay un cuadro de di logo de Outlook abierto. Ci‚rrelo e int‚ntelo de nuevo.;FRC=Une boŒte de dialogue Outlook est ouverte. Fermez-la et r‚essayez.;ENC=An Outlook dialogue box is open. Close it and try again.';

      CouldNotActivateOutlookErr@1023 : TextConst
        'ENU=Cannot connect to Microsoft Outlook. If Microsoft Outlook is already running, make sure that you are not running either Microsoft Dynamics NAV or Microsoft Outlook as administrator. Close all instances of Microsoft Outlook and try again.',
        'ESM=No se puede establecer la conexi¢n a Microsoft Outlook. Si Microsoft Outlook ya se est  ejecutando, compruebe que no est  ejecutando Microsoft Dynamics NAV o Microsoft Outlook como administrador. Cierre todas las instancias de Microsoft Outlook y vuelva a intentarlo.',
        'FRC=Impossible de se connecter … Microsoft Outlook. Si Microsoft Outlook est d‚j… en cours d''ex‚cution, assurez-vous que vous n''ex‚cutez pas Microsoft Dynamics NAV ou Microsoft Outlook en tant qu''administrateur. Fermez toutes les instances de Microsoft Outlook et r‚essayez.',
        'ENC=Cannot connect to Microsoft Outlook. If Microsoft Outlook is already running, make sure that you are not running either Microsoft Dynamics NAV or Microsoft Outlook as administrator. Close all instances of Microsoft Outlook and try again.';
      UnspecifiedOutlookErr@1024 : TextConst 'ENU=" Microsoft Outlook cannot display the message. Make sure that Microsoft Outlook is configured with access to the message that you are trying to open.";ESM=" Microsoft Outlook no puede mostrar el mensaje. Compruebe que Microsoft Outlook est  configurado con acceso al mensaje que est  intentando abrir.";FRC=" Microsoft Outlook ne peut pas afficher le message. Assurez-vous que Microsoft Outlook est configur‚ de sorte … acc‚der au message que vous tentez d''ouvrir.";ENC=" Microsoft Outlook cannot display the message. Make sure that Microsoft Outlook is configured with access to the message that you are trying to open."';
      TempBlob@1020 : Record 99008535;
      RMSetup@1015 : Record 5079;
      FileMgt@1000 : Codeunit 419;
      AttachmentMgt@1021 : Codeunit 5052;

    PROCEDURE OpenAttachment@1(Caption@1000 : Text[260];IsTemporary@1001 : Boolean;LanguageCode@1100 : Code[10]);
    VAR
      WordManagement@1002 : Codeunit 5054;
      FileName@1004 : Text;
    BEGIN
      IF "Storage Type" = "Storage Type"::Embedded THEN BEGIN
        CALCFIELDS(Attachment);
        IF NOT Attachment.HASVALUE THEN
          ERROR(Text002);
      END;

      FileName := ConstFilename;
      IF NOT DeleteFile(FileName) THEN
        ERROR(Text003);
      ExportAttachmentToClientFile(FileName);
      IF WordManagement.IsWordDocumentExtension("File Extension") THEN
        WordManagement.OpenWordAttachment(Rec,FileName,Caption,IsTemporary,LanguageCode)
      ELSE BEGIN
        HYPERLINK(FileName);
        IF NOT "Read Only" THEN BEGIN
          IF CONFIRM(Text004,TRUE) THEN
            ImportAttachmentFromClientFile(FileName,IsTemporary,FALSE);
          DeleteFile(FileName);
        END ELSE
          IF CONFIRM(Text016,TRUE) THEN
            DeleteFile(FileName);
      END;
    END;

    PROCEDURE ShowAttachment@6(VAR SegLine@1000 : Record 5077;WordCaption@1001 : Text[260];IsTemporary@1002 : Boolean);
    VAR
      WordManagement@1003 : Codeunit 5054;
      FileName@1005 : Text;
    BEGIN
      IF "Storage Type" = "Storage Type"::Embedded THEN
        CALCFIELDS(Attachment);

      IF WordManagement.IsWordDocumentExtension("File Extension") THEN
        WordManagement.ShowMergedDocument(SegLine,Rec,WordCaption,IsTemporary)
      ELSE BEGIN
        FileName := ConstFilename;
        ExportAttachmentToClientFile(FileName);
        HYPERLINK(FileName);
        IF NOT "Read Only" THEN BEGIN
          IF CONFIRM(Text004,TRUE) THEN
            ImportAttachmentFromClientFile(FileName,IsTemporary,FALSE);
          DeleteFile(FileName);
        END ELSE
          IF CONFIRM(Text016,TRUE) THEN
            DeleteFile(FileName);
      END;
    END;

    PROCEDURE ExportAttachmentToClientFile@2(VAR ExportToFile@1000 : Text) : Boolean;
    VAR
      FileFilter@1003 : Text;
      ServerFileName@1001 : Text;
      Path@1002 : Text;
      Success@1004 : Boolean;
    BEGIN
      RMSetup.GET;
      IF RMSetup."Attachment Storage Type" = RMSetup."Attachment Storage Type"::"Disk File" THEN
        RMSetup.TESTFIELD("Attachment Storage Location");

      ServerFileName := FileMgt.ServerTempFileName("File Extension");
      ExportAttachmentToServerFile(ServerFileName);

      Path := FileMgt.Magicpath;
      IF ExportToFile = '' THEN BEGIN
        ExportToFile := FileMgt.GetFileName(FileMgt.ClientTempFileName("File Extension"));
        Path := '';
      END;

      FileFilter := UPPERCASE("File Extension") + ' (*.' + "File Extension" + ')|*.' + "File Extension";
      Success := DOWNLOAD(ServerFileName,Text005,Path,FileFilter,ExportToFile);
      FileMgt.DeleteServerFile(ServerFileName);
      EXIT(Success);
    END;

    PROCEDURE ImportAttachmentFromClientFile@5(ImportFromFile@1000 : Text;IsTemporary@1001 : Boolean;IsInherited@1002 : Boolean) : Boolean;
    VAR
      FileName@1005 : Text;
      ServerFileName@1010 : Text;
      NewAttachmentNo@1003 : Integer;
    BEGIN
      IF IsTemporary THEN
        EXIT(ImportTemporaryAttachmentFromClientFile(ImportFromFile));

      TESTFIELD("Read Only",FALSE);
      RMSetup.GET;
      IF RMSetup."Attachment Storage Type" = RMSetup."Attachment Storage Type"::"Disk File" THEN
        RMSetup.TESTFIELD("Attachment Storage Location");

      IF IsInherited THEN BEGIN
        NewAttachmentNo := AttachmentMgt.InsertAttachment("No.");
        GET(NewAttachmentNo);
      END ELSE
        IF "No." = 0 THEN
          NewAttachmentNo := AttachmentMgt.InsertAttachment(0)
        ELSE
          NewAttachmentNo := "No.";
      GET(NewAttachmentNo);

      // passing to UPLOAD function when only server path is specified, not ALSO the file name,
      // then function updates the server file path with the actual client name
      ServerFileName := TEMPORARYPATH;
      FileName := ImportFromFile;
      IF NOT UPLOAD(Text006,'',Text007,FileName,ServerFileName) THEN
        ERROR(Text008,GETLASTERRORTEXT);

      EXIT(ImportAttachmentFromServerFile(ServerFileName,FALSE,TRUE));
    END;

    LOCAL PROCEDURE ImportTemporaryAttachmentFromClientFile@21(ImportFromFile@1000 : Text) : Boolean;
    VAR
      FileName@1001 : Text;
    BEGIN
      FileName := FileMgt.BLOBImport(TempBlob,ImportFromFile);

      IF FileName <> '' THEN BEGIN
        Attachment := TempBlob.Blob;
        "Storage Type" := "Storage Type"::Embedded;
        "Storage Pointer" := '';
        "File Extension" := COPYSTR(UPPERCASE(FileMgt.GetExtension(FileName)),1,250);
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE ExportAttachmentToServerFile@20(VAR ExportToFile@1000 : Text) : Boolean;
    BEGIN
      // This function assumes that CALCFIELDS on the attachment field has been called before
      RMSetup.GET;
      IF RMSetup."Attachment Storage Type" = RMSetup."Attachment Storage Type"::"Disk File" THEN
        RMSetup.TESTFIELD("Attachment Storage Location");

      CASE "Storage Type" OF
        "Storage Type"::Embedded:
          BEGIN
            IF Attachment.HASVALUE THEN BEGIN
              TempBlob.Blob := Attachment;
              IF ExportToFile = '' THEN
                ExportToFile := FileMgt.ServerTempFileName("File Extension");
              FileMgt.BLOBExportToServerFile(TempBlob,ExportToFile); // export BLOB to file on server (UNC location also)
              EXIT(TRUE);
            END;
            EXIT(FALSE);
          END;
        "Storage Type"::"Disk File":
          BEGIN
            IF ExportToFile = '' THEN
              ExportToFile := TEMPORARYPATH + FileMgt.GetFileName(ConstDiskFileName);
            FileMgt.CopyServerFile(ConstDiskFileName,ExportToFile,FALSE); // Copy from server location to another location (UNC location also)
            EXIT(TRUE);
          END;
      END;

      EXIT(FALSE);
    END;

    PROCEDURE ImportAttachmentFromServerFile@19(ImportFromFile@1000 : Text;IsTemporary@1002 : Boolean;Overwrite@1001 : Boolean) : Boolean;
    BEGIN
      IF IsTemporary THEN BEGIN
        ImportTemporaryAttachmentFromServerFile(ImportFromFile);
        EXIT(TRUE);
      END;

      IF NOT Overwrite THEN
        TESTFIELD("Read Only",FALSE);

      RMSetup.GET;
      IF RMSetup."Attachment Storage Type" = RMSetup."Attachment Storage Type"::"Disk File" THEN
        RMSetup.TESTFIELD("Attachment Storage Location");

      CASE RMSetup."Attachment Storage Type" OF
        RMSetup."Attachment Storage Type"::Embedded:
          BEGIN
            CLEAR(TempBlob);
            FileMgt.BLOBImportFromServerFile(TempBlob,ImportFromFile); // Copy from file on server (UNC location also)

            Attachment := TempBlob.Blob;
            "Storage Type" := "Storage Type"::Embedded;
            "Storage Pointer" := '';
            "File Extension" := COPYSTR(FileMgt.GetExtension(ImportFromFile),1,250);
            MODIFY(TRUE);
            EXIT(TRUE);
          END;
        "Storage Type"::"Disk File":
          BEGIN
            "Storage Type" := "Storage Type"::"Disk File";
            "Storage Pointer" := RMSetup."Attachment Storage Location";
            "File Extension" := COPYSTR(FileMgt.GetExtension(ImportFromFile),1,250);
            FileMgt.CopyServerFile(ImportFromFile,ConstDiskFileName,Overwrite); // Copy from UNC location to another UNC location
            MODIFY(TRUE);
            EXIT(TRUE);
          END;
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE ImportTemporaryAttachmentFromServerFile@22(ImportFromFile@1000 : Text);
    BEGIN
      FileMgt.BLOBImportFromServerFile(TempBlob,ImportFromFile);
      Attachment := TempBlob.Blob;
      "Storage Type" := "Storage Type"::Embedded;
      "Storage Pointer" := '';
      "File Extension" := COPYSTR(UPPERCASE(FileMgt.GetExtension(ImportFromFile)),1,250);
    END;

    PROCEDURE RemoveAttachment@7(Prompt@1001 : Boolean) DeleteOK@1000 : Boolean;
    VAR
      DeleteYesNo@1002 : Boolean;
    BEGIN
      DeleteOK := FALSE;
      DeleteYesNo := TRUE;
      IF Prompt THEN
        IF NOT CONFIRM(
             Text009,FALSE,TABLECAPTION)
        THEN
          DeleteYesNo := FALSE;

      IF DeleteYesNo THEN BEGIN
        IF "Storage Type" = "Storage Type"::"Disk File" THEN
          IF NOT FileMgt.DeleteServerFile(ConstDiskFileName) THEN
            MESSAGE(Text010);
        DELETE(TRUE);
        DeleteOK := TRUE;
      END;
    END;

    PROCEDURE WizEmbeddAttachment@4(FromAttachment@1000 : Record 5062);
    BEGIN
      Rec := FromAttachment;
      "No." := 0;
      "Storage Type" := "Storage Type"::Embedded;
      FromAttachment.TESTFIELD("No.");
      CASE FromAttachment."Storage Type" OF
        FromAttachment."Storage Type"::"Disk File":
          ImportAttachmentFromServerFile(FromAttachment.ConstDiskFileName,TRUE,FALSE);
        FromAttachment."Storage Type"::Embedded:
          BEGIN
            FromAttachment.CALCFIELDS(Attachment);
            IF FromAttachment.Attachment.HASVALUE THEN
              Attachment := FromAttachment.Attachment;
          END;
      END;
    END;

    PROCEDURE WizSaveAttachment@8();
    VAR
      Attachment2@1000 : Record 5062;
    BEGIN
      WITH RMSetup DO BEGIN
        GET;
        IF "Attachment Storage Type" = "Attachment Storage Type"::Embedded THEN BEGIN
          "Storage Pointer" := '';
          EXIT;
        END;
      END;

      "Storage Pointer" := RMSetup."Attachment Storage Location";

      WITH Attachment2 DO BEGIN
        "No." := Rec."No.";
        "Storage Type" := "Storage Type"::"Disk File";
        "Storage Pointer" := RMSetup."Attachment Storage Location";
        "File Extension" := Rec."File Extension";
        "Read Only" := Rec."Read Only";
        "Last Date Modified" := Rec."Last Date Modified";
        "Last Time Modified" := Rec."Last Time Modified";
      END;
      CLEAR(Rec);
      Rec := Attachment2;
    END;

    LOCAL PROCEDURE DeleteFile@10(FileName@1001 : Text) : Boolean;
    VAR
      I@1002 : Integer;
    BEGIN
      IF FileName = '' THEN
        EXIT(FALSE);

      IF NOT FileMgt.ClientFileExists(FileName) THEN
        EXIT(TRUE);

      REPEAT
        SLEEP(250);
        I := I + 1;
      UNTIL FileMgt.DeleteClientFile(FileName) OR (I = 25);
      EXIT(NOT FileMgt.ClientFileExists(FileName));
    END;

    PROCEDURE ConstFilename@9() FileName@1000 : Text;
    BEGIN
      FileName := FileMgt.ClientTempFileName("File Extension");
    END;

    PROCEDURE ConstDiskFileName@3() DiskFileName@1000 : Text;
    BEGIN
      DiskFileName := "Storage Pointer" + '\' + FORMAT("No.") + '.' + "File Extension";
    END;

    PROCEDURE CheckCorrespondenceType@11(CorrespondenceType@1001 : ' ,Hard Copy,E-Mail,Fax') ErrorText@1000 : Text[80];
    BEGIN
      CASE CorrespondenceType OF
        CorrespondenceType::"Hard Copy":
          IF (UPPERCASE("File Extension") <> 'DOC') AND (UPPERCASE("File Extension") <> 'DOCX') THEN
            EXIT(Text013);
        CorrespondenceType::Fax:
          IF (UPPERCASE("File Extension") <> 'DOC') AND (UPPERCASE("File Extension") <> 'DOCX') THEN
            EXIT(Text014);
      END;
    END;

    PROCEDURE LinkToMessage@12(MessageID@1006 : Text;EntryID@1000 : Text;RunTrigger@1001 : Boolean);
    BEGIN
      "Storage Type" := "Storage Type"::"Exchange Storage";
      "Read Only" := TRUE;

      SetMessageID(MessageID);
      SetEntryID(EntryID);

      MODIFY(RunTrigger);
    END;

    PROCEDURE DisplayInOutlook@13();
    VAR
      OutlookHelper@1000 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Outlook.OutlookHelper" RUNONCLIENT;
      Status@1002 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Outlook.OutlookStatusCode" RUNONCLIENT;
    BEGIN
      Status := OutlookHelper.DisplayMailFromPublicFolder(GetEntryID);

      IF Status.Equals(Status.CouldNotActivateOutlook) THEN
        ERROR(CouldNotActivateOutlookErr);

      IF Status.Equals(Status.ModalDialogOpened) THEN
        ERROR(Text020);

      IF Status.Equals(Status.ItemNotFound) THEN
        ERROR(Text015);

      // If the Exchange Entry Id requires patching to be used in Outlook
      // then we update the entry id.
      IF Status.Equals(Status.OkAfterExchange2013Patch) THEN BEGIN
        SetMessageID(OutlookHelper.PatchExchange2013WebServicesPublicFolderItemEntryId(GetEntryID));
        MODIFY(TRUE);
      END ELSE
        IF NOT Status.Equals(Status.Ok) THEN
          ERROR(UnspecifiedOutlookErr);
    END;

    PROCEDURE Checksum@14(MessageID@1000 : Text) ChecksumValue : Integer;
    VAR
      CharNo@1002 : Integer;
      DecValue@1003 : Decimal;
      MaxInteger@1004 : Integer;
    BEGIN
      RANDOMIZE(1);
      MaxInteger := 2147483647;

      FOR CharNo := 1 TO STRLEN(MessageID) DO
        DecValue := (DecValue + (((MessageID[CharNo] MOD 43) + 1) * RANDOM((MaxInteger DIV 44)))) MOD MaxInteger;
      ChecksumValue := DecValue;
    END;

    PROCEDURE GetMessageID@15() Return : Text;
    VAR
      Stream@1000 : InStream;
    BEGIN
      CALCFIELDS("Email Message ID");
      "Email Message ID".CREATEINSTREAM(Stream);
      Stream.READTEXT(Return);
    END;

    PROCEDURE SetMessageID@16(MessageID@1000 : Text);
    VAR
      Stream@1001 : OutStream;
    BEGIN
      "Email Message ID".CREATEOUTSTREAM(Stream);
      Stream.WRITETEXT(MessageID);
      "Email Message Checksum" := Checksum(MessageID);
    END;

    LOCAL PROCEDURE GetEntryID@17() Return : Text;
    VAR
      Stream@1000 : InStream;
    BEGIN
      CALCFIELDS("Email Entry ID");
      "Email Entry ID".CREATEINSTREAM(Stream);
      Stream.READTEXT(Return);
    END;

    PROCEDURE SetEntryID@18(EntryID@1000 : Text);
    VAR
      Stream@1001 : OutStream;
    BEGIN
      "Email Entry ID".CREATEOUTSTREAM(Stream);
      Stream.WRITETEXT(EntryID);
    END;

    BEGIN
    END.
  }
}

