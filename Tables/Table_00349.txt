OBJECT Table 349 Dimension Value
{
  OBJECT-PROPERTIES
  {
    Date=01/29/16;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.44974;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               TESTFIELD("Dimension Code");
               TESTFIELD(Code);
               "Global Dimension No." := GetGlobalDimensionNo;

               IF CostAccSetup.GET THEN BEGIN
                 CostAccMgt.UpdateCostCenterFromDim(Rec,Rec,0);
                 CostAccMgt.UpdateCostObjectFromDim(Rec,Rec,0);
               END;
             END;

    OnModify=BEGIN
               IF "Dimension Code" <> xRec."Dimension Code" THEN
                 "Global Dimension No." := GetGlobalDimensionNo;
               IF CostAccSetup.GET THEN BEGIN
                 CostAccMgt.UpdateCostCenterFromDim(Rec,xRec,1);
                 CostAccMgt.UpdateCostObjectFromDim(Rec,xRec,1);
               END;
             END;

    OnDelete=BEGIN
               IF CheckIfDimValueUsed THEN
                 ERROR(Text000,GetCheckDimErr);

               DimValueComb.SETRANGE("Dimension 1 Code","Dimension Code");
               DimValueComb.SETRANGE("Dimension 1 Value Code",Code);
               DimValueComb.DELETEALL(TRUE);

               DimValueComb.RESET;
               DimValueComb.SETRANGE("Dimension 2 Code","Dimension Code");
               DimValueComb.SETRANGE("Dimension 2 Value Code",Code);
               DimValueComb.DELETEALL(TRUE);

               DefaultDim.SETRANGE("Dimension Code","Dimension Code");
               DefaultDim.SETRANGE("Dimension Value Code",Code);
               DefaultDim.DELETEALL(TRUE);

               SelectedDim.SETRANGE("Dimension Code","Dimension Code");
               SelectedDim.SETRANGE("New Dimension Value Code",Code);
               SelectedDim.DELETEALL(TRUE);

               AnalysisSelectedDim.SETRANGE("Dimension Code","Dimension Code");
               AnalysisSelectedDim.SETRANGE("New Dimension Value Code",Code);
               AnalysisSelectedDim.DELETEALL(TRUE);
             END;

    OnRename=BEGIN
               RenameBudgEntryDim;
               RenameAnalysisViewEntryDim;
               RenameItemBudgEntryDim;
               RenameItemAnalysisViewEntryDim;

               IF CostAccSetup.GET THEN BEGIN
                 CostAccMgt.UpdateCostCenterFromDim(Rec,xRec,3);
                 CostAccMgt.UpdateCostObjectFromDim(Rec,xRec,3);
               END;
             END;

    CaptionML=[ENU=Dimension Value;
               ESM=Valor dimensi¢n;
               FRC=Valeur de dimension;
               ENC=Dimension Value];
    LookupPageID=Page560;
  }
  FIELDS
  {
    { 1   ;   ;Dimension Code      ;Code20        ;TableRelation=Dimension;
                                                   CaptionML=[ENU=Dimension Code;
                                                              ESM=C¢d. dimensi¢n;
                                                              FRC=Code de dimension;
                                                              ENC=Dimension Code];
                                                   NotBlank=Yes }
    { 2   ;   ;Code                ;Code20        ;OnValidate=BEGIN
                                                                IF UPPERCASE(Code) = Text002 THEN
                                                                  ERROR(Text003,
                                                                    FIELDCAPTION(Code));
                                                              END;

                                                   CaptionML=[ENU=Code;
                                                              ESM=C¢digo;
                                                              FRC=Code;
                                                              ENC=Code];
                                                   NotBlank=Yes }
    { 3   ;   ;Name                ;Text50        ;CaptionML=[ENU=Name;
                                                              ESM=Nombre;
                                                              FRC=Nom;
                                                              ENC=Name] }
    { 4   ;   ;Dimension Value Type;Option        ;OnValidate=BEGIN
                                                                IF ("Dimension Value Type" <> "Dimension Value Type"::Standard) AND
                                                                   (xRec."Dimension Value Type" = xRec."Dimension Value Type"::Standard)
                                                                THEN
                                                                  IF CheckIfDimValueUsed THEN
                                                                    ERROR(Text004,GetCheckDimErr);
                                                                Totaling := '';
                                                              END;

                                                   CaptionML=[ENU=Dimension Value Type;
                                                              ESM=Tipo valor dimensi¢n;
                                                              FRC=Type section;
                                                              ENC=Dimension Value Type];
                                                   OptionCaptionML=[ENU=Standard,Heading,Total,Begin-Total,End-Total;
                                                                    ESM=Est ndar,Principal,Total,Principio-Total,Fin-Total;
                                                                    FRC=Standard,En-tˆte,Total,D‚but-Total,Fin-Total;
                                                                    ENC=Standard,Heading,Total,Begin-Total,End-Total];
                                                   OptionString=Standard,Heading,Total,Begin-Total,End-Total }
    { 5   ;   ;Totaling            ;Text250       ;TableRelation=IF (Dimension Value Type=CONST(Total)) "Dimension Value"."Dimension Code" WHERE (Dimension Code=FIELD(Dimension Code));
                                                   OnValidate=BEGIN
                                                                IF NOT ("Dimension Value Type" IN
                                                                        ["Dimension Value Type"::Total,"Dimension Value Type"::"End-Total"]) AND (Totaling <> '')
                                                                THEN
                                                                  FIELDERROR("Dimension Value Type");
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Totaling;
                                                              ESM=Sumatorio;
                                                              FRC=Totalisation;
                                                              ENC=Totalling] }
    { 6   ;   ;Blocked             ;Boolean       ;CaptionML=[ENU=Blocked;
                                                              ESM=Bloqueado;
                                                              FRC=Bloqu‚;
                                                              ENC=Blocked] }
    { 7   ;   ;Consolidation Code  ;Code20        ;AccessByPermission=TableData 220=R;
                                                   CaptionML=[ENU=Consolidation Code;
                                                              ESM=C¢d. consolidaci¢n;
                                                              FRC=Code consolidation;
                                                              ENC=Consolidation Code] }
    { 8   ;   ;Indentation         ;Integer       ;CaptionML=[ENU=Indentation;
                                                              ESM=Indentar;
                                                              FRC=Indentation;
                                                              ENC=Indentation] }
    { 9   ;   ;Global Dimension No.;Integer       ;CaptionML=[ENU=Global Dimension No.;
                                                              ESM=N§ dimensi¢n global;
                                                              FRC=Nø dimension principale;
                                                              ENC=Global Dimension No.] }
    { 10  ;   ;Map-to IC Dimension Code;Code20    ;CaptionML=[ENU=Map-to IC Dimension Code;
                                                              ESM=C¢digo dimensi¢n IC de asig.;
                                                              FRC=Code dimension correspond. IC;
                                                              ENC=Map-to IC Dimension Code] }
    { 11  ;   ;Map-to IC Dimension Value Code;Code20;
                                                   TableRelation="IC Dimension Value".Code WHERE (Dimension Code=FIELD(Map-to IC Dimension Code));
                                                   CaptionML=[ENU=Map-to IC Dimension Value Code;
                                                              ESM=C¢digo valor dimens. IC asig.;
                                                              FRC=Code valeur dimension correspond. IC;
                                                              ENC=Map-to IC Dimension Value Code] }
    { 12  ;   ;Dimension Value ID  ;Integer       ;OnValidate=BEGIN
                                                                ERROR(Text006,FIELDCAPTION("Dimension Value ID"));
                                                              END;

                                                   AutoIncrement=Yes;
                                                   CaptionML=[ENU=Dimension Value ID;
                                                              ESM=Id. valor de dimensi¢n;
                                                              FRC=Code valeur de dimension;
                                                              ENC=Dimension Value ID];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Dimension Code,Code                     ;Clustered=Yes }
    {    ;Code,Global Dimension No.                }
    {    ;Name                                     }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;Code,Name                                }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=%1\You cannot delete it.;ESM=%1\No puede borrarla.;FRC=%1\Vous ne pouvez pas le supprimer.;ENC=%1\You cannot delete it.';
      Text002@1002 : TextConst 'ENU=(CONFLICT);ESM=(CONFLICTO);FRC=(CONFLIT);ENC=(CONFLICT)';
      Text003@1003 : TextConst 'ENU=%1 can not be (CONFLICT). This name is used internally by the system.;ESM=%1 no puede ser (CONFLICTO). Este nombre se usa interna. por el sist.;FRC=%1 ne peut pas ˆtre (CONFLICT). Ce nom est utilis‚ en interne par le systŠme.;ENC=%1 can not be (CONFLICT). This name is used internally by the system.';
      Text004@1004 : TextConst 'ENU=%1\You cannot change the type.;ESM=%1\No puede cambiar el tipo.;FRC=%1\Vous ne pouvez pas modifier le type.;ENC=%1\You cannot change the type.';
      Text005@1005 : TextConst 'ENU=This dimension value has been used in posted or budget entries.;ESM=Esta dim. valor se ha usado en movs. registrados o presupuestad.;FRC=Cette valeur de dimension est utilis‚e dans les ‚critures report‚es ou les ‚critures budget.;ENC=This dimension value has been used in posted or budget entries.';
      DimSetEntry@1001 : Record 480;
      DimValueComb@1014 : Record 351;
      DefaultDim@1015 : Record 352;
      SelectedDim@1016 : Record 369;
      AnalysisSelectedDim@1021 : Record 7159;
      CostAccSetup@1008 : Record 1108;
      CostAccMgt@1007 : Codeunit 1100;
      Text006@1006 : TextConst 'ENU=You cannot change the value of %1.;ESM=No puede cambiar el valor de %1.;FRC=Vous ne pouvez pas modifier la valeur de %1.;ENC=You cannot change the value of %1.';

    PROCEDURE CheckIfDimValueUsed@1() : Boolean;
    BEGIN
      DimSetEntry.SETCURRENTKEY("Dimension Value ID");
      DimSetEntry.SETRANGE("Dimension Value ID","Dimension Value ID");
      EXIT(NOT DimSetEntry.ISEMPTY);
    END;

    LOCAL PROCEDURE GetCheckDimErr@2() : Text[250];
    BEGIN
      EXIT(Text005);
    END;

    LOCAL PROCEDURE RenameBudgEntryDim@3();
    VAR
      GLBudget@1002 : Record 95;
      GLBudgetEntry@1003 : Record 96;
      GLBudgetEntry2@1001 : Record 96;
      BudgDimNo@1000 : Integer;
    BEGIN
      GLBudget.LOCKTABLE;
      IF GLBudget.FIND('-') THEN
        REPEAT
        UNTIL GLBudget.NEXT = 0;
      FOR BudgDimNo := 1 TO 4 DO BEGIN
        CASE TRUE OF
          BudgDimNo = 1:
            GLBudget.SETRANGE("Budget Dimension 1 Code","Dimension Code");
          BudgDimNo = 2:
            GLBudget.SETRANGE("Budget Dimension 2 Code","Dimension Code");
          BudgDimNo = 3:
            GLBudget.SETRANGE("Budget Dimension 3 Code","Dimension Code");
          BudgDimNo = 4:
            GLBudget.SETRANGE("Budget Dimension 4 Code","Dimension Code");
        END;
        IF GLBudget.FIND('-') THEN BEGIN
          GLBudgetEntry.SETCURRENTKEY("Budget Name","G/L Account No.","Business Unit Code","Global Dimension 1 Code");
          REPEAT
            GLBudgetEntry.SETRANGE("Budget Name",GLBudget.Name);
            CASE TRUE OF
              BudgDimNo = 1:
                GLBudgetEntry.SETRANGE("Budget Dimension 1 Code",xRec.Code);
              BudgDimNo = 2:
                GLBudgetEntry.SETRANGE("Budget Dimension 2 Code",xRec.Code);
              BudgDimNo = 3:
                GLBudgetEntry.SETRANGE("Budget Dimension 3 Code",xRec.Code);
              BudgDimNo = 4:
                GLBudgetEntry.SETRANGE("Budget Dimension 4 Code",xRec.Code);
            END;
            IF GLBudgetEntry.FIND('-') THEN
              REPEAT
                GLBudgetEntry2 := GLBudgetEntry;
                CASE TRUE OF
                  BudgDimNo = 1:
                    GLBudgetEntry2."Budget Dimension 1 Code" := Code;
                  BudgDimNo = 2:
                    GLBudgetEntry2."Budget Dimension 2 Code" := Code;
                  BudgDimNo = 3:
                    GLBudgetEntry2."Budget Dimension 3 Code" := Code;
                  BudgDimNo = 4:
                    GLBudgetEntry2."Budget Dimension 4 Code" := Code;
                END;
                GLBudgetEntry2.MODIFY;
              UNTIL GLBudgetEntry.NEXT = 0;
            GLBudgetEntry.RESET;
          UNTIL GLBudget.NEXT = 0;
        END;
        GLBudget.RESET;
      END;
    END;

    LOCAL PROCEDURE RenameAnalysisViewEntryDim@5();
    VAR
      AnalysisView@1001 : Record 363;
      AnalysisViewEntry@1002 : Record 365;
      AnalysisViewEntry2@1003 : Record 365;
      AnalysisViewBudgEntry@1004 : Record 366;
      AnalysisViewBudgEntry2@1005 : Record 366;
      DimensionNo@1000 : Integer;
    BEGIN
      AnalysisView.LOCKTABLE;
      IF AnalysisView.FIND('-') THEN
        REPEAT
        UNTIL AnalysisView.NEXT = 0;

      FOR DimensionNo := 1 TO 4 DO BEGIN
        CASE TRUE OF
          DimensionNo = 1:
            AnalysisView.SETRANGE("Dimension 1 Code","Dimension Code");
          DimensionNo = 2:
            AnalysisView.SETRANGE("Dimension 2 Code","Dimension Code");
          DimensionNo = 3:
            AnalysisView.SETRANGE("Dimension 3 Code","Dimension Code");
          DimensionNo = 4:
            AnalysisView.SETRANGE("Dimension 4 Code","Dimension Code");
        END;
        IF AnalysisView.FIND('-') THEN
          REPEAT
            AnalysisViewEntry.SETRANGE("Analysis View Code",AnalysisView.Code);
            AnalysisViewBudgEntry.SETRANGE("Analysis View Code",AnalysisView.Code);
            CASE TRUE OF
              DimensionNo = 1:
                BEGIN
                  AnalysisViewEntry.SETRANGE("Dimension 1 Value Code",xRec.Code);
                  AnalysisViewBudgEntry.SETRANGE("Dimension 1 Value Code",xRec.Code);
                END;
              DimensionNo = 2:
                BEGIN
                  AnalysisViewEntry.SETRANGE("Dimension 2 Value Code",xRec.Code);
                  AnalysisViewBudgEntry.SETRANGE("Dimension 2 Value Code",xRec.Code);
                END;
              DimensionNo = 3:
                BEGIN
                  AnalysisViewEntry.SETRANGE("Dimension 3 Value Code",xRec.Code);
                  AnalysisViewBudgEntry.SETRANGE("Dimension 3 Value Code",xRec.Code);
                END;
              DimensionNo = 4:
                BEGIN
                  AnalysisViewEntry.SETRANGE("Dimension 4 Value Code",xRec.Code);
                  AnalysisViewBudgEntry.SETRANGE("Dimension 4 Value Code",xRec.Code);
                END;
            END;
            IF AnalysisViewEntry.FIND('-') THEN
              REPEAT
                AnalysisViewEntry2 := AnalysisViewEntry;
                CASE TRUE OF
                  DimensionNo = 1:
                    AnalysisViewEntry2."Dimension 1 Value Code" := Code;
                  DimensionNo = 2:
                    AnalysisViewEntry2."Dimension 2 Value Code" := Code;
                  DimensionNo = 3:
                    AnalysisViewEntry2."Dimension 3 Value Code" := Code;
                  DimensionNo = 4:
                    AnalysisViewEntry2."Dimension 4 Value Code" := Code;
                END;
                AnalysisViewEntry.DELETE;
                AnalysisViewEntry2.INSERT;
              UNTIL AnalysisViewEntry.NEXT = 0;
            AnalysisViewEntry.RESET;
            IF AnalysisViewBudgEntry.FIND('-') THEN
              REPEAT
                AnalysisViewBudgEntry2 := AnalysisViewBudgEntry;
                CASE TRUE OF
                  DimensionNo = 1:
                    AnalysisViewBudgEntry2."Dimension 1 Value Code" := Code;
                  DimensionNo = 2:
                    AnalysisViewBudgEntry2."Dimension 2 Value Code" := Code;
                  DimensionNo = 3:
                    AnalysisViewBudgEntry2."Dimension 3 Value Code" := Code;
                  DimensionNo = 4:
                    AnalysisViewBudgEntry2."Dimension 4 Value Code" := Code;
                END;
                AnalysisViewBudgEntry.DELETE;
                AnalysisViewBudgEntry2.INSERT;
              UNTIL AnalysisViewBudgEntry.NEXT = 0;
            AnalysisViewBudgEntry.RESET;
          UNTIL AnalysisView.NEXT = 0;
        AnalysisView.RESET;
      END;
    END;

    LOCAL PROCEDURE RenameItemBudgEntryDim@6();
    VAR
      ItemBudget@1003 : Record 7132;
      ItemBudgetEntry@1002 : Record 7134;
      ItemBudgetEntry2@1001 : Record 7134;
      BudgDimNo@1000 : Integer;
    BEGIN
      ItemBudget.LOCKTABLE;
      IF ItemBudget.FIND('-') THEN
        REPEAT
        UNTIL ItemBudget.NEXT = 0;

      FOR BudgDimNo := 1 TO 3 DO BEGIN
        CASE TRUE OF
          BudgDimNo = 1:
            ItemBudget.SETRANGE("Budget Dimension 1 Code","Dimension Code");
          BudgDimNo = 2:
            ItemBudget.SETRANGE("Budget Dimension 2 Code","Dimension Code");
          BudgDimNo = 3:
            ItemBudget.SETRANGE("Budget Dimension 3 Code","Dimension Code");
        END;
        IF ItemBudget.FIND('-') THEN BEGIN
          ItemBudgetEntry.SETCURRENTKEY(
            "Analysis Area","Budget Name","Item No.","Source Type","Source No.",Date,"Location Code","Global Dimension 1 Code");
          REPEAT
            ItemBudgetEntry.SETRANGE("Analysis Area",ItemBudget."Analysis Area");
            ItemBudgetEntry.SETRANGE("Budget Name",ItemBudget.Name);
            CASE TRUE OF
              BudgDimNo = 1:
                ItemBudgetEntry.SETRANGE("Budget Dimension 1 Code",xRec.Code);
              BudgDimNo = 2:
                ItemBudgetEntry.SETRANGE("Budget Dimension 2 Code",xRec.Code);
              BudgDimNo = 3:
                ItemBudgetEntry.SETRANGE("Budget Dimension 3 Code",xRec.Code);
            END;
            IF ItemBudgetEntry.FIND('-') THEN
              REPEAT
                ItemBudgetEntry2 := ItemBudgetEntry;
                CASE TRUE OF
                  BudgDimNo = 1:
                    ItemBudgetEntry2."Budget Dimension 1 Code" := Code;
                  BudgDimNo = 2:
                    ItemBudgetEntry2."Budget Dimension 2 Code" := Code;
                  BudgDimNo = 3:
                    ItemBudgetEntry2."Budget Dimension 3 Code" := Code;
                END;
                ItemBudgetEntry2.MODIFY;
              UNTIL ItemBudgetEntry.NEXT = 0;
            ItemBudgetEntry.RESET;
          UNTIL ItemBudget.NEXT = 0;
        END;
        ItemBudget.RESET;
      END;
    END;

    LOCAL PROCEDURE RenameItemAnalysisViewEntryDim@7();
    VAR
      ItemAnalysisView@1005 : Record 7152;
      ItemAnalysisViewEntry@1004 : Record 7154;
      ItemAnalysisViewEntry2@1003 : Record 7154;
      ItemAnalysisViewBudgEntry@1002 : Record 7156;
      ItemAnalysisViewBudgEntry2@1001 : Record 7156;
      DimensionNo@1000 : Integer;
    BEGIN
      ItemAnalysisView.LOCKTABLE;
      IF ItemAnalysisView.FIND('-') THEN
        REPEAT
        UNTIL ItemAnalysisView.NEXT = 0;

      FOR DimensionNo := 1 TO 3 DO BEGIN
        CASE TRUE OF
          DimensionNo = 1:
            ItemAnalysisView.SETRANGE("Dimension 1 Code","Dimension Code");
          DimensionNo = 2:
            ItemAnalysisView.SETRANGE("Dimension 2 Code","Dimension Code");
          DimensionNo = 3:
            ItemAnalysisView.SETRANGE("Dimension 3 Code","Dimension Code");
        END;
        IF ItemAnalysisView.FIND('-') THEN
          REPEAT
            ItemAnalysisViewEntry.SETRANGE("Analysis Area",ItemAnalysisView."Analysis Area");
            ItemAnalysisViewEntry.SETRANGE("Analysis View Code",ItemAnalysisView.Code);
            ItemAnalysisViewBudgEntry.SETRANGE("Analysis Area",ItemAnalysisView."Analysis Area");
            ItemAnalysisViewBudgEntry.SETRANGE("Analysis View Code",ItemAnalysisView.Code);
            CASE TRUE OF
              DimensionNo = 1:
                BEGIN
                  ItemAnalysisViewEntry.SETRANGE("Dimension 1 Value Code",xRec.Code);
                  ItemAnalysisViewBudgEntry.SETRANGE("Dimension 1 Value Code",xRec.Code);
                END;
              DimensionNo = 2:
                BEGIN
                  ItemAnalysisViewEntry.SETRANGE("Dimension 2 Value Code",xRec.Code);
                  ItemAnalysisViewBudgEntry.SETRANGE("Dimension 2 Value Code",xRec.Code);
                END;
              DimensionNo = 3:
                BEGIN
                  ItemAnalysisViewEntry.SETRANGE("Dimension 3 Value Code",xRec.Code);
                  ItemAnalysisViewBudgEntry.SETRANGE("Dimension 3 Value Code",xRec.Code);
                END;
            END;
            IF ItemAnalysisViewEntry.FIND('-') THEN
              REPEAT
                ItemAnalysisViewEntry2 := ItemAnalysisViewEntry;
                CASE TRUE OF
                  DimensionNo = 1:
                    ItemAnalysisViewEntry2."Dimension 1 Value Code" := Code;
                  DimensionNo = 2:
                    ItemAnalysisViewEntry2."Dimension 2 Value Code" := Code;
                  DimensionNo = 3:
                    ItemAnalysisViewEntry2."Dimension 3 Value Code" := Code;
                END;
                ItemAnalysisViewEntry.DELETE;
                ItemAnalysisViewEntry2.INSERT;
              UNTIL ItemAnalysisViewEntry.NEXT = 0;
            ItemAnalysisViewEntry.RESET;
            IF ItemAnalysisViewBudgEntry.FIND('-') THEN
              REPEAT
                ItemAnalysisViewBudgEntry2 := ItemAnalysisViewBudgEntry;
                CASE TRUE OF
                  DimensionNo = 1:
                    ItemAnalysisViewBudgEntry2."Dimension 1 Value Code" := Code;
                  DimensionNo = 2:
                    ItemAnalysisViewBudgEntry2."Dimension 2 Value Code" := Code;
                  DimensionNo = 3:
                    ItemAnalysisViewBudgEntry2."Dimension 3 Value Code" := Code;
                END;
                ItemAnalysisViewBudgEntry.DELETE;
                ItemAnalysisViewBudgEntry2.INSERT;
              UNTIL ItemAnalysisViewBudgEntry.NEXT = 0;
            ItemAnalysisViewBudgEntry.RESET;
          UNTIL ItemAnalysisView.NEXT = 0;
        ItemAnalysisView.RESET;
      END;
    END;

    PROCEDURE LookUpDimFilter@57(Dim@1000 : Code[20];VAR Text@1001 : Text[1024]) : Boolean;
    VAR
      DimVal@1002 : Record 349;
      DimValList@1003 : Page 560;
    BEGIN
      IF Dim = '' THEN
        EXIT(FALSE);
      DimValList.LOOKUPMODE(TRUE);
      DimVal.SETRANGE("Dimension Code",Dim);
      DimValList.SETTABLEVIEW(DimVal);
      IF DimValList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        Text := DimValList.GetSelectionFilter;
        EXIT(TRUE);
      END;
      EXIT(FALSE)
    END;

    PROCEDURE LookupDimValue@24(DimCode@1000 : Code[20];VAR DimValueCode@1001 : Code[20]);
    VAR
      DimValue@1003 : Record 349;
      DimValuesList@1002 : Page 537;
    BEGIN
      DimValue.SETRANGE("Dimension Code",DimCode);
      DimValuesList.LOOKUPMODE := TRUE;
      DimValuesList.SETTABLEVIEW(DimValue);
      IF DimValue.GET(DimCode,DimValueCode) THEN
        DimValuesList.SETRECORD(DimValue);
      IF DimValuesList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        DimValuesList.GETRECORD(DimValue);
        DimValueCode := DimValue.Code;
      END;
    END;

    LOCAL PROCEDURE GetGlobalDimensionNo@8() : Integer;
    VAR
      GeneralLedgerSetup@1000 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      CASE "Dimension Code" OF
        GeneralLedgerSetup."Global Dimension 1 Code":
          EXIT(1);
        GeneralLedgerSetup."Global Dimension 2 Code":
          EXIT(2);
        GeneralLedgerSetup."Shortcut Dimension 3 Code":
          EXIT(3);
        GeneralLedgerSetup."Shortcut Dimension 4 Code":
          EXIT(4);
        GeneralLedgerSetup."Shortcut Dimension 5 Code":
          EXIT(5);
        GeneralLedgerSetup."Shortcut Dimension 6 Code":
          EXIT(6);
        GeneralLedgerSetup."Shortcut Dimension 7 Code":
          EXIT(7);
        GeneralLedgerSetup."Shortcut Dimension 8 Code":
          EXIT(8);
        ELSE
          EXIT(0);
      END;
    END;

    BEGIN
    END.
  }
}

