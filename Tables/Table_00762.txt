OBJECT Table 762 Account Schedules Chart Setup
{
  OBJECT-PROPERTIES
  {
    Date=09/15/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    OnDelete=BEGIN
               DeleteLines;
             END;

    CaptionML=[ENU=Account Schedules Chart Setup;
               ESM=Config. gr fico programaciones de ctas.;
               FRC=Configuration de graphique des tableaux d'analyse;
               ENC=Account Schedules Chart Setup];
    LookupPageID=Page767;
  }
  FIELDS
  {
    { 1   ;   ;User ID             ;Text132       ;CaptionML=[ENU=User ID;
                                                              ESM=Id. usuario;
                                                              FRC=Code utilisateur;
                                                              ENC=User ID];
                                                   Editable=No }
    { 2   ;   ;Name                ;Text30        ;CaptionML=[ENU=Name;
                                                              ESM=Nombre;
                                                              FRC=Nom;
                                                              ENC=Name] }
    { 3   ;   ;Description         ;Text250       ;CaptionML=[ENU=Description;
                                                              ESM=Descripci¢n;
                                                              FRC=Description;
                                                              ENC=Description] }
    { 10  ;   ;Account Schedule Name;Code10       ;TableRelation="Acc. Schedule Name".Name;
                                                   OnValidate=VAR
                                                                AccScheduleName@1001 : Record 84;
                                                                AccSchedChartManagement@1000 : Codeunit 762;
                                                              BEGIN
                                                                AccSchedChartManagement.CheckDuplicateAccScheduleLineDescription("Account Schedule Name");
                                                                IF AccScheduleName.GET("Account Schedule Name") THEN
                                                                  IF AccScheduleName."Default Column Layout" <> '' THEN
                                                                    VALIDATE("Column Layout Name",AccScheduleName."Default Column Layout");
                                                                RefreshLines(FALSE);
                                                              END;

                                                   CaptionML=[ENU=Account Schedule Name;
                                                              ESM=Nombre Estructura de Cuentas;
                                                              FRC=Nom tableau d'analyse;
                                                              ENC=Account Schedule Name] }
    { 20  ;   ;Column Layout Name  ;Code10        ;TableRelation="Column Layout Name".Name;
                                                   OnValidate=VAR
                                                                AccSchedChartManagement@1000 : Codeunit 762;
                                                              BEGIN
                                                                AccSchedChartManagement.CheckDuplicateColumnLayoutColumnHeader("Column Layout Name");
                                                                RefreshLines(FALSE);
                                                              END;

                                                   CaptionML=[ENU=Column Layout Name;
                                                              ESM=Nombre plantilla columna;
                                                              FRC=Nom de disposition en colonnes;
                                                              ENC=Column Layout Name] }
    { 30  ;   ;Base X-Axis on      ;Option        ;OnValidate=BEGIN
                                                                RefreshLines(FALSE);
                                                                IF "End Date" = 0D THEN
                                                                  "End Date" := "Start Date";
                                                              END;

                                                   CaptionML=[ENU=Base X-Axis on;
                                                              ESM=Basar eje X en;
                                                              FRC=Base axe X sur;
                                                              ENC=Base X-Axis on];
                                                   OptionCaptionML=[ENU=Period,Acc. Sched. Line,Acc. Sched. Column;
                                                                    ESM=Periodo,L¡n. estr. cta.,Col. estr. cta.;
                                                                    FRC=P‚riode,Ligne tableau d'analyse,Colonne tableau d'analyse;
                                                                    ENC=Period,Acc. Sched. Line,Acc. Sched. Column];
                                                   OptionString=Period,Acc. Sched. Line,Acc. Sched. Column }
    { 31  ;   ;Start Date          ;Date          ;OnValidate=BEGIN
                                                                TESTFIELD("Start Date");
                                                              END;

                                                   CaptionML=[ENU=Start Date;
                                                              ESM=Fecha inicial;
                                                              FRC=Date de d‚but;
                                                              ENC=Start Date] }
    { 32  ;   ;End Date            ;Date          ;OnValidate=BEGIN
                                                                TESTFIELD("End Date");
                                                              END;

                                                   CaptionML=[ENU=End Date;
                                                              ESM=Fecha final;
                                                              FRC=Date de fin;
                                                              ENC=End Date] }
    { 41  ;   ;Period Length       ;Option        ;CaptionML=[ENU=Period Length;
                                                              ESM=Longitud periodo;
                                                              FRC=Dur‚e de la p‚riode;
                                                              ENC=Period Length];
                                                   OptionCaptionML=[ENU=Day,Week,Month,Quarter,Year;
                                                                    ESM=D¡a,Semana,Mes,Trimestre,A¤o;
                                                                    FRC=Jour,Semaine,Mois,Trimestre,Ann‚e;
                                                                    ENC=Day,Week,Month,Quarter,Year];
                                                   OptionString=Day,Week,Month,Quarter,Year }
    { 42  ;   ;No. of Periods      ;Integer       ;InitValue=12;
                                                   OnValidate=BEGIN
                                                                IF "No. of Periods" < 1 THEN
                                                                  ERROR(Text002,FIELDCAPTION("No. of Periods"),"No. of Periods");
                                                              END;

                                                   CaptionML=[ENU=No. of Periods;
                                                              ESM=N§ de periodos;
                                                              FRC=Nombre de p‚riodes;
                                                              ENC=No. of Periods] }
    { 50  ;   ;Last Viewed         ;Boolean       ;OnValidate=VAR
                                                                AccountSchedulesChartSetup@1000 : Record 762;
                                                              BEGIN
                                                                IF (NOT "Last Viewed") OR ("Last Viewed" = xRec."Last Viewed") THEN
                                                                  EXIT;

                                                                AccountSchedulesChartSetup.SETRANGE("User ID","User ID");
                                                                AccountSchedulesChartSetup.SETFILTER(Name,'<>%1',Name);
                                                                AccountSchedulesChartSetup.SETRANGE("Last Viewed",TRUE);
                                                                AccountSchedulesChartSetup.MODIFYALL("Last Viewed",FALSE);
                                                              END;

                                                   CaptionML=[ENU=Last Viewed;
                                                              ESM=éltima visualizaci¢n;
                                                              FRC=Affichage pr‚c‚dent;
                                                              ENC=Last Viewed];
                                                   Editable=No }
    { 51  ;   ;Look Ahead          ;Boolean       ;CaptionML=[ENU=Look Ahead;
                                                              ESM=Anticipar la b£squeda;
                                                              FRC=Rechercher par anticipation;
                                                              ENC=Look Ahead] }
  }
  KEYS
  {
    {    ;User ID,Name                            ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1001 : TextConst '@@@="%1=Account Schdule Line_Description %2=Column Layout_Coulmn Header";ENU=%1 %2;ESM=%1 %2;FRC=%1 %2;ENC=%1 %2';
      Text002@1000 : TextConst 'ENU=You cannot set %1 to %2.;ESM=No se puede establecer %1 en %2.;FRC=Vous ne pouvez pas configurer %1 sur %2.;ENC=You cannot set %1 to %2.';

    PROCEDURE SetAccScheduleName@10(AccSchedName@1000 : Code[10]);
    BEGIN
      VALIDATE("Account Schedule Name",AccSchedName);
      MODIFY(TRUE);
    END;

    PROCEDURE SetColumnLayoutName@11(ColumnLayoutName@1000 : Code[10]);
    BEGIN
      VALIDATE("Column Layout Name",ColumnLayoutName);
      MODIFY(TRUE);
    END;

    PROCEDURE SetShowPer@12(ShowPer@1000 : Option);
    BEGIN
      VALIDATE("Base X-Axis on",ShowPer);
      MODIFY(TRUE);
    END;

    PROCEDURE SetPeriodLength@7(PeriodLength@1000 : Option);
    BEGIN
      "Period Length" := PeriodLength;
      MODIFY(TRUE);
    END;

    PROCEDURE SetLastViewed@17();
    BEGIN
      VALIDATE("Last Viewed",TRUE);
      MODIFY(TRUE);
    END;

    PROCEDURE SetLinkToLines@5(VAR AccSchedChartSetupLine@1000 : Record 763);
    BEGIN
      AccSchedChartSetupLine.SETRANGE("User ID","User ID");
      AccSchedChartSetupLine.SETRANGE(Name,Name);
    END;

    PROCEDURE SetLinkToMeasureLines@3(VAR AccSchedChartSetupLine@1000 : Record 763);
    BEGIN
      SetLinkToLines(AccSchedChartSetupLine);
      CASE "Base X-Axis on" OF
        "Base X-Axis on"::Period:
          ;
        "Base X-Axis on"::"Acc. Sched. Line":
          AccSchedChartSetupLine.SETRANGE("Account Schedule Line No.",0);
        "Base X-Axis on"::"Acc. Sched. Column":
          AccSchedChartSetupLine.SETRANGE("Column Layout Line No.",0);
      END;
    END;

    PROCEDURE SetLinkToDimensionLines@14(VAR AccSchedChartSetupLine@1000 : Record 763);
    BEGIN
      SetLinkToLines(AccSchedChartSetupLine);
      CASE "Base X-Axis on" OF
        "Base X-Axis on"::Period:
          BEGIN
            AccSchedChartSetupLine.SETRANGE("Account Schedule Line No.",0);
            AccSchedChartSetupLine.SETRANGE("Column Layout Line No.",0);
          END;
        "Base X-Axis on"::"Acc. Sched. Line":
          AccSchedChartSetupLine.SETRANGE("Column Layout Line No.",0);
        "Base X-Axis on"::"Acc. Sched. Column":
          AccSchedChartSetupLine.SETRANGE("Account Schedule Line No.",0);
      END;
    END;

    PROCEDURE RefreshLines@1(Force@1002 : Boolean);
    VAR
      AccSchedChartSetupLine@1000 : Record 763;
      TempAccSchedChartSetupLine@1001 : TEMPORARY Record 763;
    BEGIN
      IF NOT Force THEN
        IF ("Account Schedule Name" = xRec."Account Schedule Name") AND
           ("Column Layout Name" = xRec."Column Layout Name") AND
           ("Base X-Axis on" = xRec."Base X-Axis on")
        THEN
          EXIT;

      GetMeasuresInTemp(TempAccSchedChartSetupLine);

      SetLinkToLines(AccSchedChartSetupLine);
      AccSchedChartSetupLine.DELETEALL;

      AccSchedChartSetupLine.RESET;
      IF TempAccSchedChartSetupLine.FINDSET THEN
        REPEAT
          AccSchedChartSetupLine := TempAccSchedChartSetupLine;
          AccSchedChartSetupLine.INSERT;
        UNTIL TempAccSchedChartSetupLine.NEXT = 0;
    END;

    PROCEDURE FilterAccSchedLines@6(VAR AccScheduleLine@1000 : Record 85);
    BEGIN
      AccScheduleLine.SETRANGE("Schedule Name","Account Schedule Name");
      AccScheduleLine.SETFILTER(Description,'<>%1','');
    END;

    PROCEDURE FilterColumnLayout@8(VAR ColumnLayout@1000 : Record 334);
    BEGIN
      ColumnLayout.SETRANGE("Column Layout Name","Column Layout Name");
      ColumnLayout.SETFILTER("Column Header",'<>%1','');
    END;

    LOCAL PROCEDURE GetMeasuresInTemp@4(VAR TempAccSchedChartSetupLine@1002 : TEMPORARY Record 763);
    VAR
      AccScheduleLine@1000 : Record 85;
      ColumnLayout@1001 : Record 334;
    BEGIN
      FilterAccSchedLines(AccScheduleLine);
      FilterColumnLayout(ColumnLayout);

      CASE "Base X-Axis on" OF
        "Base X-Axis on"::Period:
          BEGIN
            IF ColumnLayout.FINDSET THEN
              REPEAT
                IF AccScheduleLine.FINDSET THEN
                  REPEAT
                    InsertLineIntoTemp(TempAccSchedChartSetupLine,AccScheduleLine,ColumnLayout);
                  UNTIL AccScheduleLine.NEXT = 0;
              UNTIL ColumnLayout.NEXT = 0;
          END;
        "Base X-Axis on"::"Acc. Sched. Line",
        "Base X-Axis on"::"Acc. Sched. Column":
          BEGIN
            IF AccScheduleLine.FINDSET THEN
              REPEAT
                InsertLineIntoTemp(TempAccSchedChartSetupLine,AccScheduleLine,ColumnLayout);
              UNTIL AccScheduleLine.NEXT = 0;
            CLEAR(AccScheduleLine);
            IF ColumnLayout.FINDSET THEN
              REPEAT
                InsertLineIntoTemp(TempAccSchedChartSetupLine,AccScheduleLine,ColumnLayout);
              UNTIL ColumnLayout.NEXT = 0;
          END;
      END;

      SetChartTypesToDefault(TempAccSchedChartSetupLine);
    END;

    LOCAL PROCEDURE InsertLineIntoTemp@9(VAR TempAccSchedChartSetupLine@1000 : TEMPORARY Record 763;AccScheduleLine@1002 : Record 85;ColumnLayout@1001 : Record 334);
    VAR
      AccSchedChartSetupLine@1003 : Record 763;
    BEGIN
      TempAccSchedChartSetupLine.INIT;
      TempAccSchedChartSetupLine."User ID" := "User ID";
      TempAccSchedChartSetupLine.Name := Name;
      TempAccSchedChartSetupLine."Account Schedule Name" := "Account Schedule Name";
      TempAccSchedChartSetupLine."Account Schedule Line No." := AccScheduleLine."Line No.";
      TempAccSchedChartSetupLine."Column Layout Name" := "Column Layout Name";
      TempAccSchedChartSetupLine."Column Layout Line No." := ColumnLayout."Line No.";

      CASE "Base X-Axis on" OF
        "Base X-Axis on"::Period:
          BEGIN
            TempAccSchedChartSetupLine."Original Measure Name" :=
              STRSUBSTNO(Text001,AccScheduleLine.Description,ColumnLayout."Column Header");
            TempAccSchedChartSetupLine."Measure Value" := STRSUBSTNO(Text001,AccScheduleLine."Line No.",ColumnLayout."Line No.");
          END;
        "Base X-Axis on"::"Acc. Sched. Line",
        "Base X-Axis on"::"Acc. Sched. Column":
          CASE TRUE OF
            AccScheduleLine."Line No." = 0:
              BEGIN
                TempAccSchedChartSetupLine."Original Measure Name" := ColumnLayout."Column Header";
                TempAccSchedChartSetupLine."Measure Value" := FORMAT(ColumnLayout."Line No.");
              END;
            ColumnLayout."Line No." = 0:
              BEGIN
                TempAccSchedChartSetupLine."Original Measure Name" := AccScheduleLine.Description;
                TempAccSchedChartSetupLine."Measure Value" := FORMAT(AccScheduleLine."Line No.");
              END;
          END;
      END;
      TempAccSchedChartSetupLine."Measure Name" := TempAccSchedChartSetupLine."Original Measure Name";

      IF AccSchedChartSetupLine.GET(TempAccSchedChartSetupLine."User ID",
           TempAccSchedChartSetupLine.Name,
           TempAccSchedChartSetupLine."Account Schedule Line No.",
           TempAccSchedChartSetupLine."Column Layout Line No.")
      THEN
        TempAccSchedChartSetupLine."Chart Type" := AccSchedChartSetupLine."Chart Type";

      TempAccSchedChartSetupLine.INSERT;
    END;

    LOCAL PROCEDURE SetChartTypesToDefault@13(VAR TempAccSchedChartSetupLine@1000 : TEMPORARY Record 763);
    VAR
      TempAccSchedChartSetupLine2@1004 : TEMPORARY Record 763;
    BEGIN
      TempAccSchedChartSetupLine2.COPY(TempAccSchedChartSetupLine,TRUE);

      SetMeasureChartTypesToDefault(TempAccSchedChartSetupLine2);

      TempAccSchedChartSetupLine2.RESET;
      SetLinkToDimensionLines(TempAccSchedChartSetupLine2);
      TempAccSchedChartSetupLine2.SETFILTER("Chart Type",'<>%1',TempAccSchedChartSetupLine2."Chart Type"::" ");
      IF TempAccSchedChartSetupLine2.ISEMPTY THEN
        SetDimensionChartTypesToDefault(TempAccSchedChartSetupLine2);
    END;

    PROCEDURE SetMeasureChartTypesToDefault@15(VAR AccSchedChartSetupLine@1000 : Record 763);
    VAR
      BusinessChartBuffer@1003 : Record 485;
      MaxNumMeasures@1002 : Integer;
      NumOfMeasuresToBeSet@1001 : Integer;
    BEGIN
      AccSchedChartSetupLine.RESET;
      SetLinkToMeasureLines(AccSchedChartSetupLine);
      AccSchedChartSetupLine.SETFILTER("Chart Type",'<>%1',AccSchedChartSetupLine."Chart Type"::" ");
      MaxNumMeasures := BusinessChartBuffer.GetMaxNumberOfMeasures;
      NumOfMeasuresToBeSet := MaxNumMeasures - AccSchedChartSetupLine.COUNT;
      IF NumOfMeasuresToBeSet > 0 THEN BEGIN
        AccSchedChartSetupLine.SETRANGE("Chart Type",AccSchedChartSetupLine."Chart Type"::" ");
        IF AccSchedChartSetupLine.FINDSET THEN
          REPEAT
            AccSchedChartSetupLine."Chart Type" := AccSchedChartSetupLine.GetDefaultChartType;
            AccSchedChartSetupLine.MODIFY;
            NumOfMeasuresToBeSet -= 1;
          UNTIL (NumOfMeasuresToBeSet = 0) OR (AccSchedChartSetupLine.NEXT = 0);
      END;
    END;

    PROCEDURE SetDimensionChartTypesToDefault@16(VAR AccSchedChartSetupLine@1000 : Record 763);
    BEGIN
      AccSchedChartSetupLine.RESET;
      SetLinkToDimensionLines(AccSchedChartSetupLine);
      AccSchedChartSetupLine.SETRANGE("Chart Type",AccSchedChartSetupLine."Chart Type"::" ");
      AccSchedChartSetupLine.MODIFYALL("Chart Type",AccSchedChartSetupLine.GetDefaultChartType);
    END;

    LOCAL PROCEDURE DeleteLines@2();
    VAR
      AccSchedChartSetupLine@1000 : Record 763;
    BEGIN
      AccSchedChartSetupLine.SETRANGE("User ID","User ID");
      AccSchedChartSetupLine.SETRANGE(Name,Name);
      AccSchedChartSetupLine.DELETEALL;
    END;

    BEGIN
    END.
  }
}

