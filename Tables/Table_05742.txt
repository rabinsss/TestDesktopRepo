OBJECT Table 5742 Transfer Route
{
  OBJECT-PROPERTIES
  {
    Date=09/15/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    DataCaptionFields=Transfer-from Code,Transfer-to Code;
    CaptionML=[ENU=Transfer Route;
               ESM=Ruta transfer.;
               FRC=Acheminement transfert;
               ENC=Transfer Route];
  }
  FIELDS
  {
    { 1   ;   ;Transfer-from Code  ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   CaptionML=[ENU=Transfer-from Code;
                                                              ESM=Transfer. desde-c¢d.;
                                                              FRC=Code prov. transfert;
                                                              ENC=Transfer-from Code] }
    { 2   ;   ;Transfer-to Code    ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   CaptionML=[ENU=Transfer-to Code;
                                                              ESM=Transfer. a-c¢d.;
                                                              FRC=Code dest. transfert;
                                                              ENC=Transfer-to Code] }
    { 4   ;   ;In-Transit Code     ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(Yes));
                                                   CaptionML=[ENU=In-Transit Code;
                                                              ESM=C¢d. en tr nsito;
                                                              FRC=Code transit;
                                                              ENC=In-Transit Code] }
    { 5   ;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent";
                                                   OnValidate=BEGIN
                                                                IF "Shipping Agent Code" <> xRec."Shipping Agent Code" THEN
                                                                  VALIDATE("Shipping Agent Service Code",'');
                                                              END;

                                                   AccessByPermission=TableData 5790=R;
                                                   CaptionML=[ENU=Shipping Agent Code;
                                                              ESM=C¢d. transportista;
                                                              FRC=Code agent de livraison;
                                                              ENC=Shipping Agent Code] }
    { 6   ;   ;Shipping Agent Service Code;Code10 ;TableRelation="Shipping Agent Services".Code WHERE (Shipping Agent Code=FIELD(Shipping Agent Code));
                                                   CaptionML=[ENU=Shipping Agent Service Code;
                                                              ESM=C¢d. servicio transportista;
                                                              FRC=Code prestation agent de livraison;
                                                              ENC=Shipping Agent Service Code] }
  }
  KEYS
  {
    {    ;Transfer-from Code,Transfer-to Code     ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text002@1001 : TextConst 'ENU=The receipt date must be greater or equal to the shipment date with respect to warehouse handling time.;ESM=La fecha recepci¢n debe ser igual o posterior a la fecha env¡o con respecto a la hora manipulaci¢n almac‚n.;FRC=La date de r‚ception doit ˆtre post‚rieure ou identique … la date de livraison en tenant compte du d‚lai magasin.;ENC=The receipt date must be greater or equal to the shipment date with respect to warehouse handling time.';
      Text003@1003 : TextConst 'ENU=The receipt date must be greater or equal to the shipment date.;ESM=La fecha de recepci¢n debe ser igual o posterior a la fecha de env¡o.;FRC=La date de r‚ception doit sup‚rieure ou ‚gale … la date de livraison.;ENC=The receipt date must be greater or equal to the shipment date.';
      ShippingAgentServices@1006 : Record 5790;
      HasTransferRoute@1007 : Boolean;
      HasShippingAgentService@1008 : Boolean;
      CalendarMgmt@1000 : Codeunit 7600;
      CalChange@1002 : Record 7602;

    PROCEDURE GetTransferRoute@3(TransferFromCode@1000 : Code[10];TransferToCode@1001 : Code[10];VAR InTransitCode@1002 : Code[10];VAR ShippingAgentCode@1003 : Code[10];VAR ShippingAgentServiceCode@1004 : Code[10]);
    VAR
      HasGotRecord@1005 : Boolean;
    BEGIN
      IF ("Transfer-from Code" <> TransferFromCode) OR
         ("Transfer-to Code" <> TransferToCode)
      THEN
        IF GET(TransferFromCode,TransferToCode) THEN
          HasGotRecord := TRUE;

      IF HasGotRecord THEN BEGIN
        InTransitCode := "In-Transit Code";
        ShippingAgentCode := "Shipping Agent Code";
        ShippingAgentServiceCode := "Shipping Agent Service Code";
      END ELSE BEGIN
        InTransitCode := '';
        ShippingAgentCode := '';
        ShippingAgentServiceCode := '';
      END;
    END;

    PROCEDURE CalcReceiptDate@16(ShipmentDate@1000 : Date;VAR ReceiptDate@1001 : Date;ShippingTime@1002 : DateFormula;OutboundWhseTime@1003 : DateFormula;InboundWhseTime@1004 : DateFormula;TransferFromCode@1005 : Code[10];TransferToCode@1006 : Code[10];ShippingAgentCode@1007 : Code[10];ShippingAgentServiceCode@1008 : Code[10]);
    VAR
      PlannedReceiptDate@1010 : Date;
      PlannedShipmentDate@1009 : Date;
    BEGIN
      IF ShipmentDate <> 0D THEN BEGIN
        // The calculation will run through the following steps:
        // ShipmentDate -> PlannedShipmentDate -> PlannedReceiptDate -> ReceiptDate

        // Calc Planned Shipment Date forward from Shipment Date
        CalcPlanShipmentDateForward(
          ShipmentDate,PlannedShipmentDate,OutboundWhseTime,
          TransferFromCode,ShippingAgentCode,ShippingAgentServiceCode);

        // Calc Planned Receipt Date forward from Planned Shipment Date
        CalcPlannedReceiptDateForward(
          PlannedShipmentDate,PlannedReceiptDate,ShippingTime,
          TransferToCode,ShippingAgentCode,ShippingAgentServiceCode);

        // Calc Receipt Date forward from Planned Receipt Date
        CalcReceiptDateForward(PlannedReceiptDate,ReceiptDate,InboundWhseTime,TransferToCode);

        IF ShipmentDate > ReceiptDate THEN
          ERROR(Text003);
      END ELSE
        ReceiptDate := 0D;
    END;

    LOCAL PROCEDURE CalcPlanShipmentDateForward@13(ShipmentDate@1000 : Date;VAR PlannedShipmentDate@1001 : Date;OutboundWhseTime@1003 : DateFormula;TransferFromCode@1005 : Code[10];ShippingAgentCode@1007 : Code[10];ShippingAgentServiceCode@1008 : Code[10]);
    BEGIN
      // Calc Planned Shipment Date forward from Shipment Date

      IF ShipmentDate <> 0D THEN BEGIN
        IF FORMAT(OutboundWhseTime) = '' THEN
          EVALUATE(OutboundWhseTime,'<0D>');

        PlannedShipmentDate :=
          CalendarMgmt.CalcDateBOC(
            FORMAT(OutboundWhseTime),
            ShipmentDate,
            CalChange."Source Type"::Location,
            TransferFromCode,
            '',
            CalChange."Source Type"::"Shipping Agent",
            ShippingAgentCode,
            ShippingAgentServiceCode,
            TRUE);
      END ELSE
        PlannedShipmentDate := 0D;
    END;

    PROCEDURE CalcPlannedReceiptDateForward@12(PlannedShipmentDate@1000 : Date;VAR PlannedReceiptDate@1001 : Date;ShippingTime@1002 : DateFormula;TransferToCode@1006 : Code[10];ShippingAgentCode@1007 : Code[10];ShippingAgentServiceCode@1008 : Code[10]);
    BEGIN
      // Calc Planned Receipt Date forward from Planned Shipment Date

      IF PlannedShipmentDate <> 0D THEN BEGIN
        IF FORMAT(ShippingTime) = '' THEN
          EVALUATE(ShippingTime,'<0D>');

        PlannedReceiptDate :=
          CalendarMgmt.CalcDateBOC(
            FORMAT(ShippingTime),
            PlannedShipmentDate,
            CalChange."Source Type"::"Shipping Agent",
            ShippingAgentCode,
            ShippingAgentServiceCode,
            CalChange."Source Type"::Location,
            TransferToCode,
            '',
            TRUE);
      END ELSE
        PlannedReceiptDate := 0D;
    END;

    PROCEDURE CalcReceiptDateForward@34(PlannedReceiptDate@1000 : Date;VAR ReceiptDate@1001 : Date;InboundWhseTime@1004 : DateFormula;TransferToCode@1006 : Code[10]);
    BEGIN
      // Calc Receipt Date forward from Planned Receipt Date

      IF PlannedReceiptDate <> 0D THEN BEGIN
        IF FORMAT(InboundWhseTime) = '' THEN
          EVALUATE(InboundWhseTime,'<0D>');

        ReceiptDate :=
          CalendarMgmt.CalcDateBOC(
            FORMAT(InboundWhseTime),
            PlannedReceiptDate,
            CalChange."Source Type"::Location,
            TransferToCode,
            '',
            CalChange."Source Type"::Location,
            TransferToCode,
            '',
            FALSE);
      END ELSE
        ReceiptDate := 0D;
    END;

    PROCEDURE CalcShipmentDate@6(VAR ShipmentDate@1004 : Date;ReceiptDate@1003 : Date;ShippingTime@1002 : DateFormula;OutboundWhseTime@1001 : DateFormula;InboundWhseTime@1000 : DateFormula;TransferFromCode@1008 : Code[10];TransferToCode@1007 : Code[10];ShippingAgentCode@1006 : Code[10];ShippingAgentServiceCode@1005 : Code[10]) : Date;
    VAR
      PlannedReceiptDate@1009 : Date;
      PlannedShipmentDate@1010 : Date;
    BEGIN
      IF ReceiptDate <> 0D THEN BEGIN
        // The calculation will run through the following steps:
        // ShipmentDate <- PlannedShipmentDate <- PlannedReceiptDate <- ReceiptDate

        // Calc Planned Receipt Date backward from ReceiptDate
        CalcPlanReceiptDateBackward(
          PlannedReceiptDate,ReceiptDate,InboundWhseTime,
          TransferToCode,ShippingAgentCode,ShippingAgentServiceCode);

        // Calc Planned Shipment Date backward from Planned ReceiptDate
        CalcPlanShipmentDateBackward(
          PlannedShipmentDate,PlannedReceiptDate,ShippingTime,
          TransferFromCode,ShippingAgentCode,ShippingAgentServiceCode);

        // Calc Shipment Date backward from Planned Shipment Date
        CalcShipmentDateBackward(
          ShipmentDate,PlannedShipmentDate,OutboundWhseTime,TransferFromCode);
      END ELSE
        ShipmentDate := 0D;
    END;

    PROCEDURE CalcPlanReceiptDateBackward@1(VAR PlannedReceiptDate@1004 : Date;ReceiptDate@1003 : Date;InboundWhseTime@1000 : DateFormula;TransferToCode@1007 : Code[10];ShippingAgentCode@1006 : Code[10];ShippingAgentServiceCode@1005 : Code[10]) : Date;
    BEGIN
      // Calc Planned Receipt Date backward from ReceiptDate

      IF ReceiptDate <> 0D THEN BEGIN
        IF FORMAT(InboundWhseTime) = '' THEN
          EVALUATE(InboundWhseTime,'<0D>');

        PlannedReceiptDate :=
          CalendarMgmt.CalcDateBOC2(
            FORMAT(InboundWhseTime),
            ReceiptDate,
            CalChange."Source Type"::Location,
            TransferToCode,
            '',
            CalChange."Source Type"::"Shipping Agent",
            ShippingAgentCode,
            ShippingAgentServiceCode,
            TRUE);
      END ELSE
        PlannedReceiptDate := 0D;
    END;

    PROCEDURE CalcPlanShipmentDateBackward@7(VAR PlannedShipmentDate@1004 : Date;PlannedReceiptDate@1003 : Date;ShippingTime@1002 : DateFormula;TransferFromCode@1008 : Code[10];ShippingAgentCode@1006 : Code[10];ShippingAgentServiceCode@1005 : Code[10]) : Date;
    BEGIN
      // Calc Planned Shipment Date backward from Planned ReceiptDate

      IF PlannedReceiptDate <> 0D THEN BEGIN
        IF FORMAT(ShippingTime) = '' THEN
          EVALUATE(ShippingTime,'<0D>');

        PlannedShipmentDate :=
          CalendarMgmt.CalcDateBOC2(
            FORMAT(ShippingTime),
            PlannedReceiptDate,
            CalChange."Source Type"::"Shipping Agent",
            ShippingAgentCode,
            ShippingAgentServiceCode,
            CalChange."Source Type"::Location,
            TransferFromCode,
            '',
            TRUE);
      END ELSE
        PlannedShipmentDate := 0D;
    END;

    PROCEDURE CalcShipmentDateBackward@10(VAR ShipmentDate@1004 : Date;PlannedShipmentDate@1003 : Date;OutboundWhseTime@1001 : DateFormula;TransferFromCode@1008 : Code[10]) : Date;
    BEGIN
      // Calc Shipment Date backward from Planned Shipment Date

      IF PlannedShipmentDate <> 0D THEN BEGIN
        IF FORMAT(OutboundWhseTime) = '' THEN
          EVALUATE(OutboundWhseTime,'<0D>');

        ShipmentDate :=
          CalendarMgmt.CalcDateBOC2(
            FORMAT(OutboundWhseTime),
            PlannedShipmentDate,
            CalChange."Source Type"::Location,
            TransferFromCode,
            '',
            CalChange."Source Type"::Location,
            TransferFromCode,
            '',
            FALSE);
      END ELSE
        ShipmentDate := 0D;
    END;

    PROCEDURE GetShippingTime@2(TransferFromCode@1000 : Code[10];TransferToCode@1001 : Code[10];ShippingAgentCode@1002 : Code[10];ShippingAgentServiceCode@1003 : Code[10];VAR ShippingTime@1004 : DateFormula);
    BEGIN
      IF (ShippingAgentServices."Shipping Agent Code" <> ShippingAgentCode) OR
         (ShippingAgentServices.Code <> ShippingAgentServiceCode)
      THEN BEGIN
        IF ShippingAgentServices.GET(ShippingAgentCode,ShippingAgentServiceCode) THEN
          HasShippingAgentService := TRUE;
      END ELSE
        HasShippingAgentService := TRUE;

      IF HasShippingAgentService THEN
        ShippingTime := ShippingAgentServices."Shipping Time"
      ELSE BEGIN
        IF ("Transfer-from Code" <> TransferFromCode) OR
           ("Transfer-to Code" <> TransferToCode)
        THEN BEGIN
          IF GET(TransferFromCode,TransferToCode) THEN
            HasTransferRoute := TRUE;
        END ELSE
          HasTransferRoute := TRUE;
        IF HasTransferRoute AND
           ShippingAgentServices.GET("Shipping Agent Code","Shipping Agent Service Code")
        THEN
          ShippingTime := ShippingAgentServices."Shipping Time"
        ELSE
          EVALUATE(ShippingTime,'');
      END;
    END;

    LOCAL PROCEDURE CalcShippingTime@4(ShipmentDate@1000 : Date;ReceiptDate@1001 : Date;VAR ShippingTime@1002 : DateFormula;OutboundWhseTime@1004 : DateFormula;InboundWhseTime@1005 : DateFormula);
    VAR
      WhseReceiptDate@1006 : Date;
      ShippingDays@1003 : Integer;
    BEGIN
      IF (ShipmentDate <> 0D) AND
         (ReceiptDate <> 0D)
      THEN BEGIN
        IF ShipmentDate > ReceiptDate THEN
          ERROR(Text003);
        WhseReceiptDate := CALCDATE(OutboundWhseTime,ShipmentDate);
        WhseReceiptDate := CALCDATE(InboundWhseTime,WhseReceiptDate);
        IF WhseReceiptDate > ReceiptDate THEN
          ERROR(Text002);
        ShippingDays := ReceiptDate - WhseReceiptDate;
        EVALUATE(ShippingTime,'<' + FORMAT(ShippingDays) + 'D>');
      END;
    END;

    BEGIN
    END.
  }
}

