OBJECT Table 827 DO Payment Credit Card
{
  OBJECT-PROPERTIES
  {
    Date=09/15/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    Permissions=TableData 828=rimd;
    OnInsert=BEGIN
               IF "No." = '' THEN BEGIN
                 DOPaymentSetup.GET;
                 DOPaymentSetup.TESTFIELD("Credit Card Nos.");
                 NoSeriesMgt.InitSeries(DOPaymentSetup."Credit Card Nos.",xRec."No. Series",0D,"No.","No. Series");
               END;

               VALIDATE("Customer No.",GETFILTER("Customer No."));
             END;

    OnDelete=BEGIN
               IF DOPaymentTransLogEntry.HasTransaction(Rec) THEN
                 ERROR(Text010,TABLECAPTION,"No.");
               DeleteCreditCardNumber;
             END;

    OnRename=BEGIN
               IF DOPaymentTransLogEntry.HasTransaction(Rec) THEN
                 ERROR(Text010,TABLECAPTION,"No.");
             END;

    CaptionML=[ENU=Dynamics Online Payment Credit Card;
               ESM=Tarjeta de cr‚dito de pago de Dynamics Online;
               FRC=Carte de cr‚dit de paiement de Dynamics Online;
               ENC=Dynamics Online Payment Credit Card];
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;CaptionML=[ENU=No.;
                                                              ESM=N§;
                                                              FRC=Nø;
                                                              ENC=No.] }
    { 2   ;   ;Type                ;Code20        ;TableRelation="DO Payment Card Type".Name;
                                                   OnValidate=BEGIN
                                                                IF Type <> xRec.Type THEN
                                                                  DeleteCreditCardNumber;
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              ESM=Tipo;
                                                              FRC=Type;
                                                              ENC=Type];
                                                   NotBlank=Yes }
    { 3   ;   ;Credit Card Number  ;Text20        ;CaptionML=[ENU=Credit Card Number;
                                                              ESM=N£mero de tarjeta de cr‚dito;
                                                              FRC=Num‚ro de carte de cr‚dit;
                                                              ENC=Credit Card Number] }
    { 4   ;   ;Expiry Date         ;Code4         ;OnValidate=VAR
                                                                IntegerValue@1000 : Integer;
                                                              BEGIN
                                                                IF NOT EVALUATE(IntegerValue,"Expiry Date") OR (STRLEN("Expiry Date") <> 4) THEN
                                                                  ERROR(Text006,FIELDCAPTION("Expiry Date"));

                                                                EVALUATE(IntegerValue,COPYSTR("Expiry Date",1,2));
                                                                IF NOT (IntegerValue IN [1..12]) THEN
                                                                  ERROR(Text007);
                                                              END;

                                                   CaptionML=[ENU=Expiry Date;
                                                              ESM=Fecha de expiraci¢n;
                                                              FRC=Date d'expiration;
                                                              ENC=Expiry Date];
                                                   NotBlank=Yes }
    { 5   ;   ;Card Holder Name    ;Text50        ;CaptionML=[ENU=Card Holder Name;
                                                              ESM=Nombre del titular de la tarjeta;
                                                              FRC=Nom du d‚tenteur de la carte;
                                                              ENC=Card Holder Name];
                                                   NotBlank=Yes }
    { 6   ;   ;Customer No.        ;Code20        ;TableRelation=Customer;
                                                   OnValidate=VAR
                                                                Contact@1000 : Record 5050;
                                                              BEGIN
                                                                Contact.SETRANGE("Company No.",FindCustomerContactNo);
                                                                Contact.SETRANGE(Type,Contact.Type::Person);
                                                                IF Contact.FINDFIRST THEN
                                                                  "Contact No." := Contact."No.";
                                                                ValidateContact;
                                                              END;

                                                   CaptionML=[ENU=Customer No.;
                                                              ESM=N§ cliente;
                                                              FRC=Nø client;
                                                              ENC=Customer No.];
                                                   NotBlank=Yes }
    { 7   ;   ;Contact No.         ;Code20        ;OnValidate=BEGIN
                                                                IF "Contact No." <> xRec."Contact No." THEN
                                                                  ValidateContact;
                                                              END;

                                                   OnLookup=VAR
                                                              Contact@1001 : Record 5050;
                                                              ContactList@1000 : Page 5052;
                                                            BEGIN
                                                              Contact.SETRANGE("Company No.",FindCustomerContactNo);
                                                              Contact.SETRANGE(Type,Contact.Type::Person);

                                                              IF "Contact No." <> '' THEN
                                                                Contact.GET("Contact No.")
                                                              ELSE BEGIN
                                                                IF Contact.GET THEN;
                                                              END;

                                                              ContactList.SETTABLEVIEW(Contact);
                                                              ContactList.LOOKUPMODE(TRUE);
                                                              IF ContactList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                                ContactList.GETRECORD(Contact);
                                                                VALIDATE("Contact No.",Contact."No.");
                                                              END;
                                                            END;

                                                   AccessByPermission=TableData 5050=R;
                                                   CaptionML=[ENU=Contact No.;
                                                              ESM=N§ contacto;
                                                              FRC=Nø contact;
                                                              ENC=Contact No.];
                                                   NotBlank=Yes }
    { 8   ;   ;Cvc No.             ;Text4         ;OnValidate=VAR
                                                                NumericCvc@1000 : Integer;
                                                              BEGIN
                                                                IF NOT EVALUATE(NumericCvc,"Cvc No.") THEN
                                                                  ERROR(Text011,FIELDCAPTION("Cvc No."));
                                                              END;

                                                   CaptionML=[ENU=Cvc No.;
                                                              ESM=N§ CVV;
                                                              FRC=Nø CVC;
                                                              ENC=Cvc No.] }
    { 10  ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              ESM=Nos. serie;
                                                              FRC=S‚ries de nø;
                                                              ENC=No. Series] }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Customer No.                             }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;No.,Type,Expiry Date                     }
  }
  CODE
  {
    VAR
      Text006@1010 : TextConst 'ENU=%1 must be 4 characters, for example, 1094 for October, 1994.;ESM=%1 debe tener 4 caracteres, por ejemplo, 1094 para octubre de 1994.;FRC=%1 doit contenir 4ÿcaractŠres, par exemple, 1094 pour octobreÿ1994.;ENC=%1 must be 4 characters, for example, 1094 for October, 1994.';
      Text007@1008 : TextConst 'ENU=Check the month number.;ESM=Compruebe el n£mero del mes.;FRC=V‚rifiez le mois.;ENC=Check the month number.';
      Text010@1013 : TextConst '@@@="%1=table caption, %2=record no.";ENU=You cannot delete %1 %2 because it has a valid transaction log entry.;ESM=No se puede eliminar %1 %2 porque tiene un movimiento de registro de transacci¢n v lido.;FRC=Impossible de supprimer %1 %2 car l''‚criture du registre des transactions est valide.;ENC=You cannot delete %1 %2 because it has a valid transaction log entry.';
      Text011@1003 : TextConst 'ENU=%1 must be a number.;ESM=%1 debe ser un n£mero.;FRC=%1 doit ˆtre un num‚ro.;ENC=%1 must be a number.';
      DOPaymentSetup@1000 : Record 826;
      DOPaymentTransLogEntry@1002 : Record 829;
      NoSeriesMgt@1001 : Codeunit 396;

    PROCEDURE AssistEdit@2(OldDOPaymentCreditCard@1000 : Record 827) : Boolean;
    VAR
      DOPaymentCreditCard@1001 : Record 827;
    BEGIN
      WITH DOPaymentCreditCard DO BEGIN
        DOPaymentCreditCard := Rec;
        DOPaymentSetup.GET;
        DOPaymentSetup.TESTFIELD("Credit Card Nos.");
        IF NoSeriesMgt.SelectSeries(DOPaymentSetup."Credit Card Nos.",OldDOPaymentCreditCard."No. Series","No. Series") THEN BEGIN
          NoSeriesMgt.SetSeries("No.");
          Rec := DOPaymentCreditCard;
          EXIT(TRUE);
        END;
      END;
    END;

    PROCEDURE SetCreditCardNumber@1(CreditCardNumberText@1000 : Text[30]);
    VAR
      DOPaymentCreditCardNo@1001 : Record 828;
      DOPaymentCardValidation@1002 : Codeunit 827;
      StarString@1003 : Text[30];
    BEGIN
      DOPaymentCardValidation.ValidateCreditCard(CreditCardNumberText,Type);

      IF DOPaymentCreditCardNo.GET("No.") THEN BEGIN
        DOPaymentCreditCardNo.SetData(CreditCardNumberText);
        DOPaymentCreditCardNo.MODIFY;
      END ELSE BEGIN
        DOPaymentCreditCardNo.INIT;
        DOPaymentCreditCardNo."No." := "No.";
        DOPaymentCreditCardNo.SetData(CreditCardNumberText);
        DOPaymentCreditCardNo.INSERT;
      END;

      // Set obfuscated card no
      StarString := '';
      "Credit Card Number" :=
        PADSTR(
          StarString,
          STRLEN(CreditCardNumberText) - 4,'*') + COPYSTR(CreditCardNumberText,
          STRLEN(CreditCardNumberText) - 3);
    END;

    LOCAL PROCEDURE DeleteCreditCardNumber@11();
    VAR
      DOPaymentCreditCardNo@1000 : Record 828;
    BEGIN
      IF DOPaymentCreditCardNo.GET("No.") THEN BEGIN
        DOPaymentCreditCardNo.DELETE;
        "Credit Card Number" := '';
      END;
    END;

    LOCAL PROCEDURE ValidateContact@10();
    VAR
      Contact@1000 : Record 5050;
    BEGIN
      IF "Contact No." <> '' THEN BEGIN
        Contact.GET("Contact No.");
        IF "Card Holder Name" = '' THEN
          "Card Holder Name" := Contact.Name;
      END;
    END;

    LOCAL PROCEDURE FindCustomerContactNo@9() : Code[20];
    VAR
      ContBusRel@1001 : Record 5054;
    BEGIN
      ContBusRel.SETCURRENTKEY("Link to Table","No.");
      ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
      ContBusRel.SETRANGE("No.","Customer No.");

      IF ContBusRel.FINDFIRST THEN
        EXIT(ContBusRel."Contact No.");
    END;

    PROCEDURE DeleteByContact@12(Contact@1000 : Record 5050);
    VAR
      DOPaymentCreditCard@1001 : Record 827;
    BEGIN
      DOPaymentCreditCard.SETRANGE("Contact No.",Contact."No.");
      IF DOPaymentCreditCard.FINDFIRST THEN
        DOPaymentCreditCard.DELETEALL(TRUE);
    END;

    PROCEDURE DeleteByCustomer@13(Customer@1000 : Record 18);
    VAR
      DOPaymentCreditCard@1001 : Record 827;
    BEGIN
      DOPaymentCreditCard.SETRANGE("Customer No.",Customer."No.");
      IF DOPaymentCreditCard.FINDFIRST THEN
        DOPaymentCreditCard.DELETEALL(TRUE);
    END;

    PROCEDURE GetCreditCardNumber@3(CreditCardNo@1000 : Code[20]) : Text[20];
    BEGIN
      IF GET(CreditCardNo) THEN
        EXIT("Credit Card Number");

      EXIT('');
    END;

    BEGIN
    END.
  }
}

