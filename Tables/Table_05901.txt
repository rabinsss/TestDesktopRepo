OBJECT Table 5901 Service Item Line
{
  OBJECT-PROPERTIES
  {
    Date=09/15/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    Permissions=TableData 5914=rimd,
                TableData 5950=rimd;
    OnInsert=BEGIN
               ServMgtSetup.GET;
               ServItemLine.RESET;
               ServItemLine.SETRANGE("Document Type","Document Type");
               ServItemLine.SETRANGE("Document No.","Document No.");
               FirstServItemLine := NOT ServItemLine.FIND('-');
               IF ServMgtSetup."One Service Item Line/Order" THEN
                 IF NOT FirstServItemLine THEN
                   ERROR(Text000,ServMgtSetup.TABLECAPTION,ServItemLine.TABLECAPTION,ServHeader.TABLECAPTION);

               GetServHeader;
               IF ServHeader."Customer No." = '' THEN BEGIN
                 IF (ServHeader.Name <> '') AND (ServHeader.Address <> '') AND (ServHeader.City <> '') THEN
                   ERROR(
                     Text001,
                     TABLECAPTION,ServHeader.FIELDCAPTION("Customer No."),ServHeader.TABLECAPTION,ServHeader."No.");
                 ERROR(
                   Text002,
                   TABLECAPTION,ServHeader.FIELDCAPTION("Customer No."),ServHeader.TABLECAPTION,ServHeader."No.");
               END;

               "Responsibility Center" := ServHeader."Responsibility Center";
               "Customer No." := ServHeader."Customer No.";
               IF ServHeader."Contract No." <> '' THEN
                 IF "Service Item No." = '' THEN
                   "Contract No." := ServHeader."Contract No."
                 ELSE BEGIN
                   ServContractLine.RESET;
                   ServContractLine.SETRANGE("Contract Type",ServContractLine."Contract Type"::Contract);
                   ServContractLine.SETRANGE("Contract No.",ServHeader."Contract No.");
                   ServContractLine.SETRANGE("Service Item No.","Service Item No.");
                   ServContractLine.SETRANGE("Contract Status",ServContractLine."Contract Status"::Signed);
                   ServContractLine.SETFILTER("Starting Date",'<=%1',ServHeader."Order Date");
                   ServContractLine.SETFILTER("Contract Expiration Date",'>%1 | =%2',ServHeader."Order Date",0D);
                   IF ServContractLine.FINDFIRST THEN
                     "Contract No." := ServHeader."Contract No.";
                 END;
               IF ("Contract No." <> '') AND ("Service Price Group Code" <> '') THEN
                 VALIDATE("Service Price Group Code",'');

               ServOrderAllocMgt.CreateAllocationEntry(
                 "Document Type","Document No.","Line No.","Service Item No.","Serial No.");

               CLEAR(ServLogMgt);
               ServLogMgt.ServItemToServOrder(Rec);

               IF (ServHeader."Quote No." = '') AND ("Response Time (Hours)" = 0) THEN
                 UpdateResponseTimeHours;
               ServOrderMgt.UpdateResponseDateTime(Rec,FALSE);
               ServOrderMgt.UpdatePriority(Rec,FALSE);

               IF "Line No." = 0 THEN
                 LendLoanerWithConfirmation;

               IF "Service Item No." = '' THEN
                 "Ship-to Code" := ServHeader."Ship-to Code";
               IF FirstServItemLine AND
                  ("Document Type" = "Document Type"::Order)
               THEN BEGIN
                 CLEAR(SegManagement);
                 IF ServHeader."Bill-to Contact No." <> '' THEN
                   SegManagement.LogDocument(
                     9,"Document No.",0,0,DATABASE::Contact,ServHeader."Bill-to Contact No.",
                     ServHeader."Salesperson Code",'',ServHeader.Description,'')
                 ELSE
                   SegManagement.LogDocument(
                     9,"Document No.",0,0,DATABASE::Customer,ServHeader."Bill-to Customer No.",
                     ServHeader."Salesperson Code",'',ServHeader.Description,'');
               END;
             END;

    OnModify=BEGIN
               IF UseServItemLineAsxRec THEN BEGIN
                 xRec := ServItemLine;
                 UseServItemLineAsxRec := FALSE;
               END;

               IF ("Service Item No." <> xRec."Service Item No.") OR ("Serial No." <> xRec."Serial No.") THEN BEGIN
                 ServLine.RESET;
                 ServLine.SETCURRENTKEY("Document Type","Document No.","Service Item Line No.");
                 ServLine.SETRANGE("Document Type","Document Type");
                 ServLine.SETRANGE("Document No.","Document No.");
                 ServLine.SETRANGE("Service Item Line No.","Line No.");
                 IF ServLine.FIND('-') THEN
                   REPEAT
                     ServLine."Service Item No." := "Service Item No.";
                     ServLine."Service Item Serial No." := "Serial No.";
                     ServLine.MODIFY(TRUE);
                   UNTIL ServLine.NEXT = 0;

                 ServOrderAlloc.RESET;
                 ServOrderAlloc.SETCURRENTKEY("Document Type","Document No.","Service Item Line No.");
                 ServOrderAlloc.SETRANGE("Document Type","Document Type");
                 ServOrderAlloc.SETRANGE("Document No.","Document No.");
                 ServOrderAlloc.SETRANGE("Service Item Line No.","Line No.");
                 IF ServOrderAlloc.FIND('-') THEN
                   REPEAT
                     ServOrderAlloc."Service Item No." := "Service Item No.";
                     ServOrderAlloc."Service Item Serial No." := "Serial No.";
                     ServOrderAlloc.MODIFY(TRUE);
                   UNTIL ServOrderAlloc.NEXT = 0;
               END;

               IF (("Fault Area Code" <> xRec."Fault Area Code") OR
                   ("Symptom Code" <> xRec."Symptom Code") OR
                   ("Fault Code" <> xRec."Fault Code") OR
                   ("Resolution Code" <> xRec."Resolution Code")) AND
                  CheckServLineExist
               THEN
                 MESSAGE(
                   Text003,
                   TABLECAPTION);
               IF "Service Item No." <> xRec."Service Item No." THEN BEGIN
                 CLEAR(ServLogMgt);
                 ServLogMgt.ServItemOffServOrder(xRec);
                 ServLogMgt.ServItemToServOrder(Rec);
               END;

               ServOrderMgt.UpdateResponseDateTime(Rec,FALSE);
               ServOrderMgt.UpdatePriority(Rec,FALSE);
               UpdateServiceOrderChangeLog(xRec);
             END;

    OnDelete=BEGIN
               IF "Loaner No." <> '' THEN BEGIN
                 Loaner.GET("Loaner No.");
                 LoanerEntry.RESET;
                 LoanerEntry.SETCURRENTKEY("Document Type","Document No.","Loaner No.",Lent);
                 LoanerEntry.SETRANGE("Document Type","Document Type" + 1);
                 LoanerEntry.SETRANGE("Document No.","Document No.");
                 LoanerEntry.SETRANGE("Loaner No.","Loaner No.");
                 LoanerEntry.SETRANGE(Lent,TRUE);
                 IF LoanerEntry.FINDFIRST THEN
                   ERROR(
                     Text006,
                     TABLECAPTION,"Document No.","Line No.",FIELDCAPTION("Loaner No."),"Loaner No.");
                 LoanerEntry.SETRANGE(Lent,TRUE);
                 LoanerEntry.DELETEALL;
               END;

               ServLine.RESET;
               ServLine.SETCURRENTKEY("Document Type","Document No.","Service Item Line No.");
               ServLine.SETRANGE("Document Type","Document Type");
               ServLine.SETRANGE("Document No.","Document No.");
               ServLine.SETRANGE("Service Item Line No.","Line No.");
               IF ServLine.FIND('-') THEN
                 ERROR(
                   Text008,
                   TABLECAPTION,"Document No.","Line No.",ServLine.TABLECAPTION);

               ServOrderAlloc.RESET;
               ServOrderAlloc.SETCURRENTKEY("Document Type","Document No.","Service Item Line No.");
               ServOrderAlloc.SETRANGE("Document Type","Document Type");
               ServOrderAlloc.SETRANGE("Document No.","Document No.");
               ServOrderAlloc.SETRANGE("Service Item Line No.","Line No.");
               ServOrderAlloc.SETFILTER(Status,'%1|%2',ServOrderAlloc.Status::Active,ServOrderAlloc.Status::Finished);
               IF ServOrderAlloc.FIND('-') THEN
                 ERROR(
                   Text008,
                   TABLECAPTION,"Document No.","Line No.",ServOrderAlloc.TABLECAPTION);
               ServOrderAlloc.SETRANGE(Status);
               ServOrderAlloc.DELETEALL;

               ServCommentLine.RESET;
               ServCommentLine.SETRANGE("Table Name",ServCommentLine."Table Name"::"Service Header");
               ServCommentLine.SETRANGE("Table Subtype","Document Type");
               ServCommentLine.SETRANGE("No.","Document No.");
               ServCommentLine.SETRANGE("Table Line No.","Line No.");
               ServCommentLine.DELETEALL;

               CLEAR(ServLogMgt);
               ServLogMgt.ServItemOffServOrder(Rec);

               ServOrderMgt.UpdateResponseDateTime(Rec,TRUE);
               UpdateStartFinishDateTime("Document Type","Document No.","Line No.",CALCDATE('<CY+1D-1Y>',WORKDATE),0T,0D,0T,TRUE);
               ServOrderMgt.UpdatePriority(Rec,TRUE);
             END;

    OnRename=BEGIN
               ERROR(Text010,TABLECAPTION);
             END;

    CaptionML=[ENU=Service Item Line;
               ESM=L¡n. prod. servicio;
               FRC=Ligne article de service;
               ENC=Service Item Line];
    PasteIsValid=No;
    LookupPageID=Page5903;
    DrillDownPageID=Page5903;
  }
  FIELDS
  {
    { 1   ;   ;Document No.        ;Code20        ;TableRelation="Service Header".No. WHERE (Document Type=FIELD(Document Type));
                                                   OnValidate=BEGIN
                                                                CreateDim(
                                                                  DATABASE::"Service Item","Service Item No.",
                                                                  DATABASE::"Service Item Group","Service Item Group Code",
                                                                  DATABASE::"Responsibility Center","Responsibility Center");
                                                              END;

                                                   CaptionML=[ENU=Document No.;
                                                              ESM=N§ documento;
                                                              FRC=Nø de document;
                                                              ENC=Document No.];
                                                   Editable=No }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ESM=N§ l¡nea;
                                                              FRC=Nø ligne;
                                                              ENC=Line No.] }
    { 3   ;   ;Service Item No.    ;Code20        ;TableRelation="Service Item".No.;
                                                   OnValidate=VAR
                                                                Cust@1000 : Record 18;
                                                                ServContractList@1001 : Page 6075;
                                                              BEGIN
                                                                IF "Loaner No." <> '' THEN
                                                                  ERROR(Text055,FIELDCAPTION("Service Item No."),
                                                                    FIELDCAPTION("Loaner No."),"Loaner No.");

                                                                IF "Service Item No." <> xRec."Service Item No." THEN BEGIN
                                                                  IF CheckServLineExist THEN
                                                                    ERROR(
                                                                      Text011,
                                                                      FIELDCAPTION("Service Item No."),TABLECAPTION,ServLine.TABLECAPTION);
                                                                END ELSE BEGIN
                                                                  CreateDim(
                                                                    DATABASE::"Service Item","Service Item No.",
                                                                    DATABASE::"Service Item Group","Service Item Group Code",
                                                                    DATABASE::"Responsibility Center","Responsibility Center");

                                                                  IF ServItem.GET("Service Item No.") THEN BEGIN
                                                                    SetServItemInfo(ServItem);
                                                                    IF "Contract No." = '' THEN
                                                                      VALIDATE("Service Price Group Code",ServItem."Service Price Group Code");
                                                                    "Service Item Group Code" := ServItem."Service Item Group Code";
                                                                  END;

                                                                  EXIT;
                                                                END;

                                                                IF "Service Item No." = '' THEN BEGIN
                                                                  IF xRec."Service Item No." <> "Service Item No." THEN BEGIN
                                                                    VALIDATE("Warranty Starting Date (Parts)",0D);
                                                                    VALIDATE("Warranty Starting Date (Labor)",0D);
                                                                    VALIDATE("Contract No.",'');
                                                                    VALIDATE("Serial No.",'');
                                                                  END;
                                                                  EXIT;
                                                                END;

                                                                ServContractExist := FALSE;
                                                                ServHeader.GET("Document Type","Document No.");
                                                                IF ServItem.GET("Service Item No.") THEN BEGIN
                                                                  IF ServHeader."Customer No." <> ServItem."Customer No." THEN
                                                                    ERROR(
                                                                      Text012,
                                                                      ServItem.TABLECAPTION,"Service Item No.",ServHeader.FIELDCAPTION("Customer No."),ServHeader."Customer No.");

                                                                  IF ServHeader."Contract No." <> '' THEN BEGIN
                                                                    ServHeader.TESTFIELD("Order Date");
                                                                    ServContractLine.RESET;
                                                                    ServContractLine.SETRANGE("Contract Type",ServContractLine."Contract Type"::Contract);
                                                                    ServContractLine.SETRANGE("Contract No.",ServHeader."Contract No.");
                                                                    ServContractLine.SETRANGE("Service Item No.","Service Item No.");
                                                                    IF NOT ServContractLine.FINDFIRST THEN
                                                                      ERROR(Text050,ServHeader."Contract No.","Service Item No.");
                                                                    ServContractLine.ValidateServicePeriod(ServHeader."Order Date");
                                                                    ServContractExist := TRUE;
                                                                  END;

                                                                  IF ServHeader."Contract No." = '' THEN BEGIN
                                                                    ServContractLine.RESET;
                                                                    ServContractLine.FILTERGROUP(2);
                                                                    ServContractLine.SETCURRENTKEY("Service Item No.","Contract Status");
                                                                    ServContractLine.SETRANGE("Service Item No.",ServItem."No.");
                                                                    ServContractLine.SETRANGE("Contract Status",ServContractLine."Contract Status"::Signed);
                                                                    ServContractLine.SETRANGE("Contract Type",ServContractLine."Contract Type"::Contract);
                                                                    ServContractLine.SETRANGE("Customer No.",ServHeader."Customer No.");
                                                                    ServContractLine.SETFILTER("Starting Date",'<=%1',ServHeader."Order Date");
                                                                    ServContractLine.SETFILTER("Contract Expiration Date",'>=%1 | =%2',ServHeader."Order Date",0D);
                                                                    ServContractLine.FILTERGROUP(0);

                                                                    IF ServContractLine.FIND('-') THEN
                                                                      IF ServContractLine.NEXT > 0 THEN BEGIN
                                                                        IF CONFIRM(Text047,TRUE,"Service Item No.") THEN BEGIN
                                                                          ServContractList.SETTABLEVIEW(ServContractLine);
                                                                          ServContractList.LOOKUPMODE(TRUE);
                                                                          IF ServContractList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                                            ServContractList.GETRECORD(ServContractLine);
                                                                            ServContractExist := TRUE;
                                                                          END;
                                                                        END;
                                                                      END ELSE BEGIN
                                                                        ServContractLine.FINDFIRST;
                                                                        ServContractExist := TRUE;
                                                                      END;
                                                                  END;

                                                                  IF (ServItem."Ship-to Code" <> ServHeader."Ship-to Code") AND
                                                                     NOT HideDialogBox
                                                                  THEN
                                                                    IF NOT CONFIRM(
                                                                         Text040,FALSE,ServItem.TABLECAPTION,
                                                                         FIELDCAPTION("Ship-to Code"),Cust.TABLECAPTION)
                                                                    THEN BEGIN
                                                                      "Service Item No." := xRec."Service Item No.";
                                                                      EXIT;
                                                                    END;
                                                                  "Ship-to Code" := ServItem."Ship-to Code";
                                                                  SetServItemInfo(ServItem);

                                                                  IF ServContractExist THEN
                                                                    VALIDATE("Contract No.",ServContractLine."Contract No.")
                                                                  ELSE
                                                                    VALIDATE("Contract No.",'');

                                                                  IF "Contract No." = '' THEN
                                                                    VALIDATE("Service Price Group Code",ServItem."Service Price Group Code");
                                                                  VALIDATE("Service Item Group Code",ServItem."Service Item Group Code");
                                                                END;

                                                                IF ServItemLine.GET("Document Type","Document No.","Line No.") THEN BEGIN
                                                                  UseServItemLineAsxRec := TRUE;
                                                                  MODIFY(TRUE);
                                                                END;
                                                                UpdateResponseTimeHours;
                                                                CreateDim(
                                                                  DATABASE::"Service Item","Service Item No.",
                                                                  DATABASE::"Service Item Group","Service Item Group Code",
                                                                  DATABASE::"Responsibility Center","Responsibility Center");
                                                              END;

                                                   CaptionML=[ENU=Service Item No.;
                                                              ESM=N§ prod. servicio;
                                                              FRC=Nø article de service;
                                                              ENC=Service Item No.] }
    { 4   ;   ;Service Item Group Code;Code10     ;TableRelation="Service Item Group".Code;
                                                   OnValidate=BEGIN
                                                                IF "Service Item Group Code" <> xRec."Service Item Group Code" THEN BEGIN
                                                                  IF "Service Item No." <> '' THEN BEGIN
                                                                    ServItem.GET("Service Item No.");
                                                                    TESTFIELD("Service Item Group Code",ServItem."Service Item Group Code");
                                                                  END;
                                                                  IF ServItemGr.GET("Service Item Group Code") THEN BEGIN
                                                                    IF ("Item No." = '') AND (Description = '') THEN
                                                                      Description := ServItemGr.Description;
                                                                    IF ServItem."Service Price Group Code" = '' THEN
                                                                      IF "Contract No." = '' THEN
                                                                        VALIDATE("Service Price Group Code",ServItemGr."Default Serv. Price Group Code");
                                                                  END;
                                                                END;
                                                                UpdateResponseTimeHours;

                                                                CreateDim(
                                                                  DATABASE::"Service Item Group","Service Item Group Code",
                                                                  DATABASE::"Service Item","Service Item No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center");
                                                              END;

                                                   CaptionML=[ENU=Service Item Group Code;
                                                              ESM=C¢d. grupo prod. servicio;
                                                              FRC=Code groupe articles service;
                                                              ENC=Service Item Group Code] }
    { 5   ;   ;Item No.            ;Code20        ;TableRelation=Item.No.;
                                                   OnValidate=BEGIN
                                                                IF "Service Item No." <> '' THEN
                                                                  ERROR(Text016,
                                                                    FIELDCAPTION("Item No."),FIELDCAPTION("Service Item No."));
                                                                IF "Item No." <> '' THEN BEGIN
                                                                  Item.GET("Item No.");
                                                                  VALIDATE("Service Item Group Code",Item."Service Item Group");
                                                                  GetServHeader;
                                                                  IF (ServHeader."Language Code" = '') OR NOT GetItemTranslation THEN BEGIN
                                                                    Description := Item.Description;
                                                                    "Description 2" := Item."Description 2";
                                                                  END;
                                                                END ELSE BEGIN
                                                                  Description := '';
                                                                  "Description 2" := '';
                                                                END;
                                                                UpdateResponseTimeHours;
                                                              END;

                                                   CaptionML=[ENU=Item No.;
                                                              ESM=N§ producto;
                                                              FRC=Nø d'article;
                                                              ENC=Item No.] }
    { 6   ;   ;Serial No.          ;Code20        ;OnValidate=BEGIN
                                                                IF "Serial No." <> xRec."Serial No." THEN
                                                                  IF "Service Item No." <> '' THEN
                                                                    ERROR(
                                                                      Text016,
                                                                      FIELDCAPTION("Serial No."),FIELDCAPTION("Service Item No."));
                                                                UpdateResponseTimeHours;

                                                                IF "Serial No." = '' THEN
                                                                  EXIT;

                                                                GetServHeader;
                                                                ServItem.RESET;
                                                                ServItem.SETCURRENTKEY("Customer No.","Ship-to Code","Item No.","Serial No.");
                                                                ServItem.SETRANGE("Customer No.",ServHeader."Customer No.");
                                                                ServItem.SETRANGE("Ship-to Code",ServHeader."Ship-to Code");
                                                                ServItem.SETRANGE("Item No.","Item No.");
                                                                ServItem.SETRANGE("Serial No.","Serial No.");
                                                                NoOfRec := ServItem.COUNT;
                                                                CASE TRUE OF
                                                                  NoOfRec = 1:
                                                                    BEGIN
                                                                      ServItem.FINDFIRST;
                                                                      VALIDATE("Service Item No.",ServItem."No.");
                                                                    END;
                                                                  NoOfRec > 1:
                                                                    IF PAGE.RUNMODAL(0,ServItem) = ACTION::LookupOK THEN
                                                                      VALIDATE("Service Item No.",ServItem."No.");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Serial No.;
                                                              ESM=N§ serie;
                                                              FRC=Nø de srie;
                                                              ENC=Serial No.] }
    { 7   ;   ;Description         ;Text50        ;OnValidate=BEGIN
                                                                UpdateResponseTimeHours;
                                                                VALIDATE("Document No.");
                                                              END;

                                                   CaptionML=[ENU=Description;
                                                              ESM=Descripci¢n;
                                                              FRC=Description;
                                                              ENC=Description] }
    { 8   ;   ;Description 2       ;Text50        ;OnValidate=BEGIN
                                                                UpdateResponseTimeHours;
                                                              END;

                                                   CaptionML=[ENU=Description 2;
                                                              ESM=Descripci¢n 2;
                                                              FRC=Description 2;
                                                              ENC=Description 2] }
    { 9   ;   ;Repair Status Code  ;Code10        ;TableRelation="Repair Status";
                                                   OnValidate=BEGIN
                                                                UpdateResponseTimeHours;
                                                                IF "Repair Status Code" <> '' THEN BEGIN
                                                                  RepairStatus.GET("Repair Status Code");
                                                                  IF RepairStatus2.GET(xRec."Repair Status Code") THEN
                                                                    IF (NOT RepairStatus.Finished AND RepairStatus2.Finished) OR
                                                                       (NOT RepairStatus."Quote Finished" AND RepairStatus2."Quote Finished")
                                                                    THEN BEGIN
                                                                      "Finishing Date" := 0D;
                                                                      "Finishing Time" := 0T;
                                                                    END;

                                                                  IF ("Document Type" = "Document Type"::Order) AND
                                                                     RepairStatus."Quote Finished"
                                                                  THEN
                                                                    ERROR(Text035,RepairStatus.TABLECAPTION,RepairStatus.Code);

                                                                  IF ("Document Type" = "Document Type"::Quote) AND
                                                                     RepairStatus.Finished
                                                                  THEN
                                                                    ERROR(Text036,RepairStatus.TABLECAPTION,RepairStatus.Code);
                                                                  IF RepairStatus.Initial THEN BEGIN
                                                                    "Starting Date" := 0D;
                                                                    "Starting Time" := 0T;
                                                                    "Finishing Date" := 0D;
                                                                    "Finishing Time" := 0T;
                                                                    UpdateStartFinishDateTime("Document Type","Document No.","Line No.","Starting Date","Starting Time",
                                                                      "Finishing Date","Finishing Time",FALSE);
                                                                    ServOrderAlloc.RESET;
                                                                    ServOrderAlloc.SETCURRENTKEY(
                                                                      "Document Type","Document No.","Service Item Line No.");
                                                                    ServOrderAlloc.SETRANGE("Document Type","Document Type");
                                                                    ServOrderAlloc.SETRANGE("Document No.","Document No.");
                                                                    ServOrderAlloc.SETRANGE("Service Item Line No.","Line No.");
                                                                    ServOrderAlloc.SETRANGE(Status,ServOrderAlloc.Status::Active);
                                                                    ServOrderAlloc.MODIFYALL("Service Started",FALSE,FALSE);
                                                                  END;

                                                                  IF RepairStatus."In Process" THEN BEGIN
                                                                    GetServHeader;
                                                                    IF ServHeader."Order Date" > WORKDATE THEN BEGIN
                                                                      "Starting Date" := ServHeader."Order Date";
                                                                      VALIDATE("Starting Time",ServHeader."Order Time");
                                                                    END ELSE BEGIN
                                                                      "Starting Date" := WORKDATE;
                                                                      IF (ServHeader."Order Date" = "Starting Date") AND (ServHeader."Order Time" > TIME) THEN
                                                                        VALIDATE("Starting Time",ServHeader."Order Time")
                                                                      ELSE
                                                                        VALIDATE("Starting Time",TIME);
                                                                    END;
                                                                    ServOrderAlloc.RESET;
                                                                    ServOrderAlloc.SETCURRENTKEY(
                                                                      "Document Type","Document No.","Service Item Line No.");
                                                                    ServOrderAlloc.SETRANGE("Document Type","Document Type");
                                                                    ServOrderAlloc.SETRANGE("Document No.","Document No.");
                                                                    ServOrderAlloc.SETRANGE("Service Item Line No.","Line No.");
                                                                    ServOrderAlloc.SETRANGE(Status,ServOrderAlloc.Status::Active);
                                                                    ServOrderAlloc.MODIFYALL("Service Started",TRUE,FALSE);
                                                                  END;

                                                                  IF RepairStatus.Finished THEN BEGIN
                                                                    ServMgtSetup.GET;
                                                                    IF ServMgtSetup."Fault Reason Code Mandatory" THEN
                                                                      TESTFIELD("Fault Reason Code");
                                                                    GetServHeader;
                                                                    IF ServHeader."Order Date" > WORKDATE THEN BEGIN
                                                                      IF "Starting Date" = 0D THEN BEGIN
                                                                        "Starting Date" := ServHeader."Order Date";
                                                                        "Starting Time" := ServHeader."Order Time";
                                                                      END;
                                                                      "Finishing Date" := "Starting Date";
                                                                      VALIDATE("Finishing Time","Starting Time");
                                                                    END ELSE BEGIN
                                                                      IF "Starting Date" = 0D THEN BEGIN
                                                                        "Starting Date" := WORKDATE;
                                                                        "Starting Time" := TIME;
                                                                      END;
                                                                      IF WORKDATE < "Starting Date" THEN BEGIN
                                                                        "Finishing Date" := "Starting Date";
                                                                        VALIDATE("Finishing Time","Starting Time");
                                                                      END ELSE BEGIN
                                                                        "Finishing Date" := WORKDATE;
                                                                        IF ("Starting Date" = "Finishing Date") AND ("Starting Time" > TIME) THEN
                                                                          VALIDATE("Finishing Time","Starting Time")
                                                                        ELSE
                                                                          VALIDATE("Finishing Time",TIME);
                                                                      END;
                                                                    END;
                                                                    ServOrderAlloc.RESET;
                                                                    ServOrderAlloc.SETCURRENTKEY(
                                                                      "Document Type","Document No.","Service Item Line No.");
                                                                    ServOrderAlloc.SETRANGE("Document Type","Document Type");
                                                                    ServOrderAlloc.SETRANGE("Document No.","Document No.");
                                                                    ServOrderAlloc.SETRANGE("Service Item Line No.","Line No.");
                                                                    ServOrderAlloc.SETRANGE(Status,ServOrderAlloc.Status::Active);
                                                                    ServOrderAlloc.MODIFYALL(Status,ServOrderAlloc.Status::Finished,FALSE);
                                                                  END;

                                                                  IF RepairStatus."Quote Finished" THEN BEGIN
                                                                    GetServHeader;
                                                                    IF ServHeader."Order Date" > WORKDATE THEN BEGIN
                                                                      IF "Starting Date" = 0D THEN BEGIN
                                                                        "Starting Date" := ServHeader."Order Date";
                                                                        "Starting Time" := ServHeader."Order Time";
                                                                      END;
                                                                      "Finishing Date" := "Starting Date";
                                                                      VALIDATE("Finishing Time","Starting Time");
                                                                    END ELSE BEGIN
                                                                      IF "Starting Date" = 0D THEN BEGIN
                                                                        "Starting Date" := WORKDATE;
                                                                        "Starting Time" := TIME;
                                                                      END;
                                                                      IF WORKDATE < "Starting Date" THEN BEGIN
                                                                        "Finishing Date" := "Starting Date";
                                                                        VALIDATE("Finishing Time","Starting Time");
                                                                      END ELSE BEGIN
                                                                        "Finishing Date" := WORKDATE;
                                                                        IF ("Starting Date" = "Finishing Date") AND
                                                                           ("Starting Time" > TIME)
                                                                        THEN
                                                                          VALIDATE("Finishing Time","Starting Time")
                                                                        ELSE
                                                                          VALIDATE("Finishing Time",TIME);
                                                                      END;
                                                                    END;
                                                                  END;

                                                                  IF RepairStatus."Partly Serviced" OR RepairStatus.Referred THEN BEGIN
                                                                    ServOrderAlloc.RESET;
                                                                    ServOrderAlloc.SETCURRENTKEY("Document Type","Document No.","Service Item Line No.");
                                                                    ServOrderAlloc.SETRANGE("Document Type","Document Type");
                                                                    ServOrderAlloc.SETRANGE("Document No.","Document No.");
                                                                    ServOrderAlloc.SETRANGE("Service Item Line No.","Line No.");
                                                                    ServOrderAlloc.SETRANGE(Status,ServOrderAlloc.Status::Active);
                                                                    IF ServOrderAlloc.FIND('-') THEN
                                                                      REPEAT
                                                                        IF RepairStatus.Referred AND RepairStatus2.Initial THEN
                                                                          ServOrderAlloc."Service Started" := FALSE;
                                                                        ServOrderAlloc.Status := ServOrderAlloc.Status::"Reallocation Needed";
                                                                        ServOrderAlloc."Reason Code" := '';
                                                                        ServOrderAlloc.MODIFY;
                                                                      UNTIL ServOrderAlloc.NEXT = 0;
                                                                  END;

                                                                  RepairStatusPriority := RepairStatus.Priority;
                                                                  UseLineNo := "Line No.";
                                                                  ServItemLine.RESET;
                                                                  ServItemLine.SETRANGE("Document Type","Document Type");
                                                                  ServItemLine.SETRANGE("Document No.","Document No.");
                                                                  ServItemLine.SETFILTER("Line No.",'<>%1',"Line No.");
                                                                  ServItemLine.SETFILTER("Repair Status Code",'<>%1','');
                                                                  IF ServItemLine.FIND('-') THEN
                                                                    REPEAT
                                                                      RepairStatus2.GET(ServItemLine."Repair Status Code");
                                                                      IF RepairStatus2.Priority < RepairStatusPriority THEN BEGIN
                                                                        RepairStatusPriority := RepairStatus2.Priority;
                                                                        UseLineNo := ServItemLine."Line No.";
                                                                      END;
                                                                    UNTIL ServItemLine.NEXT = 0;
                                                                  IF "Line No." <> UseLineNo THEN BEGIN
                                                                    ServItemLine.GET("Document Type","Document No.",UseLineNo);
                                                                    RepairStatus.GET(ServItemLine."Repair Status Code");
                                                                  END ELSE
                                                                    RepairStatus.GET("Repair Status Code");
                                                                  ServHeader2.GET("Document Type","Document No.");
                                                                  ServHeader3 := ServHeader2;
                                                                  IF ServHeader2.Status <> RepairStatus."Service Order Status" THEN BEGIN
                                                                    ServHeader2.SetValidatingFromLines(TRUE);
                                                                    IF ServHeader2."Finishing Date" = 0D THEN
                                                                      ServHeader2.VALIDATE("Finishing Date","Finishing Date");
                                                                    ServHeader2.VALIDATE(Status,RepairStatus."Service Order Status");
                                                                    IF NOT (ServHeader2.Status = ServHeader2.Status::Finished) THEN BEGIN
                                                                      ServHeader2."Finishing Date" := 0D;
                                                                      ServHeader2."Finishing Time" := 0T;
                                                                      ServHeader2."Service Time (Hours)" := 0;
                                                                    END;
                                                                    ServHeader2.UpdateServiceOrderChangeLog(ServHeader3);
                                                                    ServHeader2.MODIFY;
                                                                    IF ServHeader2.Status = ServHeader2.Status::Finished THEN
                                                                      UpdateStartFinishDateTime("Document Type","Document No.","Line No.","Starting Date","Starting Time",
                                                                        "Finishing Date","Finishing Time",FALSE);
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Repair Status Code;
                                                              ESM=C¢d. estado reparaci¢n;
                                                              FRC=Code tat rparation;
                                                              ENC=Repair Status Code] }
    { 10  ;   ;Priority            ;Option        ;CaptionML=[ENU=Priority;
                                                              ESM=Prioridad;
                                                              FRC=Priorit;
                                                              ENC=Priority];
                                                   OptionCaptionML=[ENU=Low,Medium,High;
                                                                    ESM=Baja,Media,Alta;
                                                                    FRC=Faible,Moyenne,Haut;
                                                                    ENC=Low,Medium,High];
                                                   OptionString=Low,Medium,High }
    { 11  ;   ;Response Time (Hours);Decimal      ;OnValidate=BEGIN
                                                                IF ("Response Time (Hours)" <> xRec."Response Time (Hours)") OR ("Response Time (Hours)" = 0) THEN BEGIN
                                                                  SkipResponseTimeHrsUpdate := TRUE;
                                                                  GetServHeader;
                                                                  CalculateResponseDateTime(ServHeader."Order Date",ServHeader."Order Time");
                                                                END ELSE
                                                                  UpdateResponseTimeHours;
                                                              END;

                                                   CaptionML=[ENU=Response Time (Hours);
                                                              ESM=Tiempo respuesta (Horas);
                                                              FRC=Temps de rponse (heures);
                                                              ENC=Response Time (Hours)];
                                                   DecimalPlaces=0:5 }
    { 12  ;   ;Response Date       ;Date          ;OnValidate=BEGIN
                                                                SkipResponseTimeHrsUpdate := TRUE;
                                                                IF "Response Date" <> xRec."Response Date" THEN BEGIN
                                                                  GetServHeader;
                                                                  IF "Response Date" <> 0D THEN BEGIN
                                                                    IF "Response Date" < ServHeader."Order Date" THEN
                                                                      ERROR(
                                                                        Text022,
                                                                        FIELDCAPTION("Response Date"),ServHeader.TABLECAPTION,
                                                                        ServHeader.FIELDCAPTION("Order Date"));
                                                                    IF "Response Date" = ServHeader."Order Date" THEN
                                                                      IF TIME < ServHeader."Order Time" THEN
                                                                        "Response Time" := ServHeader."Order Time"
                                                                      ELSE
                                                                        "Response Time" := TIME;
                                                                  END ELSE
                                                                    "Response Time" := 0T;

                                                                  "Response Time (Hours)" := 0;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Response Date;
                                                              ESM=Fecha respuesta;
                                                              FRC=Date de rponse;
                                                              ENC=Response Date] }
    { 13  ;   ;Response Time       ;Time          ;OnValidate=BEGIN
                                                                SkipResponseTimeHrsUpdate := TRUE;
                                                                IF "Response Time" <> xRec."Response Time" THEN BEGIN
                                                                  GetServHeader;
                                                                  IF ("Response Date" = ServHeader."Order Date") AND
                                                                     ("Response Time" < ServHeader."Order Time")
                                                                  THEN
                                                                    ERROR(
                                                                      Text022,
                                                                      FIELDCAPTION("Response Time"),ServHeader.TABLECAPTION,
                                                                      ServHeader.FIELDCAPTION("Order Time"));

                                                                  "Response Time (Hours)" := 0;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Response Time;
                                                              ESM=Hora respuesta;
                                                              FRC=Temps de rponse;
                                                              ENC=Response Time] }
    { 14  ;   ;Starting Date       ;Date          ;OnValidate=BEGIN
                                                                SkipResponseTimeHrsUpdate := TRUE;
                                                                GetServHeader;
                                                                IF "Starting Date" <> 0D THEN BEGIN
                                                                  IF "Starting Date" < ServHeader."Order Date" THEN
                                                                    ERROR(
                                                                      Text022,
                                                                      FIELDCAPTION("Starting Date"),ServHeader.TABLECAPTION,
                                                                      ServHeader.FIELDCAPTION("Order Date"));

                                                                  IF ("Starting Date" > ServHeader."Finishing Date") AND
                                                                     (ServHeader."Finishing Date" <> 0D)
                                                                  THEN
                                                                    ERROR(
                                                                      Text018,
                                                                      FIELDCAPTION("Starting Date"),
                                                                      ServHeader.TABLECAPTION,
                                                                      ServHeader.FIELDCAPTION("Finishing Date"));

                                                                  IF "Starting Date" <> xRec."Starting Date" THEN BEGIN
                                                                    "Finishing Date" := 0D;
                                                                    "Finishing Time" := 0T;
                                                                  END;

                                                                  IF ("Starting Date" = ServHeader."Order Date") AND
                                                                     (TIME < ServHeader."Order Time")
                                                                  THEN
                                                                    VALIDATE("Starting Time",ServHeader."Order Time")
                                                                  ELSE
                                                                    VALIDATE("Starting Time",TIME);
                                                                END ELSE BEGIN
                                                                  "Starting Time" := 0T;
                                                                  VALIDATE("Finishing Date",0D);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Starting Date;
                                                              ESM=Fecha inicial;
                                                              FRC=Date dbut;
                                                              ENC=Starting Date] }
    { 15  ;   ;Starting Time       ;Time          ;OnValidate=BEGIN
                                                                SkipResponseTimeHrsUpdate := TRUE;
                                                                TESTFIELD("Starting Date");
                                                                IF "Starting Time" <> 0T THEN BEGIN
                                                                  GetServHeader;
                                                                  IF ("Starting Date" = ServHeader."Order Date") AND
                                                                     ("Starting Time" < ServHeader."Order Time")
                                                                  THEN
                                                                    ERROR(
                                                                      Text022,
                                                                      FIELDCAPTION("Starting Time"),ServHeader.TABLECAPTION,
                                                                      ServHeader.FIELDCAPTION("Order Time"));

                                                                  IF ("Starting Time" > "Finishing Time") AND
                                                                     ("Finishing Time" <> 0T) AND
                                                                     ("Starting Date" = "Finishing Date")
                                                                  THEN
                                                                    ERROR(Text020,
                                                                      FIELDCAPTION("Starting Time"),FIELDCAPTION("Finishing Time"));

                                                                  UpdateStartFinishDateTime("Document Type","Document No.","Line No.","Starting Date",
                                                                    "Starting Time","Finishing Date","Finishing Time",FALSE);
                                                                END ELSE BEGIN
                                                                  "Finishing Date" := 0D;
                                                                  "Finishing Time" := 0T;
                                                                  UpdateStartFinishDateTime("Document Type","Document No.","Line No.","Starting Date","Starting Time",
                                                                    "Finishing Date","Finishing Time",FALSE);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Starting Time;
                                                              ESM=Hora inicial;
                                                              FRC=Heure dbut;
                                                              ENC=Starting Time] }
    { 16  ;   ;Finishing Date      ;Date          ;OnValidate=BEGIN
                                                                SkipResponseTimeHrsUpdate := TRUE;
                                                                GetServHeader;
                                                                IF "Finishing Date" <> 0D THEN BEGIN
                                                                  IF "Finishing Date" < ServHeader."Order Date" THEN
                                                                    ERROR(
                                                                      Text022,
                                                                      FIELDCAPTION("Finishing Date"),ServHeader.TABLECAPTION,
                                                                      ServHeader.FIELDCAPTION("Order Date"));

                                                                  IF "Finishing Date" < "Starting Date" THEN
                                                                    ERROR(
                                                                      Text019,
                                                                      FIELDCAPTION("Finishing Date"),FIELDCAPTION("Starting Date"));
                                                                  IF ("Starting Date" = "Finishing Date") AND ("Starting Time" > TIME) THEN
                                                                    VALIDATE("Finishing Time","Starting Time")
                                                                  ELSE
                                                                    VALIDATE("Finishing Time",TIME);
                                                                  UpdateStartFinishDateTime("Document Type","Document No.","Line No.","Starting Date","Starting Time",
                                                                    "Finishing Date","Finishing Time",FALSE);
                                                                END ELSE BEGIN
                                                                  "Finishing Time" := 0T;
                                                                  UpdateStartFinishDateTime("Document Type","Document No.","Line No.","Starting Date","Starting Time",
                                                                    "Finishing Date","Finishing Time",FALSE);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Finishing Date;
                                                              ESM=Fecha finalizaci¢n;
                                                              FRC=Date fin;
                                                              ENC=Finishing Date] }
    { 17  ;   ;Finishing Time      ;Time          ;OnValidate=BEGIN
                                                                SkipResponseTimeHrsUpdate := TRUE;
                                                                TESTFIELD("Finishing Date");
                                                                GetServHeader;
                                                                IF "Finishing Time" <> 0T THEN BEGIN
                                                                  IF ("Finishing Date" = "Starting Date") AND
                                                                     ("Finishing Time" < "Starting Time")
                                                                  THEN
                                                                    ERROR(
                                                                      Text022,
                                                                      FIELDCAPTION("Finishing Time"),
                                                                      FIELDCAPTION("Starting Time"));
                                                                  UpdateStartFinishDateTime("Document Type","Document No.","Line No.","Starting Date","Starting Time",
                                                                    "Finishing Date","Finishing Time",FALSE);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Finishing Time;
                                                              ESM=Hora finalizaci¢n;
                                                              FRC=Heure fin;
                                                              ENC=Finishing Time] }
    { 18  ;   ;Service Shelf No.   ;Code10        ;TableRelation="Service Shelf";
                                                   CaptionML=[ENU=Service Shelf No.;
                                                              ESM=N§ estanter¡a serv.;
                                                              FRC=Nø rayon service;
                                                              ENC=Service Shelf No.] }
    { 19  ;   ;Warranty Starting Date (Parts);Date;OnValidate=BEGIN
                                                                IF "Service Item No." <> '' THEN BEGIN
                                                                  ServItem.GET("Service Item No.");
                                                                  IF "Warranty Starting Date (Parts)" <> ServItem."Warranty Starting Date (Parts)" THEN
                                                                    ERROR(Text023,ServItem.TABLECAPTION);
                                                                END;

                                                                IF "Warranty Starting Date (Parts)" <> 0D THEN BEGIN
                                                                  ServMgtSetup.GET;
                                                                  "Warranty Ending Date (Parts)" := CALCDATE(ServMgtSetup."Default Warranty Duration","Warranty Starting Date (Parts)");
                                                                  "Warranty % (Parts)" := ServMgtSetup."Warranty Disc. % (Parts)";
                                                                END ELSE BEGIN
                                                                  "Warranty Ending Date (Parts)" := 0D;
                                                                  "Warranty % (Parts)" := 0;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Warranty Starting Date (Parts);
                                                              ESM=Fecha inicio garant¡a (Comp.);
                                                              FRC=Date dbut garantie (pices);
                                                              ENC=Warranty Starting Date (Parts)] }
    { 20  ;   ;Warranty Ending Date (Parts);Date  ;OnValidate=BEGIN
                                                                IF "Service Item No." <> '' THEN BEGIN
                                                                  ServItem.GET("Service Item No.");
                                                                  IF "Warranty Ending Date (Parts)" <> ServItem."Warranty Ending Date (Parts)" THEN
                                                                    ERROR(Text023,ServItem.TABLECAPTION);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Warranty Ending Date (Parts);
                                                              ESM=Fecha fin garant¡a (Comp.);
                                                              FRC=Date fin garantie (pices);
                                                              ENC=Warranty Ending Date (Parts)] }
    { 21  ;   ;Warranty            ;Boolean       ;OnValidate=BEGIN
                                                                IF "Service Item No." = '' THEN BEGIN
                                                                  GetServHeader;
                                                                  IF Warranty THEN BEGIN
                                                                    IF CONFIRM(Text024,TRUE) THEN BEGIN
                                                                      VALIDATE("Warranty Starting Date (Parts)",ServHeader."Order Date");
                                                                      VALIDATE("Warranty Starting Date (Labor)",ServHeader."Order Date");
                                                                      Warranty := TRUE;
                                                                    END ELSE
                                                                      Warranty := FALSE;
                                                                  END ELSE BEGIN
                                                                    IF CONFIRM(Text025,TRUE) THEN BEGIN
                                                                      VALIDATE("Warranty Starting Date (Parts)",0D);
                                                                      VALIDATE("Warranty Starting Date (Labor)",0D);
                                                                      Warranty := FALSE;
                                                                    END ELSE
                                                                      Warranty := TRUE;
                                                                  END;
                                                                  IF ServItemLine.GET("Document Type","Document No.","Line No.") THEN
                                                                    MODIFY;
                                                                  CheckWarranty(ServHeader."Order Date");
                                                                END ELSE
                                                                  ERROR(Text023,ServItem.TABLECAPTION);
                                                              END;

                                                   CaptionML=[ENU=Warranty;
                                                              ESM=Garant¡a;
                                                              FRC=Garantie;
                                                              ENC=Warranty] }
    { 22  ;   ;Warranty % (Parts)  ;Decimal       ;OnValidate=BEGIN
                                                                IF "Service Item No." <> '' THEN
                                                                  ERROR(Text023,ServItem.TABLECAPTION);

                                                                IF ("Service Item No." = '') AND ("Warranty % (Parts)" <> xRec."Warranty % (Parts)") THEN BEGIN
                                                                  ServLine.RESET;
                                                                  ServLine.SETCURRENTKEY("Document Type","Document No.","Service Item Line No.",Type);
                                                                  ServLine.SETRANGE("Document Type","Document Type");
                                                                  ServLine.SETRANGE("Document No.","Document No.");
                                                                  ServLine.SETRANGE("Service Item Line No.","Line No.");
                                                                  ServLine.SETRANGE(Type,ServLine.Type::Item);
                                                                  IF ServLine.FIND('-') THEN
                                                                    REPEAT
                                                                      ServLine.VALIDATE("Warranty Disc. %","Warranty % (Parts)");
                                                                      ServLine.MODIFY;
                                                                    UNTIL ServLine.NEXT = 0;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Warranty % (Parts);
                                                              ESM=% Garant¡a (Componentes);
                                                              FRC=% garantie (pices);
                                                              ENC=Warranty % (Parts)];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 23  ;   ;Warranty % (Labor)  ;Decimal       ;OnValidate=BEGIN
                                                                IF "Service Item No." <> '' THEN
                                                                  ERROR(Text023,ServItem.TABLECAPTION);

                                                                IF ("Service Item No." = '') AND ("Warranty % (Labor)" <> xRec."Warranty % (Labor)") THEN BEGIN
                                                                  ServLine.RESET;
                                                                  ServLine.SETCURRENTKEY("Document Type","Document No.","Service Item Line No.",Type);
                                                                  ServLine.SETRANGE("Document Type","Document Type");
                                                                  ServLine.SETRANGE("Document No.","Document No.");
                                                                  ServLine.SETRANGE("Service Item Line No.","Line No.");
                                                                  ServLine.SETRANGE(Type,ServLine.Type::Resource);
                                                                  IF ServLine.FIND('-') THEN
                                                                    REPEAT
                                                                      ServLine.VALIDATE("Warranty Disc. %","Warranty % (Labor)");
                                                                      ServLine.MODIFY;
                                                                    UNTIL ServLine.NEXT = 0;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Warranty % (Labor);
                                                              ESM=% Garant¡a (Mano de obra);
                                                              FRC=% garantie (M.O.);
                                                              ENC=Warranty % (Labour)];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 24  ;   ;Warranty Starting Date (Labor);Date;OnValidate=BEGIN
                                                                IF "Service Item No." <> '' THEN BEGIN
                                                                  ServItem.GET("Service Item No.");
                                                                  IF "Warranty Starting Date (Labor)" <> ServItem."Warranty Starting Date (Labor)" THEN
                                                                    ERROR(Text023,ServItem.TABLECAPTION);
                                                                END;

                                                                IF "Warranty Starting Date (Labor)" <> 0D THEN BEGIN
                                                                  ServMgtSetup.GET;
                                                                  "Warranty Ending Date (Labor)" := CALCDATE(ServMgtSetup."Default Warranty Duration","Warranty Starting Date (Labor)");
                                                                  "Warranty % (Parts)" := ServMgtSetup."Warranty Disc. % (Parts)";
                                                                  "Warranty % (Labor)" := ServMgtSetup."Warranty Disc. % (Labor)";
                                                                END ELSE BEGIN
                                                                  "Warranty Ending Date (Labor)" := 0D;
                                                                  "Warranty % (Labor)" := 0;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Warranty Starting Date (Labor);
                                                              ESM=Fecha inic. garant¡a (M. obra);
                                                              FRC=Date dbut garantie (M.O.);
                                                              ENC=Warranty Starting Date (Labour)] }
    { 25  ;   ;Warranty Ending Date (Labor);Date  ;OnValidate=BEGIN
                                                                IF "Service Item No." <> '' THEN BEGIN
                                                                  ServItem.GET("Service Item No.");
                                                                  IF "Warranty Ending Date (Labor)" <> ServItem."Warranty Ending Date (Labor)" THEN
                                                                    ERROR(Text023,ServItem.TABLECAPTION);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Warranty Ending Date (Labor);
                                                              ESM=Fecha fin garant¡a (Mano obra);
                                                              FRC=Date fin garantie (M.O.);
                                                              ENC=Warranty Ending Date (Labour)] }
    { 26  ;   ;Contract No.        ;Code20        ;TableRelation="Service Contract Header"."Contract No." WHERE (Contract Type=CONST(Contract));
                                                   OnValidate=BEGIN
                                                                ServHeader.GET("Document Type","Document No.");
                                                                IF (ServHeader."Contract No." <> '') AND
                                                                   ("Contract No." <> ServHeader."Contract No.")
                                                                THEN
                                                                  ERROR(Text048,FIELDCAPTION("Contract No."));

                                                                IF ("Service Price Group Code" <> '') AND ("Contract No." <> '') THEN
                                                                  ERROR(Text033);

                                                                ServLine.RESET;
                                                                ServLine.SETRANGE("Document Type","Document Type");
                                                                ServLine.SETRANGE("Document No.","Document No.");
                                                                IF "Line No." <> 0 THEN BEGIN
                                                                  ServLine.SETRANGE("Service Item Line No.","Line No.");
                                                                  ServLine.SETFILTER("Quantity Invoiced",'>0');
                                                                  IF ServLine.FIND('-') THEN
                                                                    ERROR(Text053);
                                                                END;

                                                                IF "Contract No." <> '' THEN BEGIN
                                                                  ServContractLine.RESET;
                                                                  ServContractLine.SETRANGE("Contract Type",ServContractLine."Contract Type"::Contract);
                                                                  ServContractLine.SETRANGE("Contract No.","Contract No.");
                                                                  ServContractLine.SETRANGE("Service Item No.","Service Item No.");
                                                                  IF NOT ServContractLine.FINDFIRST THEN
                                                                    ERROR(Text049,"Contract No.","Service Item No.");
                                                                  IF ServContractLine."Customer No." <> ServHeader."Customer No." THEN
                                                                    ERROR(Text051,"Contract No.");
                                                                  IF ServContractLine."Contract Status" <> ServContractLine."Contract Status"::Signed THEN
                                                                    ERROR(Text052,"Contract No.");
                                                                  ServHeader.TESTFIELD("Order Date");
                                                                  ServContractLine.ValidateServicePeriod(ServHeader."Order Date");
                                                                  "Contract Line No." := ServContractLine."Line No.";
                                                                END ELSE
                                                                  "Contract Line No." := 0;
                                                                ServLine.SETRANGE("Quantity Invoiced",0);

                                                                IF ServLine.FIND('-') AND ("Line No." <> 0) THEN
                                                                  IF CONFIRM(Text054,TRUE) THEN BEGIN
                                                                    MODIFY(TRUE);
                                                                    RecreateServLines(ServLine);
                                                                  END ELSE
                                                                    "Contract No." := xRec."Contract No.";
                                                                UpdateResponseTimeHours;
                                                              END;

                                                   OnLookup=VAR
                                                              ServHeader@1000 : Record 5900;
                                                              ServContractLine@1003 : Record 5964;
                                                              ServContractList@1001 : Page 6075;
                                                            BEGIN
                                                              ServHeader.GET("Document Type","Document No.");
                                                              IF "Contract No." <> '' THEN BEGIN
                                                                ServContractLine.SETRANGE("Contract Type",ServContractLine."Contract Type"::Contract);
                                                                ServContractLine.SETRANGE("Contract No.","Contract No.");
                                                                IF ServContractLine.FINDFIRST THEN
                                                                  ServContractList.SETRECORD(ServContractLine);
                                                                ServContractLine.RESET;
                                                              END;
                                                              ServContractLine.FILTERGROUP(2);
                                                              ServContractLine.SETRANGE("Contract Type",ServContractLine."Contract Type"::Contract);
                                                              ServContractLine.SETRANGE("Customer No.",ServHeader."Customer No.");
                                                              ServContractLine.SETRANGE("Service Item No.","Service Item No.");
                                                              ServContractLine.SETRANGE("Contract Status",ServContractLine."Contract Status"::Signed);
                                                              ServContractLine.SETFILTER("Starting Date",'<=%1',ServHeader."Order Date");
                                                              ServContractLine.SETFILTER("Contract Expiration Date",'>=%1 | =%2',ServHeader."Order Date",0D);
                                                              ServContractLine.FILTERGROUP(0);
                                                              ServContractList.SETTABLEVIEW(ServContractLine);
                                                              ServContractList.LOOKUPMODE(TRUE);
                                                              IF ServContractList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                                ServContractList.GETRECORD(ServContractLine);
                                                                VALIDATE("Contract No.",ServContractLine."Contract No.");
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Contract No.;
                                                              ESM=N§ contrato;
                                                              FRC=Nø de contrat;
                                                              ENC=Contract No.] }
    { 27  ;   ;Location of Service Item;Text30    ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Item"."Location of Service Item" WHERE (No.=FIELD(Service Item No.)));
                                                   CaptionML=[ENU=Location of Service Item;
                                                              ESM=Ubicaci¢n del prod. serv.;
                                                              FRC=Emplacement de l'article de service;
                                                              ENC=Location of Service Item];
                                                   Editable=No }
    { 28  ;   ;Loaner No.          ;Code20        ;TableRelation=Loaner.No.;
                                                   OnValidate=BEGIN
                                                                IF ("Loaner No." = '') AND (xRec."Loaner No." <> '') THEN BEGIN
                                                                  Loaner.GET(xRec."Loaner No.");
                                                                  LoanerEntry.RESET;
                                                                  LoanerEntry.SETCURRENTKEY("Document Type","Document No.","Loaner No.",Lent);
                                                                  LoanerEntry.SETRANGE("Document Type","Document Type" + 1);
                                                                  LoanerEntry.SETRANGE("Document No.","Document No.");
                                                                  LoanerEntry.SETRANGE("Loaner No.",xRec."Loaner No.");
                                                                  LoanerEntry.SETRANGE(Lent,TRUE);
                                                                  IF LoanerEntry.FINDFIRST THEN
                                                                    ERROR(
                                                                      Text026,
                                                                      FIELDCAPTION("Loaner No."))
                                                                END;

                                                                IF "Loaner No." <> xRec."Loaner No." THEN BEGIN
                                                                  LoanerEntry.RESET;
                                                                  LoanerEntry.SETCURRENTKEY("Document Type","Document No.","Loaner No.",Lent);
                                                                  LoanerEntry.SETRANGE("Document Type","Document Type" + 1);
                                                                  LoanerEntry.SETRANGE("Document No.","Document No.");
                                                                  LoanerEntry.SETRANGE("Loaner No.",xRec."Loaner No.");
                                                                  LoanerEntry.SETRANGE(Lent,TRUE);
                                                                  IF LoanerEntry.FINDFIRST THEN BEGIN
                                                                    GetServHeader;
                                                                    ERROR(
                                                                      Text028,
                                                                      FIELDCAPTION("Loaner No."),FORMAT(ServHeader."Document Type"),
                                                                      ServHeader.FIELDCAPTION("No."),ServHeader."No.");
                                                                  END;
                                                                  CheckIfLoanerOnServOrder;
                                                                  IF "Line No." <> 0 THEN
                                                                    LendLoanerWithConfirmation;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Loaner No.;
                                                              ESM=No. producto prestado;
                                                              FRC=Nø article de prt;
                                                              ENC=Loaner No.] }
    { 29  ;   ;Vendor No.          ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=[ENU=Vendor No.;
                                                              ESM=N§ proveedor;
                                                              FRC=Nø fournisseur;
                                                              ENC=Vendor No.] }
    { 30  ;   ;Vendor Item No.     ;Text20        ;CaptionML=[ENU=Vendor Item No.;
                                                              ESM=C¢d. producto proveedor;
                                                              FRC=Nø article fournisseur;
                                                              ENC=Vendor Item No.] }
    { 31  ;   ;Fault Reason Code   ;Code10        ;TableRelation="Fault Reason Code";
                                                   OnValidate=VAR
                                                                FaultReasonCode@1000 : Record 5917;
                                                                RecR@1001 : RecordRef;
                                                                TypeR@1002 : FieldRef;
                                                                TypeStr@1003 : Text[50];
                                                              BEGIN
                                                                ServLine.RESET;
                                                                ServLine.SETCURRENTKEY("Document Type","Document No.","Service Item Line No.");
                                                                ServLine.SETRANGE("Document Type","Document Type");
                                                                ServLine.SETRANGE("Document No.","Document No.");
                                                                ServLine.SETRANGE("Service Item Line No.","Line No.");
                                                                IF FaultReasonCode.GET("Fault Reason Code") THEN BEGIN
                                                                  RecR.GETTABLE(ServLine);
                                                                  TypeR := RecR.FIELDINDEX(ServLine.FIELDNO(Type));
                                                                  TypeStr := TypeR.OPTIONCAPTION;
                                                                  IF FaultReasonCode."Exclude Warranty Discount" THEN BEGIN
                                                                    ServLine.SETFILTER(Type,'%1|%2',ServLine.Type::Cost,ServLine.Type::"G/L Account");
                                                                    IF ServLine.FIND('-') THEN
                                                                      IF NOT CONFIRM(
                                                                           STRSUBSTNO(
                                                                             Text056,
                                                                             TABLECAPTION,
                                                                             FIELDCAPTION("Document No."),"Document No.",
                                                                             FIELDCAPTION("Line No."),"Line No.",
                                                                             ServLine.FIELDCAPTION(Type),
                                                                             SELECTSTR(ServLine.Type::"G/L Account" + 1,TypeStr),
                                                                             SELECTSTR(ServLine.Type::Cost + 1,TypeStr),
                                                                             FaultReasonCode.FIELDCAPTION("Exclude Warranty Discount"),
                                                                             FaultReasonCode.TABLECAPTION,FaultReasonCode.Code),
                                                                           TRUE)
                                                                      THEN
                                                                        ERROR('');
                                                                    ServLine.SETRANGE(Type,ServLine.Type::Item,ServLine.Type::Resource);
                                                                  END ELSE
                                                                    ServLine.SETRANGE(Type,ServLine.Type::Item,ServLine.Type::"G/L Account");
                                                                END;
                                                                IF ServLine.FIND('-') THEN
                                                                  REPEAT
                                                                    ServLine.VALIDATE("Fault Reason Code","Fault Reason Code");
                                                                    ServLine.MODIFY;
                                                                  UNTIL ServLine.NEXT = 0;
                                                              END;

                                                   CaptionML=[ENU=Fault Reason Code;
                                                              ESM=C¢d. auditor¡a defecto;
                                                              FRC=Code motif panne;
                                                              ENC=Fault Reason Code] }
    { 32  ;   ;Service Price Group Code;Code10    ;TableRelation="Service Price Group";
                                                   OnValidate=VAR
                                                                ServPriceGrSetup@1001 : Record 6081;
                                                                ServPriceMgmt@1000 : Codeunit 6080;
                                                              BEGIN
                                                                GetServHeader;
                                                                IF ("Service Price Group Code" <> '') AND
                                                                   (("Contract No." <> '') OR (ServHeader."Contract No." <> ''))
                                                                THEN
                                                                  ERROR(Text033);

                                                                ServLine.RESET;
                                                                ServLine.SETCURRENTKEY("Document Type","Document No.","Service Item Line No.",Type);
                                                                ServLine.SETRANGE("Document Type","Document Type");
                                                                ServLine.SETRANGE("Document No.","Document No.");
                                                                ServLine.SETRANGE("Service Item Line No.","Line No.");

                                                                IF "Service Price Group Code" <> xRec."Service Price Group Code" THEN BEGIN
                                                                  ServLine.SETFILTER("Quantity Invoiced",'>0');
                                                                  IF ServLine.FIND('-') THEN
                                                                    ERROR(Text037,FIELDCAPTION("Service Price Group Code"));
                                                                END;

                                                                IF CurrFieldNo = FIELDNO("Service Price Group Code") THEN
                                                                  IF CheckServLineExist THEN BEGIN
                                                                    ServLine.SETRANGE("Price Adjmt. Status",ServLine."Price Adjmt. Status"::Adjusted);
                                                                    IF ServLine.FIND('-') THEN BEGIN
                                                                      IF NOT CONFIRM(STRSUBSTNO(Text038,ServLine.TABLECAPTION),FALSE) THEN
                                                                        ERROR(Text039);
                                                                      ServPriceMgmt.ResetAdjustedLines(ServLine);
                                                                    END;
                                                                    ServLine.SETRANGE("Price Adjmt. Status");
                                                                  END;

                                                                IF "Service Price Group Code" <> '' THEN BEGIN
                                                                  ServPriceMgmt.GetServPriceGrSetup(ServPriceGrSetup,ServHeader,Rec);
                                                                  "Serv. Price Adjmt. Gr. Code" := ServPriceGrSetup."Serv. Price Adjmt. Gr. Code";
                                                                  "Adjustment Type" := ServPriceGrSetup."Adjustment Type";
                                                                  "Base Amount to Adjust" := ServPriceGrSetup.Amount;
                                                                END ELSE BEGIN
                                                                  "Serv. Price Adjmt. Gr. Code" := '';
                                                                  CLEAR("Adjustment Type");
                                                                  "Base Amount to Adjust" := 0;
                                                                END;

                                                                IF ServLine.FIND('-') THEN
                                                                  REPEAT
                                                                    ServLine."Service Price Group Code" := "Service Price Group Code";
                                                                    ServLine."Serv. Price Adjmt. Gr. Code" := "Serv. Price Adjmt. Gr. Code";
                                                                    ServLine.MODIFY;
                                                                  UNTIL ServLine.NEXT = 0;
                                                              END;

                                                   CaptionML=[ENU=Service Price Group Code;
                                                              ESM=C¢d. grupo precio serv.;
                                                              FRC=Code groupe prix de service;
                                                              ENC=Service Price Group Code] }
    { 33  ;   ;Fault Area Code     ;Code10        ;TableRelation="Fault Area";
                                                   OnValidate=VAR
                                                                ServPriceMgmt@1000 : Codeunit 6080;
                                                              BEGIN
                                                                IF (CurrFieldNo = FIELDNO("Fault Area Code")) AND
                                                                   ("Fault Area Code" <> xRec."Fault Area Code")
                                                                THEN BEGIN
                                                                  IF CheckServLineExist AND ("Service Price Group Code" <> '') THEN BEGIN
                                                                    ServLine.RESET;
                                                                    ServLine.SETCURRENTKEY("Document Type","Document No.","Service Item Line No.");
                                                                    ServLine.SETRANGE("Document Type","Document Type");
                                                                    ServLine.SETRANGE("Document No.","Document No.");
                                                                    ServLine.SETRANGE("Service Item Line No.","Line No.");
                                                                    ServLine.SETRANGE("Price Adjmt. Status",ServLine."Price Adjmt. Status"::Adjusted);
                                                                    IF ServLine.FIND('-') THEN BEGIN
                                                                      IF NOT CONFIRM(STRSUBSTNO(Text038,ServLine.TABLECAPTION),FALSE) THEN
                                                                        ERROR(Text039);
                                                                      ServPriceMgmt.ResetAdjustedLines(ServLine);
                                                                    END;
                                                                  END;
                                                                  VALIDATE("Service Price Group Code");
                                                                  "Fault Code" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Fault Area Code;
                                                              ESM=C¢d.  rea defecto;
                                                              FRC=Code zone panne;
                                                              ENC=Fault Area Code] }
    { 34  ;   ;Symptom Code        ;Code10        ;TableRelation="Symptom Code";
                                                   OnValidate=BEGIN
                                                                IF "Symptom Code" <> xRec."Symptom Code" THEN
                                                                  "Fault Code" := '';
                                                              END;

                                                   CaptionML=[ENU=Symptom Code;
                                                              ESM=C¢d. s¡ntoma;
                                                              FRC=Code symptme;
                                                              ENC=Symptom Code] }
    { 35  ;   ;Fault Code          ;Code10        ;TableRelation="Fault Code".Code WHERE (Fault Area Code=FIELD(Fault Area Code),
                                                                                          Symptom Code=FIELD(Symptom Code));
                                                   CaptionML=[ENU=Fault Code;
                                                              ESM=C¢d. defecto;
                                                              FRC=Code panne;
                                                              ENC=Fault Code] }
    { 36  ;   ;Resolution Code     ;Code10        ;TableRelation="Resolution Code";
                                                   CaptionML=[ENU=Resolution Code;
                                                              ESM=C¢d. resoluci¢n;
                                                              FRC=Code solution;
                                                              ENC=Resolution Code] }
    { 37  ;   ;Fault Comment       ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Service Comment Line" WHERE (Table Name=CONST(Service Header),
                                                                                                   Table Subtype=FIELD(Document Type),
                                                                                                   No.=FIELD(Document No.),
                                                                                                   Type=CONST(Fault),
                                                                                                   Table Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Fault Comment;
                                                              ESM=Comentario defecto;
                                                              FRC=Commentaire panne;
                                                              ENC=Fault Comment];
                                                   Editable=No }
    { 38  ;   ;Resolution Comment  ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Service Comment Line" WHERE (Table Name=CONST(Service Header),
                                                                                                   Table Subtype=FIELD(Document Type),
                                                                                                   No.=FIELD(Document No.),
                                                                                                   Type=CONST(Resolution),
                                                                                                   Table Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Resolution Comment;
                                                              ESM=Comentario resoluci¢n;
                                                              FRC=Commentaire solution;
                                                              ENC=Resolution Comment];
                                                   Editable=No }
    { 40  ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=BEGIN
                                                                IF "Service Item No." <> '' THEN
                                                                  ERROR(
                                                                    Text016,
                                                                    FIELDCAPTION("Variant Code"),FIELDCAPTION("Service Item No."))
                                                              END;

                                                   CaptionML=[ENU=Variant Code;
                                                              ESM=C¢d. variante;
                                                              FRC=Code variante;
                                                              ENC=Variant Code] }
    { 41  ;   ;Service Item Loaner Comment;Boolean;FieldClass=FlowField;
                                                   CalcFormula=Exist("Service Comment Line" WHERE (Table Name=CONST(Service Header),
                                                                                                   Table Subtype=FIELD(Document Type),
                                                                                                   No.=FIELD(Document No.),
                                                                                                   Type=CONST(Service Item Loaner),
                                                                                                   Table Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Service Item Loaner Comment;
                                                              ESM=Coment. prestado prod. serv.;
                                                              FRC=Comment. service article prt;
                                                              ENC=Service Item Loaner Comment];
                                                   Editable=No }
    { 42  ;   ;Actual Response Time (Hours);Decimal;
                                                   CaptionML=[ENU=Actual Response Time (Hours);
                                                              ESM=Tiempo respuesta real (Horas);
                                                              FRC=Temps de rponse rel (heures);
                                                              ENC=Actual Response Time (Hours)];
                                                   DecimalPlaces=0:5 }
    { 43  ;   ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              ESM=Tipo documento;
                                                              FRC=Type de document;
                                                              ENC=Document Type];
                                                   OptionCaptionML=[ENU=Quote,Order;
                                                                    ESM=Cotizaci¢n,Pedido;
                                                                    FRC=Devis,Commande;
                                                                    ENC=Quote,Order];
                                                   OptionString=Quote,Order;
                                                   Editable=No }
    { 44  ;   ;Serv. Price Adjmt. Gr. Code;Code10 ;TableRelation="Service Price Adjustment Group";
                                                   CaptionML=[ENU=Serv. Price Adjmt. Gr. Code;
                                                              ESM=C¢d. grupo ajuste precio serv.;
                                                              FRC=Code groupe rajust. prix serv.;
                                                              ENC=Serv. Price Adjmt. Gr. Code];
                                                   Editable=No }
    { 45  ;   ;Adjustment Type     ;Option        ;CaptionML=[ENU=Adjustment Type;
                                                              ESM=Tipo ajuste;
                                                              FRC=Type ajustement;
                                                              ENC=Adjustment Type];
                                                   OptionCaptionML=[ENU=Fixed,Maximum,Minimum;
                                                                    ESM=Fijo,M ximo,M¡nimo;
                                                                    FRC=Fixe,Maximum,Minimum;
                                                                    ENC=Fixed,Maximum,Minimum];
                                                   OptionString=Fixed,Maximum,Minimum;
                                                   Editable=No }
    { 46  ;   ;Base Amount to Adjust;Decimal      ;CaptionML=[ENU=Base Amount to Adjust;
                                                              ESM=Importe base a ajustar;
                                                              FRC=Montant base  ajuster;
                                                              ENC=Base Amount to Adjust];
                                                   Editable=No }
    { 60  ;   ;No. of Active/Finished Allocs;Integer;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Count("Service Order Allocation" WHERE (Document Type=FIELD(Document Type),
                                                                                                       Document No.=FIELD(Document No.),
                                                                                                       Service Item Line No.=FIELD(Line No.),
                                                                                                       Resource No.=FIELD(Resource Filter),
                                                                                                       Resource Group No.=FIELD(Resource Group Filter),
                                                                                                       Allocation Date=FIELD(Allocation Date Filter),
                                                                                                       Status=FILTER(Active|Finished)));
                                                   CaptionML=[ENU=No. of Active/Finished Allocs;
                                                              ESM=N§ asignaciones activas/term.;
                                                              FRC=Nbre affect. actives/termines;
                                                              ENC=No. of Active/Finished Allocs];
                                                   Editable=No }
    { 61  ;   ;No. of Allocations  ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Service Order Allocation" WHERE (Status=FIELD(Allocation Status Filter),
                                                                                                       Resource No.=FIELD(Resource Filter),
                                                                                                       Resource Group No.=FIELD(Resource Group Filter),
                                                                                                       Document Type=FIELD(Document Type),
                                                                                                       Document No.=FIELD(Document No.),
                                                                                                       Service Item Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=No. of Allocations;
                                                              ESM=N§ de asignaciones;
                                                              FRC=Nbre affectations;
                                                              ENC=No. of Allocations];
                                                   Editable=No }
    { 62  ;   ;No. of Previous Services;Integer   ;FieldClass=FlowField;
                                                   CalcFormula=Count("Service Shipment Item Line" WHERE (Item No.=FIELD(Item No.),
                                                                                                         Serial No.=FIELD(Serial No.)));
                                                   CaptionML=[ENU=No. of Previous Services;
                                                              ESM=N§ servicios previos;
                                                              FRC=Nø services prcdents;
                                                              ENC=No. of Previous Services];
                                                   Editable=No }
    { 63  ;   ;Contract Line No.   ;Integer       ;TableRelation="Service Contract Line"."Line No." WHERE (Contract Type=CONST(Contract),
                                                                                                           Contract No.=FIELD(Contract No.));
                                                   CaptionML=[ENU=Contract Line No.;
                                                              ESM=N§ l¡nea contrato;
                                                              FRC=Nø ligne contrat;
                                                              ENC=Contract Line No.] }
    { 64  ;   ;Ship-to Code        ;Code10        ;TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD(Customer No.));
                                                   CaptionML=[ENU=Ship-to Code;
                                                              ESM=C¢d. direcci¢n env¡o cliente;
                                                              FRC=Code de livraison;
                                                              ENC=Ship-to Code];
                                                   Editable=No }
    { 65  ;   ;Customer No.        ;Code20        ;TableRelation=Customer.No.;
                                                   CaptionML=[ENU=Customer No.;
                                                              ESM=N§ cliente;
                                                              FRC=Nø client;
                                                              ENC=Customer No.];
                                                   Editable=No }
    { 91  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Date Filter;
                                                              ESM=Filtro fecha;
                                                              FRC=Filtre date;
                                                              ENC=Date Filter] }
    { 92  ;   ;Resource Filter     ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation=Resource;
                                                   CaptionML=[ENU=Resource Filter;
                                                              ESM=Filtro recurso;
                                                              FRC=Filtre ressource;
                                                              ENC=Resource Filter] }
    { 93  ;   ;Allocation Date Filter;Date        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Allocation Date Filter;
                                                              ESM=Filtro fecha asignaci¢n;
                                                              FRC=Filtre date affectation;
                                                              ENC=Allocation Date Filter] }
    { 94  ;   ;Repair Status Code Filter;Code10   ;FieldClass=FlowFilter;
                                                   TableRelation="Repair Status".Code;
                                                   CaptionML=[ENU=Repair Status Code Filter;
                                                              ESM=Filtro c¢d. estado reparaci¢n;
                                                              FRC=Filtre code tat rparation;
                                                              ENC=Repair Status Code Filter] }
    { 96  ;   ;Allocation Status Filter;Option    ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Allocation Status Filter;
                                                              ESM=Filtro estado asignaci¢n;
                                                              FRC=Filtre tat affectation;
                                                              ENC=Allocation Status Filter];
                                                   OptionCaptionML=[ENU=Nonactive,Active,Finished,Canceled,Reallocation Needed;
                                                                    ESM=Inactivo,Activo,Terminado,Cancelado,Necesita reasignac.;
                                                                    FRC=Non active,Actif,Achev,Annule,Raffectation ncessaire;
                                                                    ENC=Nonactive,Active,Finished,Cancelled,Reallocation Needed];
                                                   OptionString=Nonactive,Active,Finished,Canceled,Reallocation Needed }
    { 97  ;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   CaptionML=[ENU=Responsibility Center;
                                                              ESM=Centro responsabilidad;
                                                              FRC=Centre de gestion;
                                                              ENC=Responsibility Centre];
                                                   Editable=No }
    { 98  ;   ;Service Order Filter;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation="Service Header".No.;
                                                   CaptionML=[ENU=Service Order Filter;
                                                              ESM=Filtro pedido servicio;
                                                              FRC=Filtre commande service;
                                                              ENC=Service Order Filter] }
    { 99  ;   ;Resource Group Filter;Code20       ;FieldClass=FlowFilter;
                                                   TableRelation="Resource Group";
                                                   CaptionML=[ENU=Resource Group Filter;
                                                              ESM=Filtro grupo recurso;
                                                              FRC=Filtre groupe ressources;
                                                              ENC=Resource Group Filter] }
    { 100 ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ESM=C¢d. dim. acceso dir. 1;
                                                              FRC=Code raccourci de dimension 1;
                                                              ENC=Shortcut Dimension 1 Code];
                                                   CaptionClass='1,2,1' }
    { 101 ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ESM=C¢d. dim. acceso dir. 2;
                                                              FRC=Code raccourci de dimension 2;
                                                              ENC=Shortcut Dimension 2 Code];
                                                   CaptionClass='1,2,2' }
    { 130 ;   ;Release Status      ;Option        ;CaptionML=[ENU=Release Status;
                                                              ESM=Estado lanzamiento;
                                                              FRC=tat de lancement;
                                                              ENC=Release Status];
                                                   OptionCaptionML=[ENU=Open,Released to Ship;
                                                                    ESM=Abrir,Lanzado al env¡o;
                                                                    FRC=Ouvert,Lancer pour livraison;
                                                                    ENC=Open,Released to Ship];
                                                   OptionString=Open,Released to Ship }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              ESM=Id. grupo dimensiones;
                                                              FRC=Code ensemble de dimensions;
                                                              ENC=Dimension Set ID];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Document Type,Document No.,Line No.     ;Clustered=Yes }
    {    ;Document No.,Line No.,Document Type      }
    {    ;Document Type,Document No.,Service Item No.,Contract No.,Contract Line No.;
                                                   MaintainSQLIndex=No }
    {    ;Service Item No.                         }
    {    ;Document Type,Document No.,Response Date,Response Time }
    {    ;Response Date,Response Time,Priority     }
    {    ;Loaner No.                               }
    {    ;Document Type,Document No.,Starting Date,Starting Time;
                                                   MaintainSQLIndex=No }
    {    ;Document Type,Document No.,Finishing Date,Finishing Time;
                                                   MaintainSQLIndex=No }
    {    ;Fault Reason Code                        }
    {    ;Contract No.                             }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=The %1 allows only one %2 in each %3.;ESM=El %1 permite s¢lo un %2 en cada %3.;FRC=%1 ne permet de dfinir qu''une %2 par %3.;ENC=The %1 allows only one %2 in each %3.';
      Text001@1001 : TextConst 'ENU=You cannot insert %1, because %2 is missing in %3 %4.\\You can create a customer by clicking Functions,Create Customer.;ESM=No puede insertar %1, porque falta %2 en %3 %4.\\Puede crear un cliente haciendo clic en Acciones, Crear cliente.;FRC=Vous ne pouvez pas insrer de %1, car il manque un %2 dans une %3 %4.\\Vous pouvez crer un client en cliquant sur Fonctions, Crer client.;ENC=You cannot insert %1, because %2 is missing in %3 %4.\\You can create a customer by clicking Functions,Create Customer.';
      Text002@1002 : TextConst 'ENU=You cannot insert %1, because %2 is missing in %3 %4.;ESM=No puede insertar %1, porque falta %2 en %3 %4.;FRC=Vous ne pouvez pas insrer de %1, car il manque un %2 dans une %3 %4.;ENC=You cannot insert %1, because %2 is missing in %3 %4.';
      Text003@1003 : TextConst 'ENU=You have changed one of the fault reporting codes on the %1, but it has not been changed on the existing service lines. You must update the existing service lines manually.;ESM=Ha cambiado uno de los c¢digos de informe de defectos en %1, pero el mismo no se cambi¢ en las l¡neas de servicio existentes. Debe actualizar manualmente las l¡neas de servicio existentes.;FRC=Vous avez modifi un des codes rapport panne dans le/la %1, mais il ne l''a pas t dans les lignes service existantes. Vous devez mettre  jour les lignes service existantes manuellement.;ENC=You have changed one of the fault reporting codes on the %1, but it has not been changed on the existing service lines. You must update the existing service lines manually.';
      Text006@1006 : TextConst 'ENU=You cannot delete %1 %2,%3, because %4 %5 has not been received.;ESM=No puede borrar %1 %2,%3, porque %4 %5 no ha sido recibido.;FRC=Vous ne pouvez pas supprimer la %1 %2, %3, car l''%4 %5 n''a pas t rceptionn.;ENC=You cannot delete %1 %2,%3, because %4 %5 has not been received.';
      Text008@1007 : TextConst 'ENU=You cannot delete %1 %2,%3, because %4 is attached to it.;ESM=No puede eliminar %1 %2,%3, porque %4 est  anexado a l.;FRC=Vous ne pouvez pas supprimer la %1 %2, %3, car il existe une %4 lie.;ENC=You cannot delete %1 %2,%3, because %4 is attached to it.';
      Text010@1008 : TextConst 'ENU=You cannot rename a %1.;ESM=No se puede cambiar el nombre a %1.;FRC=Vous ne pouvez pas renommer un %1.;ENC=You cannot rename a %1.';
      Text011@1009 : TextConst 'ENU=You cannot change the %1 on the %2, because %3 is attached to it.;ESM=No puede eliminar el %1 en el %2, porque %3 est  anexado a l.;FRC=Vous ne pouvez pas modifier le %1 sur la %2, car il existe une %3 lie.;ENC=You cannot change the %1 on the %2, because %3 is attached to it.';
      Text012@1010 : TextConst 'ENU=%1 %2 does not belong to %3 %4.;ESM=%1 %2 no pertenece a %3 %4.;FRC=L''%1 %2 n''appartient pas au %3 %4.;ENC=%1 %2 does not belong to %3 %4.';
      Text016@1014 : TextConst 'ENU=You cannot change the %1 field because it is linked to the %2 specified on the line.;ESM=No puede modificar el campo %1 porque est  relacionado con el %2 especificado en la l¡nea.;FRC=Vous ne pouvez pas modifier le champ %1, car il est li au %2 spcifi sur la ligne.;ENC=You cannot change the %1 field because it is linked to the %2 specified on the line.';
      Text018@1016 : TextConst 'ENU=The %1 cannot be greater than the %2 %3.;ESM=El %1 no puede ser mayor que el %2 %3.;FRC=%1 doit tre infrieur(e)  %3 dans %2.;ENC=The %1 cannot be greater than the %2 %3.';
      Text019@1017 : TextConst 'ENU=The %1 cannot be earlier than the %2.;ESM=El %1 no puede ser anterior al %2.;FRC=%2 doit tre antrieure  %1.;ENC=The %1 cannot be earlier than the %2.';
      Text020@1018 : TextConst 'ENU=The %1 cannot be greater than the %2.;ESM=El %1 no puede ser mayor que el %2.;FRC=Le %1 ne peut pas tre suprieur au %2.;ENC=The %1 cannot be greater than the %2.';
      Text022@1020 : TextConst 'ENU=The %1 cannot be earlier than the %2 %3.;ESM=El %1 no puede ser anterior que el %2 %3.;FRC=%1 doit tre antrieure  %2 dans %3.;ENC=The %1 cannot be earlier than the %2 %3.';
      Text023@1021 : TextConst 'ENU=You cannot change the warranty information because %1 is selected.;ESM=No puede modificar la informaci¢n sobre garant¡a porque est  seleccionado %1.;FRC=Vous ne pouvez pas modifier les informations de la garantie car %1 est slectionn.;ENC=You cannot change the warranty information because %1 is selected.';
      Text024@1022 : TextConst 'ENU=Do you want to activate a warranty for this service item line?;ESM=¨Desea activar una garant¡a para esta l¡nea prod. servicio?;FRC=Souhaitez-vous dfinir une garantie pour cette ligne article de service ?;ENC=Do you want to activate a warranty for this service item line?';
      Text025@1023 : TextConst 'ENU=Do you want to deactivate the warranty for this service item line?;ESM=¨Confirma que desea desactivar la garant¡a para esta l¡nea prod. servicio?;FRC=Souhaitez-vous supprimer la garantie pour cette ligne article de service ?;ENC=Do you want to deactivate the warranty for this service item line?';
      Text026@1024 : TextConst 'ENU=You cannot reset the %1 field.\You can receive it by clicking Functions, Receive Loaner.;ESM=No se puede restablecer el campo %1.\Para recibirlo, haga clic en Funciones, Recibir prod. prestado.;FRC=Vous ne pouvez pas supprimer la valeur du champ %1.\Vous pouvez la recevoir en cliquant sur Fonctions, Rceptionner article de prt.;ENC=You cannot reset the %1 field.\You can receive it by clicking Functions, Receive Loaner.';
      Text028@1026 : TextConst '@@@="1%=FIELDCAPTION(""Loaner No.""); 2%=FORMAT(ServHeader.""Document Type""); 3%=ServHeader.FIELDCAPTION(""No.""); 4%=ServHeader.""No."");";ENU=You cannot change the %1, because it has been lent in connection with %2 %3 %4.\\You can receive it by clicking Functions, Receive Loaner.;ESM=No se puede cambiar %1 porque se ha prestado en relaci¢n con %2 %3 %4\\Para recibirlo, haga clic en Funciones, Recibir prod. prestado.;FRC=Vous ne pouvez pas modifier la valeur de %1, car elle a t prte via %2 %3 %4.\\ Vous pouvez la recevoir en cliquant sur Fonctions, Rceptionner article de prt.;ENC=You cannot change the %1, because it has been lent in connection with %2 %3 %4.\\You can receive it by clicking Functions, Receive Loaner.';
      Text029@1027 : TextConst 'ENU=Do you want to lend %1 %2?;ESM=¨Confirma que desea prestar %1 %2?;FRC=Souhaitez-vous prter %1 %2 ?;ENC=Do you want to lend %1 %2?';
      Text030@1028 : TextConst '@@@="1%=TempServItemLine.FIELDCAPTION(""Loaner No.""); 2%=TempServItemLine.""Loaner No.""; 3%=FORMAT(ServHeader.""Document Type""); 4%=ServHeader.FIELDCAPTION(""No.""); 5%=ServHeader.""No."");";ENU=%1 %2 has already been lent within %3 %4 %5.;ESM=Ya se ha prestado %1 %2 en %3 %4 %5.;FRC=%1 %2 a dj t prt dans %3 %4 %5.;ENC=%1 %2 has already been lent within %3 %4 %5.';
      ServMgtSetup@1035 : Record 5911;
      ServOrderAlloc@1031 : Record 5950;
      ServItem@1032 : Record 5940;
      ServContract@1033 : Record 5965;
      ServLine@1034 : Record 5902;
      ServItemLine@1036 : Record 5901;
      ServHour@1037 : Record 5910;
      ServHour2@1038 : Record 5910;
      ServHeader@1039 : Record 5900;
      ServHeader2@1066 : Record 5900;
      ServHeader3@1068 : Record 5900;
      ServCommentLine@1040 : Record 5906;
      ServItemGr@1041 : Record 5904;
      RepairStatus@1042 : Record 5927;
      RepairStatus2@1063 : Record 5927;
      Loaner@1044 : Record 5913;
      LoanerEntry@1045 : Record 5914;
      ServContractLine@1043 : Record 5964;
      Item@1047 : Record 27;
      ServLogMgt@1049 : Codeunit 5906;
      ServOrderAllocMgt@1050 : Codeunit 5930;
      ServOrderMgt@1051 : Codeunit 5900;
      SegManagement@1052 : Codeunit 5051;
      ServLoanerMgt@1053 : Codeunit 5901;
      DimMgt@1087 : Codeunit 408;
      NoOfRec@1054 : Integer;
      TempDay@1055 : Integer;
      FirstServItemLine@1056 : Boolean;
      TempDate@1057 : Date;
      Text033@1059 : TextConst 'ENU=A service item line cannot belong to a service contract and to a service price group at the same time.;ESM=Una l¡nea de producci¢n de servicio no puede pertenecer a un Contrato de Servicio y a un grupo de precios de servicio al mismo tiempo.;FRC=Une ligne d''article de service ne peut appartenir  un contrat de service et  un groupe de prix de service en mme temps.;ENC=A service item line cannot belong to a service contract and to a service price group at the same time.';
      Text035@1061 : TextConst 'ENU=The %1 %2 cannot be used in service orders.;ESM=El %1 %2 no se puede util. en ¢rd. servicio.;FRC=L''%1 %2 ne peut pas tre utilis(e) dans les commandes service.;ENC=The %1 %2 cannot be used in service orders.';
      Text036@1062 : TextConst 'ENU=The %1 %2 cannot be used in service quotes.;ESM=El %1 %2 no se puede util. en ofer. servicio.;FRC=L''%1 %2 ne peut pas tre utilis(e) dans les devis service.;ENC=The %1 %2 cannot be used in service quotes.';
      RepairStatusPriority@1065 : Integer;
      UseLineNo@1064 : Integer;
      Text037@1069 : TextConst 'ENU=It is not possible to select %1 because some linked service lines have been posted.;ESM=No se puede seleccionar %1 porque algunas l¡neas de servicio relacionadas han sido registradas.;FRC=Il n''est pas possible de slectionner le %1, car certaines lignes de service associes ont t reportes.;ENC=It is not possible to select %1 because some linked service lines have been posted.';
      LoanerLent@1004 : Boolean;
      ServContractExist@1071 : Boolean;
      Text038@1070 : TextConst 'ENU=Price adjustment on each existing %1 will be canceled. Continue?;ESM=Se cancelar  el ajuste de precio de cada %1. ¨Desea continuar?;FRC=L''ajustement des prix sur chaque %1 existant sera annul. Dsirez-vous continuer?;ENC=Price adjustment on each existing %1 will be cancelled. Continue?';
      Text039@1046 : TextConst 'ENU=The update has been interrupted to respect the warning.;ESM=Se ha interrumpido la actualizaci¢n para respetar la advertencia.;FRC=La mise  jour a t interrompue pour respecter l''avertissement.;ENC=The update has been interrupted to respect the warning.';
      HideDialogBox@1072 : Boolean;
      Text040@1073 : TextConst 'ENU=The selected %1 has a different %2 for this %3.\\Do you want to continue?;ESM=El %1 seleccionado tiene un %2 diferente para este %3.\\¨Desea continuar?;FRC=L''%1 a un %2 diffrent pour ce %3.\\Souhaitez-vous continuer ?;ENC=The selected %1 has a different %2 for this %3.\\Do you want to continue?';
      Text041@1074 : TextConst '@@@="1%=ServHour.FIELDCAPTION(""Starting Time""); 2%=ServHour.Day; 3%=Text058=''Service Hours''; %4=ServHour.FIELDCAPTION(""Service Contract No."");%5=""Contract No."");";ENU=You must specify %1 on %2 in the %3 window for the %4 %5.;ESM=Debe indicar %1 en %2 en la ventana %3 para el %4 %5.;FRC=Vous devez spcifier %1 sur %2 dans la fentre %3 pour le %4 %5.;ENC=You must specify %1 on %2 in the %3 window for the %4 %5.';
      Text042@1075 : TextConst 'ENU=You must specify %1 on %2 in the %3 window.;ESM=Debe indicar %1 en %2 en la ventana %3.;FRC=Vous devez spcifier %1 sur %2 dans la fentre %3.;ENC=You must specify %1 on %2 in the %3 window.';
      Text043@1076 : TextConst '@@@="3%=FIELDCAPTION(""Starting Date""); 4%=ServHour.""Starting Date""; 6%=ServHour.FIELDCAPTION(""Service Contract No.""); 7%=""Contract No."");";ENU=You must specify %1 on %2, %3 %4 in the %5 window for the %6 %7.;ESM=Debe indicar %1 en %2, %3 %4 en la ventana %5 para el %6 %7.;FRC=Vous devez spcifier %1 sur %2, %3 %4 dans la fentre %5 pour le %6 %7.;ENC=You must specify %1 on %2, %3 %4 in the %5 window for the %6 %7.';
      Text044@1077 : TextConst '@@@="1%=ServHour.FIELDCAPTION(""Starting Time""); 2%=ServHour.Day; 3%=ServHour.FIELDCAPTION(""Starting Date""); 4%=ServHour.""Starting Date""; 5%=Text057=''Default Service Hours'';";ENU=You must specify %1 on %2, %3 %4 in the %5 window.;ESM=Debe indicar %1 en %2, %3 %4 en la ventana %5.;FRC=Vous devez spcifier %1 sur %2,  %3 %4 dans la fentre %5.;ENC=You must specify %1 on %2, %3 %4 in the %5 window.';
      Text045@1078 : TextConst 'ENU=The %1 for this %2 occurs in more than 1 year. Please verify the setting for service hours and the %3 for the %4.;ESM=El valor de %1 para %2 sucede en m s de 1 a¤o. Por favor, verifique la configuraci¢n de las horas de servicio y el valor de %3 en %4.;FRC=Le %1 pour ce %2 est prsent dans plus d''une anne. Veuillez vrifier le rglage des heures de service et le %3 pour le %4.;ENC=The %1 for this %2 occurs in more than 1 year. Please verify the setting for service hours and the %3 for the %4.';
      Text047@1080 : TextConst 'ENU=Service item %1 is included in more than one contract.\\Do you want to assign a contract number to the service order line?;ESM=El prod. servicio %1 est  incluido en m s de un contrato.\\¨Desea asignar un n£mero contrato a la l¡nea del pedido servicio?;FRC=L''article de service %1 est inclus dans plus d''un contrat.\\Voulez-vous attribuer un numro de contrat  la ligne de la commande de service?;ENC=Service item %1 is included in more than one contract.\\Do you want to assign a contract number to the service order line?';
      Text048@1011 : TextConst 'ENU=You cannot change the %1 because it has already been set on the header.;ESM=No puede modificar el %1 porque ya se ha definido en la cabecera.;FRC=Vous ne pouvez pas modifier le %1, puisqu''il a dj t dfini dans l''en-tte.;ENC=You cannot change the %1 because it has already been set on the header.';
      Text049@1012 : TextConst 'ENU=Contract %1 does not include service item %2.;ESM=El contrato %1 no incluye prod. servicio %2.;FRC=Le contrat %1 ne comprend pas l''article de service %2.;ENC=Contract %1 does not include service item %2.';
      Text050@1013 : TextConst 'ENU=Service contract %1 specified on the service order header does not include service item %2.;ESM=El Contrato de Servicio %1 especificado en la cabecera ped. servicio no incluye el prod. servicio %2.;FRC=Le contrat de service %1 spcifi dans l''en-tte de la commande de service ne comprend pas l''article de service %2.;ENC=Service contract %1 specified on the service order header does not include service item %2.';
      Text051@1081 : TextConst 'ENU=You cannot select contract %1 because it is owned by another customer.;ESM=No puede seleccionar el contrato %1 porque pertenece a otro cliente.;FRC=Vous ne pouvez pas slectionner le contrat %1, puisqu''il appartient  un autre client.;ENC=You cannot select contract %1 because it is owned by another customer.';
      Text052@1082 : TextConst 'ENU=Contract %1 is not signed.;ESM=No est  firmado el contrato %1.;FRC=Le contrat %1 n''est pas sign.;ENC=Contract %1 is not signed.';
      Text053@1083 : TextConst 'ENU=You cannot change the contract number because some of the service lines have already been posted.;ESM=No puede modificar el n£mero contrato porque alguna de las l¡neas ya se ha registrado.;FRC=Vous ne pouvez pas modifier le numro de contrat, car certaines lignes de service ont dj t reportes.;ENC=You cannot change the contract number because some of the service lines have already been posted.';
      Text054@1084 : TextConst 'ENU=If you change the contract number, the existing service lines for this order line will be re-created.\Do you want to continue?;ESM=Si modifica el n£mero contrato, las l¡neas servicio actuales para esta l¡nea pedido se volver n a crear.\¨Desea continuar?;FRC=Si vous modifiez le numro de contrat, les lignes de service existantes seront cres  nouveau pour cette ligne de commande.\Voulez-vous continuer?;ENC=If you change the contract number, the existing service lines for this order line will be re-created.\Do you want to continue?';
      UseServItemLineAsxRec@1079 : Boolean;
      SkipResponseTimeHrsUpdate@1085 : Boolean;
      Text055@1086 : TextConst '@@@="2%=FIELDCAPTION(""Loaner No.""); 3%=""Loaner No."";";ENU=You cannot change the %1 because %2 %3 has not been received.;ESM=No es posible cambiar el movimiento %1, no se ha recibido el %2 %3.;FRC=Vous ne pouvez pas modifier le %1, car %2 %3 n''a pas t reu.;ENC=You cannot change the %1 because %2 %3 has not been received.';

      Text056@1048 : TextConst
        'ENU=One or more service lines of %6 %7 and/or %8 exist for %1, %2 %3, %4 %5. There is a check mark in the %9 field of %10 %11, therefore %10 %11 cannot be applied to service line of %6 %7 and/or %8.\\ Do you want to apply it for other service lines?',
        'ESM=Una l¡nea o varias l¡neas de servicio de %6 %7 y/o %8 existen para %1, %2 %3, %4 %5. El campo %9 tiene una casilla de verificaci¢n de %10 %11, por lo tanto %10 %11 no se puede aplicar a la l¡nea de servicio de %6 %7 y/o %8.\\ ¨Desea aplicarlo para otras l¡neas de servicio?',
        'FRC="Une ou plusieurs lignes de service de %6 %7 et/ou %8 existent pour %1, %2 %3, %4 %5. Le champ %9 de %10 %11 est coch; %10 %11 ne peut donc pas tre affect  la ligne de service de %6 %7 et/ou %8.\\ Voulez-vous l''affecter  d''autres lignes de service?"',
        'ENC=One or more service lines of %6 %7 and/or %8 exist for %1, %2 %3, %4 %5. There is a check mark in the %9 field of %10 %11, therefore %10 %11 cannot be applied to service line of %6 %7 and/or %8.\\ Do you want to apply it for other service lines?';
      Text057@1102601000 : TextConst 'ENU=Default Service Hours;ESM=Horas servicio genr.;FRC=Heures de service par dfaut;ENC=Default Service Hours';
      Text058@1102601001 : TextConst 'ENU=Service Hours;ESM=Horas servicio;FRC=Heures de service;ENC=Service Hours';
      Text059@1102601002 : TextConst 'ENU=Default warranty duration is negative. The warranty cannot be activated.;ESM=La duraci¢n predeterminada de la garant¡a es negativa. No se puede activar la garant¡a.;FRC=La dure de garantie par dfaut est ngative. La garantie ne peut pas tre active.;ENC=Default warranty duration is negative. The warranty cannot be activated.';
      Text060@1015 : TextConst 'ENU=You may have changed a dimension.\\Do you want to update the lines?;ESM=Puede que haya cambiado una dimensi¢n.\\¨Desea actualizar las l¡neas?;FRC=Vous avez probablement modifi une dimension.\\Souhaitez-vous mettre  jour les lignesÿ?;ENC=You may have changed a dimension.\\Do you want to update the lines?';

    PROCEDURE SetUpNewLine@7();
    BEGIN
      IF ServHeader.GET("Document Type","Document No.") THEN BEGIN
        "Document Type" := ServHeader."Document Type";
        RepairStatus.RESET;
        RepairStatus.Initial := TRUE;
        "Repair Status Code" := RepairStatus.ReturnStatusCode(RepairStatus);
      END;
    END;

    PROCEDURE SetServHeader@8(VAR NewServHeader@1000 : Record 5900);
    BEGIN
      ServHeader := NewServHeader;
    END;

    LOCAL PROCEDURE GetServHeader@6();
    BEGIN
      IF ServHeader."No." <> "Document No." THEN
        ServHeader.GET("Document Type","Document No.");
    END;

    PROCEDURE CheckWarranty@3(Date@1000 : Date);
    VAR
      WarrantyLabor@1001 : Boolean;
      WarrantyParts@1002 : Boolean;
    BEGIN
      IF "Warranty Starting Date (Parts)" > "Warranty Ending Date (Parts)" THEN BEGIN
        VALIDATE("Warranty Starting Date (Parts)",0D);
        VALIDATE("Warranty Starting Date (Labor)",0D);
        ERROR(Text059);
      END;

      IF ((Date >= "Warranty Starting Date (Parts)") AND (Date <= "Warranty Ending Date (Parts)")) OR
         ((Date >= "Warranty Starting Date (Labor)") AND (Date <= "Warranty Ending Date (Labor)"))
      THEN
        Warranty := TRUE
      ELSE
        Warranty := FALSE;

      WarrantyParts := (Date >= "Warranty Starting Date (Parts)") AND (Date <= "Warranty Ending Date (Parts)");
      WarrantyLabor := (Date >= "Warranty Starting Date (Labor)") AND (Date <= "Warranty Ending Date (Labor)");
      ServLine.RESET;
      ServLine.SETCURRENTKEY("Document Type","Document No.","Service Item Line No.");
      ServLine.SETRANGE("Document Type","Document Type");
      ServLine.SETRANGE("Document No.","Document No.");
      ServLine.SETRANGE("Service Item Line No.","Line No.");

      ServLine.SETFILTER("Quantity Invoiced",'=0');

      IF ServLine.FIND('-') THEN
        REPEAT
          IF ServLine.Type = ServLine.Type::Item THEN BEGIN
            IF ServLine."Warranty Disc. %" <> "Warranty % (Parts)" THEN
              ServLine.VALIDATE("Warranty Disc. %","Warranty % (Parts)");
            IF WarrantyParts THEN BEGIN
              ServLine.Warranty := WarrantyParts;
              ServLine.VALIDATE("Fault Reason Code");
              ServLine.VALIDATE(Warranty);
            END ELSE BEGIN
              ServLine.Warranty := FALSE;
              ServLine."Exclude Warranty" := FALSE;
            END;
          END;
          IF ServLine.Type = ServLine.Type::Resource THEN BEGIN
            IF ServLine."Warranty Disc. %" <> "Warranty % (Labor)" THEN
              ServLine.VALIDATE("Warranty Disc. %","Warranty % (Labor)");
            IF WarrantyLabor THEN BEGIN
              ServLine.Warranty := WarrantyLabor;
              ServLine.VALIDATE("Fault Reason Code");
              ServLine.VALIDATE(Warranty);
            END ELSE BEGIN
              ServLine.Warranty := FALSE;
              ServLine."Exclude Warranty" := FALSE;
            END;
          END;
          ServLine.MODIFY;
        UNTIL ServLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckIfLoanerOnServOrder@5();
    VAR
      TempServItemLine@1000 : Record 5901;
    BEGIN
      LoanerLent := FALSE;
      IF "Loaner No." <> '' THEN BEGIN
        TempServItemLine.RESET;
        TempServItemLine.SETCURRENTKEY("Loaner No.");
        TempServItemLine.SETRANGE("Loaner No.","Loaner No.");
        IF TempServItemLine.FIND('-') THEN
          IF (TempServItemLine."Document Type" <> "Document Type") OR
             (TempServItemLine."Document No." <> "Document No.") OR
             (TempServItemLine."Line No." <> "Line No.")
          THEN
            LoanerLent := TRUE
          ELSE
            IF TempServItemLine.NEXT <> 0 THEN
              LoanerLent := TRUE;

        IF LoanerLent THEN BEGIN
          ServHeader.GET(
            TempServItemLine."Document Type",TempServItemLine."Document No.");

          ERROR(
            Text030,
            TempServItemLine.FIELDCAPTION("Loaner No."),TempServItemLine."Loaner No.",
            FORMAT(ServHeader."Document Type"),ServHeader.FIELDCAPTION("No."),
            ServHeader."No.");
        END;
      END;
    END;

    PROCEDURE CalculateResponseDateTime@1("Order Date"@1000 : Date;"Order Time"@1001 : Time);
    VAR
      CalChange@1007 : Record 7602;
      CalendarMgmt@1008 : Codeunit 7600;
      TotTime@1002 : Decimal;
      LastTotTime@1003 : Decimal;
      HoursLeft@1004 : Decimal;
      HoursOnLastDay@1005 : Decimal;
      Holiday@1006 : Boolean;
      CalendarCustomized@1010 : Boolean;
      NewDescription@1009 : Text[50];
      ContractServHourExist@1011 : Boolean;
      ErrorDate@1012 : Date;
      WholeResponseDays@1013 : Integer;
      StartingTime@1014 : Time;
    BEGIN
      ServMgtSetup.GET;
      ServMgtSetup.TESTFIELD("Base Calendar Code");
      CalendarCustomized :=
        CalendarMgmt.CustomizedChangesExist(CalChange."Source Type"::Service,'','',ServMgtSetup."Base Calendar Code");

      ServHour.RESET;
      IF "Contract No." <> '' THEN BEGIN
        IF CheckIfServHourExist("Contract No.") THEN BEGIN
          ContractServHourExist := TRUE;
          ServHour.SETRANGE("Service Contract Type",ServHour."Service Contract Type"::Contract);
          ServHour.SETRANGE("Service Contract No.","Contract No.")
        END ELSE BEGIN
          ServHour.SETRANGE("Service Contract Type",ServHour."Service Contract Type"::" ");
          ServHour.SETRANGE("Service Contract No.",'')
        END;
      END ELSE
        ServHour.SETRANGE("Service Contract No.",'');

      HoursLeft := "Response Time (Hours)";

      IF NOT ServHour.FINDFIRST THEN BEGIN
        WholeResponseDays := HoursLeft DIV 24;
        HoursOnLastDay := HoursLeft - WholeResponseDays * 24;
        IF CalendarMgmt.CalcTimeDelta("Order Time",000000T) / 3600000 + HoursOnLastDay >= 24 THEN BEGIN
          WholeResponseDays := WholeResponseDays + 1;
          HoursOnLastDay := HoursOnLastDay - 24;
        END;
        "Response Date" := "Order Date" + WholeResponseDays;
        "Response Time" := "Order Time" + HoursOnLastDay * 3600000;
        EXIT;
      END;
      IF "Order Date" = 0D THEN
        EXIT;
      TotTime := 0;
      LastTotTime := 0;
      TempDate := "Order Date";
      ErrorDate := "Order Date" + 365;
      HoursLeft := HoursLeft * 3600000;

      REPEAT
        TempDay := DATE2DWY(TempDate,1) - 1;
        HoursOnLastDay := 0;
        ServHour.SETFILTER("Starting Date",'<=%1',TempDate);
        ServHour.SETRANGE(Day,TempDay);
        IF ServHour.FINDLAST THEN BEGIN
          IF ServHour."Valid on Holidays" THEN
            Holiday := FALSE
          ELSE BEGIN
            IF CalendarCustomized THEN
              Holiday :=
                CalendarMgmt.CheckCustomizedDateStatus(
                  CalChange."Source Type"::Service,'','',ServMgtSetup."Base Calendar Code",TempDate,NewDescription)
            ELSE
              Holiday := CalendarMgmt.CheckDateStatus(ServMgtSetup."Base Calendar Code",TempDate,NewDescription);
          END;
          IF NOT Holiday THEN BEGIN
            IF TempDate = "Order Date" THEN BEGIN
              IF "Order Time" < ServHour."Ending Time" THEN BEGIN
                IF "Order Time" >= ServHour."Starting Time" THEN
                  StartingTime := "Order Time"
                ELSE
                  StartingTime := ServHour."Starting Time";

                IF HoursLeft > CalendarMgmt.CalcTimeDelta(ServHour."Ending Time",StartingTime) THEN BEGIN
                  TotTime := TotTime + CalendarMgmt.CalcTimeDelta(ServHour."Ending Time",StartingTime);
                  HoursOnLastDay := CalendarMgmt.CalcTimeDelta(ServHour."Ending Time",StartingTime);
                END ELSE BEGIN
                  TotTime := TotTime + HoursLeft;
                  HoursOnLastDay := HoursLeft;
                END;
              END;
            END ELSE BEGIN
              IF ServHour."Starting Time" = 0T THEN BEGIN
                IF ("Contract No." <> '') AND ContractServHourExist THEN BEGIN
                  IF ServHour."Starting Date" <> 0D THEN
                    ERROR(
                      Text043,
                      FIELDCAPTION("Starting Time"),
                      ServHour.Day,
                      FIELDCAPTION("Starting Date"),
                      ServHour."Starting Date",
                      Text058,
                      ServHour.FIELDCAPTION("Service Contract No."),
                      "Contract No.");

                  ERROR(
                    Text041,
                    ServHour.FIELDCAPTION("Starting Time"),
                    ServHour.Day,
                    Text058,
                    ServHour.FIELDCAPTION("Service Contract No."),
                    "Contract No.");
                END;
                IF ServHour."Starting Date" <> 0D THEN
                  ERROR(
                    Text044,
                    ServHour.FIELDCAPTION("Starting Time"),
                    ServHour.Day,
                    ServHour.FIELDCAPTION("Starting Date"),
                    ServHour."Starting Date",
                    Text057);

                ERROR(
                  Text042,
                  FIELDCAPTION("Starting Time"),
                  ServHour.Day,
                  Text057)
                ;
              END;

              IF ServHour."Ending Time" = 0T THEN BEGIN
                IF ("Contract No." <> '') AND ContractServHourExist THEN BEGIN
                  IF ServHour."Starting Date" <> 0D THEN
                    ERROR(
                      Text043,
                      ServHour.FIELDCAPTION("Ending Time"),
                      ServHour.Day,
                      ServHour.FIELDCAPTION("Starting Date"),
                      ServHour."Starting Date",
                      Text058,
                      ServHour.FIELDCAPTION("Service Contract No."),
                      "Contract No.");

                  ERROR(
                    Text041,
                    ServHour.FIELDCAPTION("Ending Time"),
                    ServHour.Day,
                    Text058,
                    ServHour.FIELDCAPTION("Service Contract No."),
                    "Contract No.");
                END;
                CheckServHourStartingDate(ServHour);
                ERROR(
                  Text042,
                  ServHour.FIELDCAPTION("Ending Time"),
                  ServHour.Day,
                  Text057)
                ;
              END;

              IF HoursLeft > CalendarMgmt.CalcTimeDelta(ServHour."Ending Time",ServHour."Starting Time") THEN BEGIN
                TotTime := TotTime + CalendarMgmt.CalcTimeDelta(ServHour."Ending Time",ServHour."Starting Time");
                HoursOnLastDay := CalendarMgmt.CalcTimeDelta(ServHour."Ending Time",ServHour."Starting Time");
              END ELSE BEGIN
                TotTime := TotTime + HoursLeft;
                HoursOnLastDay := HoursLeft;
              END;
            END;
            IF LastTotTime < TotTime THEN BEGIN
              HoursLeft := HoursLeft - (TotTime - LastTotTime);
              LastTotTime := TotTime;
            END;
          END;
        END;
        TempDate := TempDate + 1;
      UNTIL (HoursLeft <= 0) OR (TempDate > ErrorDate);

      CheckTempDateErrorDate(TempDate,ErrorDate,ServItem.FIELDCAPTION("Response Time (Hours)"),ServItem.TABLECAPTION);

      IF TotTime > 0 THEN BEGIN
        "Response Date" := TempDate - 1;
        IF ("Response Date" = "Order Date") AND ("Order Time" > ServHour."Starting Time") THEN
          "Response Time" := "Order Time" + HoursOnLastDay
        ELSE
          "Response Time" := ServHour."Starting Time" + HoursOnLastDay;
      END ELSE BEGIN
        "Response Date" := "Order Date";
        "Response Time" := "Order Time";
      END;
    END;

    LOCAL PROCEDURE CheckServLineExist@9() : Boolean;
    BEGIN
      IF "Line No." = 0 THEN
        EXIT(FALSE);
      ServLine.RESET;
      ServLine.SETCURRENTKEY("Document Type","Document No.","Service Item Line No.",Type);
      ServLine.SETRANGE("Document Type","Document Type");
      ServLine.SETRANGE("Document No.","Document No.");
      ServLine.SETRANGE("Service Item Line No.","Line No.");
      EXIT(ServLine.FIND('-'));
    END;

    LOCAL PROCEDURE CheckIfServHourExist@2(ContractNo@1000 : Code[20]) : Boolean;
    BEGIN
      IF ContractNo = '' THEN
        EXIT(FALSE);
      ServHour2.RESET;
      ServHour2.SETRANGE("Service Contract Type",ServHour."Service Contract Type"::Contract);
      ServHour2.SETRANGE("Service Contract No.",ContractNo);
      EXIT(ServHour2.FINDFIRST);
    END;

    LOCAL PROCEDURE UpdateStartFinishDateTime@12(DocumentType@1007 : Integer;DocumentNo@1000 : Code[20];"Line No."@1001 : Integer;StartingDate@1002 : Date;StartingTime@1003 : Time;FinishingDate@1004 : Date;FinishingTime@1005 : Time;Erasing@1006 : Boolean);
    VAR
      ServOrderMgt@1009 : Codeunit 5900;
      GoOut@1010 : Boolean;
      Modifyheader@1011 : Boolean;
    BEGIN
      IF NOT ServHeader3.GET(DocumentType,DocumentNo) THEN
        EXIT;

      ServItemLine.RESET;
      ServItemLine.SETCURRENTKEY("Document Type","Document No.","Starting Date");
      ServItemLine.SETRANGE("Document Type",ServHeader3."Document Type");
      ServItemLine.SETRANGE("Document No.",ServHeader3."No.");
      ServItemLine.SETFILTER("Starting Date",'<>%1',0D);
      ServItemLine.SETFILTER("Line No.",'<> %1',"Line No.");
      IF ServItemLine.FIND('-') THEN BEGIN
        IF Erasing THEN BEGIN
          StartingDate := ServItemLine."Starting Date";
          StartingTime := ServItemLine."Starting Time";
        END;
        REPEAT
          IF ServItemLine."Starting Date" < StartingDate THEN BEGIN
            StartingDate := ServItemLine."Starting Date";
            StartingTime := ServItemLine."Starting Time";
          END ELSE
            IF (ServItemLine."Starting Date" = StartingDate) AND
               (ServItemLine."Starting Time" < StartingTime)
            THEN
              StartingTime := ServItemLine."Starting Time";
        UNTIL ServItemLine.NEXT = 0
      END ELSE
        GoOut := TRUE;

      IF NOT GoOut THEN BEGIN
        ServItemLine.RESET;
        ServItemLine.SETCURRENTKEY("Document Type","Document No.","Finishing Date");
        ServItemLine.ASCENDING(FALSE);
        ServItemLine.SETRANGE("Document Type",ServHeader3."Document Type");
        ServItemLine.SETRANGE("Document No.",ServHeader3."No.");
        ServItemLine.SETFILTER("Finishing Date",'<>%1',0D);
        ServItemLine.SETFILTER("Line No.",'<> %1',"Line No.");
        IF ServItemLine.FIND('-') THEN
          REPEAT
            IF ServItemLine."Finishing Date" > FinishingDate THEN BEGIN
              FinishingDate := ServItemLine."Finishing Date";
              FinishingTime := ServItemLine."Finishing Time";
            END ELSE
              IF (ServItemLine."Finishing Date" = FinishingDate) AND
                 (ServItemLine."Finishing Time" > FinishingTime)
              THEN
                FinishingTime := ServItemLine."Finishing Time";
          UNTIL ServItemLine.NEXT = 0;
      END ELSE
        IF Erasing THEN BEGIN
          StartingDate := 0D;
          StartingTime := 0T;
          FinishingDate := 0D;
          FinishingTime := 0T;
        END;

      Modifyheader := FALSE;
      ServHeader3.CALCFIELDS("Contract Serv. Hours Exist");
      IF (ServHeader3."Starting Date" <> StartingDate) OR
         ((ServHeader3."Starting Date" = StartingDate) AND
          (ServHeader3."Starting Time" <> StartingTime))
      THEN BEGIN
        ServHeader3."Starting Date" := StartingDate;
        ServHeader3."Starting Time" := StartingTime;
        IF StartingDate <> 0D THEN
          ServHeader3."Actual Response Time (Hours)" :=
            ServOrderMgt.CalcServTime(
              ServHeader3."Order Date",ServHeader3."Order Time",StartingDate,StartingTime,
              ServHeader3."Contract No.",ServHeader3."Contract Serv. Hours Exist")
        ELSE
          ServHeader3."Actual Response Time (Hours)" := 0;
        Modifyheader := TRUE;
      END;

      IF ((ServHeader3.Status = ServHeader3.Status::Finished) OR
          GoOut) AND
         ((ServHeader3."Finishing Date" <> FinishingDate) OR
          ((ServHeader3."Finishing Date" = FinishingDate) AND
           (ServHeader3."Finishing Time" <> FinishingTime)))
      THEN BEGIN
        ServHeader3."Finishing Date" := FinishingDate;
        ServHeader3."Finishing Time" := FinishingTime;
        ServHeader3."Service Time (Hours)" :=
          ServOrderMgt.CalcServTime(
            StartingDate,StartingTime,FinishingDate,FinishingTime,
            ServHeader3."Contract No.",ServHeader3."Contract Serv. Hours Exist");
        Modifyheader := TRUE;
      END;

      IF Modifyheader THEN
        ServHeader3.MODIFY;
    END;

    PROCEDURE AssistEditSerialNo@10();
    VAR
      ItemLedgEntry@1000 : Record 32;
    BEGIN
      CLEAR(ItemLedgEntry);
      GetServHeader;
      ItemLedgEntry.SETCURRENTKEY("Source Type","Source No.","Item No.","Variant Code");
      ItemLedgEntry.SETRANGE("Source Type",ItemLedgEntry."Source Type"::Customer);
      ItemLedgEntry.SETRANGE("Source No.",ServHeader."Customer No.");
      IF "Item No." <> '' THEN
        ItemLedgEntry.SETRANGE("Item No.","Item No.");
      IF "Variant Code" <> '' THEN
        ItemLedgEntry.SETRANGE("Variant Code","Variant Code");
      ItemLedgEntry.SETFILTER("Serial No.",'<>%1','');
      IF PAGE.RUNMODAL(0,ItemLedgEntry) = ACTION::LookupOK THEN BEGIN
        IF "Item No." = '' THEN BEGIN
          IF Description + "Description 2" = '' THEN BEGIN
            Item.GET(ItemLedgEntry."Item No.");
            Description := Item.Description;
            "Description 2" := Item."Description 2";
          END;
          VALIDATE("Item No.",ItemLedgEntry."Item No.");
        END;
        VALIDATE("Serial No.",ItemLedgEntry."Serial No.");
      END;
    END;

    PROCEDURE SetHideDialogBox@4(DialogBoxVar@1000 : Boolean);
    BEGIN
      HideDialogBox := DialogBoxVar;
    END;

    LOCAL PROCEDURE GetItemTranslation@42() : Boolean;
    VAR
      ItemTranslation@1000 : Record 30;
    BEGIN
      GetServHeader;
      IF NOT ItemTranslation.GET("Item No.","Variant Code",ServHeader."Language Code") THEN
        EXIT(FALSE);

      Description := ItemTranslation.Description;
      "Description 2" := ItemTranslation."Description 2";

      EXIT(TRUE);
    END;

    PROCEDURE ShowComments@11(Type@1000 : 'General,Fault,Resolution,Accessory,Internal,Service Item Loaner');
    BEGIN
      ServHeader.GET("Document Type","Document No.");
      ServHeader.TESTFIELD("Customer No.");
      TESTFIELD("Line No.");

      ServCommentLine.RESET;
      ServCommentLine.SETRANGE("Table Name",ServCommentLine."Table Name"::"Service Header");
      ServCommentLine.SETRANGE("Table Subtype","Document Type");
      ServCommentLine.SETRANGE("No.","Document No.");
      CASE Type OF
        Type::Fault:
          ServCommentLine.SETRANGE(Type,ServCommentLine.Type::Fault);
        Type::Resolution:
          ServCommentLine.SETRANGE(Type,ServCommentLine.Type::Resolution);
        Type::Accessory:
          ServCommentLine.SETRANGE(Type,ServCommentLine.Type::Accessory);
        Type::Internal:
          ServCommentLine.SETRANGE(Type,ServCommentLine.Type::Internal);
        Type::"Service Item Loaner":
          ServCommentLine.SETRANGE(Type,ServCommentLine.Type::"Service Item Loaner");
      END;
      ServCommentLine.SETRANGE("Table Line No.","Line No.");
      PAGE.RUNMODAL(PAGE::"Service Comment Sheet",ServCommentLine);
    END;

    LOCAL PROCEDURE RecreateServLines@14(VAR ServLine2@1000 : Record 5902);
    VAR
      TempServLine@1001 : TEMPORARY Record 5902;
    BEGIN
      IF ServLine2.FIND('-') THEN BEGIN
        ServLine2.LOCKTABLE;
        REPEAT
          TempServLine := ServLine2;
          TempServLine.INSERT;
        UNTIL ServLine2.NEXT = 0;

        TempServLine.FIND('-');

        REPEAT
          ServLine2.GET(TempServLine."Document Type",TempServLine."Document No.",TempServLine."Line No.");
          ServLine2.SetHideReplacementDialog(TRUE);
          IF TempServLine."No." <> '' THEN BEGIN
            ServLine.SetHideCostWarning(TRUE);
            ServLine2.VALIDATE("No.",TempServLine."No.");
            ServLine2."Spare Part Action" := TempServLine."Spare Part Action";
            ServLine2."Component Line No." := TempServLine."Component Line No.";
            ServLine2."Replaced Item No." := TempServLine."Replaced Item No.";
            IF TempServLine.Quantity <> 0 THEN
              ServLine2.VALIDATE(Quantity,TempServLine.Quantity);
            ServLine2."Location Code" := TempServLine."Location Code";
            IF ServLine2.Type <> ServLine2.Type::" " THEN BEGIN
              IF ServLine2.Type = ServLine2.Type::Item THEN BEGIN
                ServLine2.VALIDATE("Variant Code",TempServLine."Variant Code");
                IF ServLine2."Location Code" <> '' THEN
                  ServLine2."Bin Code" := TempServLine."Bin Code";
              END;
              ServLine2.VALIDATE("Unit of Measure Code",TempServLine."Unit of Measure Code");
              ServLine2."Fault Reason Code" := TempServLine."Fault Reason Code";
              ServLine2."Exclude Warranty" := TempServLine."Exclude Warranty";
              ServLine2."Exclude Contract Discount" := TempServLine."Exclude Contract Discount";
              ServLine2.VALIDATE(Warranty,TempServLine.Warranty);
            END;
            ServLine2.Description := TempServLine.Description;
            ServLine2."Description 2" := TempServLine."Description 2";
          END;
          ServLine2.MODIFY(TRUE);
        UNTIL TempServLine.NEXT = 0;
        TempServLine.DELETEALL;
      END;
    END;

    LOCAL PROCEDURE CalculateResponseTimeHours@13() : Decimal;
    BEGIN
      IF "Contract No." <> '' THEN BEGIN
        IF "Service Item No." <> '' THEN BEGIN
          ServContractLine.RESET;
          ServContractLine.SETRANGE("Contract Type",ServContractLine."Contract Type"::Contract);
          ServContractLine.SETRANGE("Contract No.","Contract No.");
          ServContractLine.SETRANGE("Service Item No.","Service Item No.");
          IF ServContractLine.FINDFIRST THEN
            IF ServContractLine."Response Time (Hours)" > 0 THEN
              EXIT(ServContractLine."Response Time (Hours)");
        END;

        IF ServContract.GET(ServContract."Contract Type"::Contract,"Contract No.") THEN
          IF ServContract."Response Time (Hours)" > 0 THEN
            EXIT(ServContract."Response Time (Hours)");
      END;

      IF "Service Item No." <> '' THEN
        IF ServItem.GET("Service Item No.") THEN
          IF ServItem."Response Time (Hours)" > 0 THEN
            EXIT(ServItem."Response Time (Hours)");

      IF "Service Item Group Code" <> '' THEN
        IF ServItemGr.GET("Service Item Group Code") THEN
          IF ServItemGr."Default Response Time (Hours)" <> 0 THEN
            EXIT(ServItemGr."Default Response Time (Hours)");

      ServMgtSetup.GET;
      EXIT(ServMgtSetup."Default Response Time (Hours)");
    END;

    PROCEDURE UpdateResponseTimeHours@15();
    BEGIN
      IF NOT SkipResponseTimeHrsUpdate THEN BEGIN
        IF "Response Time (Hours)" <> xRec."Response Time (Hours)" THEN
          VALIDATE("Response Time (Hours)",CalculateResponseTimeHours)
        ELSE
          IF "Response Date" = 0D THEN
            VALIDATE("Response Time (Hours)",CalculateResponseTimeHours)
          ELSE
            "Response Time (Hours)" := CalculateResponseTimeHours;
        SkipResponseTimeHrsUpdate := FALSE
      END;
    END;

    PROCEDURE UpdateServiceOrderChangeLog@16(VAR OldServItemLine@1000 : Record 5901);
    BEGIN
      IF "Response Date" <> OldServItemLine."Response Date" THEN
        ServLogMgt.ServItemLineResponseDateChange(Rec,OldServItemLine);

      IF "Response Time" <> OldServItemLine."Response Time" THEN
        ServLogMgt.ServItemLineResponseTimeChange(Rec,OldServItemLine);

      IF "Repair Status Code" <> OldServItemLine."Repair Status Code" THEN
        ServLogMgt.ServHeaderRepairStatusChange(Rec,OldServItemLine);
    END;

    PROCEDURE CreateDim@26(Type1@1007 : Integer;No1@1005 : Code[20];Type2@1004 : Integer;No2@1003 : Code[20];Type3@1009 : Integer;No3@1002 : Code[20]);
    VAR
      SourceCodeSetup@1006 : Record 242;
      TableID@1001 : ARRAY [10] OF Integer;
      No@1000 : ARRAY [10] OF Code[20];
    BEGIN
      SourceCodeSetup.GET;

      IF "Document No." = '' THEN
        EXIT;

      GetServHeader;

      TableID[1] := Type1;
      No[1] := No1;
      TableID[2] := Type2;
      No[2] := No2;
      TableID[3] := Type3;
      No[3] := No3;

      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';

      "Dimension Set ID" :=
        DimMgt.GetDefaultDimID(
          TableID,No,SourceCodeSetup."Service Management",
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",
          ServHeader."Dimension Set ID",DATABASE::"Service Header");
      DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    LOCAL PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    END;

    PROCEDURE ShowDimensions@25();
    VAR
      OldDimSetID@1000 : Integer;
    BEGIN
      OldDimSetID := "Dimension Set ID";

      "Dimension Set ID" :=
        DimMgt.EditDimensionSet2(
          "Dimension Set ID",STRSUBSTNO('%1 %2 %3',"Document Type","Document No.","Line No."),
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");

      IF OldDimSetID <> "Dimension Set ID" THEN BEGIN
        MODIFY;
        IF ServLineExists THEN
          UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;
    END;

    LOCAL PROCEDURE ServLineExists@20() : Boolean;
    BEGIN
      ServLine.RESET;
      ServLine.SETRANGE("Document Type","Document Type");
      ServLine.SETRANGE("Document No.","Document No.");
      EXIT(ServLine.FIND('-'));
    END;

    PROCEDURE UpdateAllLineDim@41(NewParentDimSetID@1000 : Integer;OldParentDimSetID@1001 : Integer);
    VAR
      NewDimSetID@1002 : Integer;
    BEGIN
      // Update all lines with changed dimensions.

      IF NewParentDimSetID = OldParentDimSetID THEN
        EXIT;
      IF NOT CONFIRM(Text060) THEN
        EXIT;

      ServLine.RESET;
      ServLine.SETRANGE("Document Type","Document Type");
      ServLine.SETRANGE("Document No.","Document No.");
      ServLine.LOCKTABLE;
      IF ServLine.FIND('-') THEN
        REPEAT
          NewDimSetID := DimMgt.GetDeltaDimSetID(ServLine."Dimension Set ID",NewParentDimSetID,OldParentDimSetID);
          IF ServLine."Dimension Set ID" <> NewDimSetID THEN BEGIN
            ServLine."Dimension Set ID" := NewDimSetID;
            DimMgt.UpdateGlobalDimFromDimSetID(
              ServLine."Dimension Set ID",ServLine."Shortcut Dimension 1 Code",ServLine."Shortcut Dimension 2 Code");
            ServLine.MODIFY;
          END;
        UNTIL ServLine.NEXT = 0;
    END;

    PROCEDURE SetServItemInfo@17(ServItem@1000 : Record 5940);
    BEGIN
      "Item No." := ServItem."Item No.";
      "Serial No." := ServItem."Serial No.";
      "Variant Code" := ServItem."Variant Code";
      "Warranty Starting Date (Parts)" := ServItem."Warranty Starting Date (Parts)";
      "Warranty Ending Date (Parts)" := ServItem."Warranty Ending Date (Parts)";
      "Warranty Starting Date (Labor)" := ServItem."Warranty Starting Date (Labor)";
      "Warranty Ending Date (Labor)" := ServItem."Warranty Ending Date (Labor)";
      "Warranty % (Parts)" := ServItem."Warranty % (Parts)";
      "Warranty % (Labor)" := ServItem."Warranty % (Labor)";
      Description := ServItem.Description;
      "Description 2" := ServItem."Description 2";
      Priority := ServItem.Priority;
      "Vendor No." := ServItem."Vendor No.";
      "Vendor Item No." := ServItem."Vendor Item No.";
      CheckWarranty(ServHeader."Order Date");
    END;

    LOCAL PROCEDURE CheckTempDateErrorDate@18(Tempdate@1000 : Date;ErrorDate@1001 : Date;Caption1@1002 : Text[30];Caption2@1003 : Text[30]);
    BEGIN
      IF Tempdate > ErrorDate THEN
        ERROR(Text045,FIELDCAPTION("Response Date"),
          TABLECAPTION,
          Caption1,
          Caption2);
    END;

    LOCAL PROCEDURE CheckServHourStartingDate@22(ServiceHour@1000 : Record 5910);
    BEGIN
      IF ServiceHour."Starting Date" <> 0D THEN
        ERROR(
          Text044,
          ServiceHour.FIELDCAPTION("Ending Time"),
          ServiceHour.Day,
          ServiceHour.FIELDCAPTION("Starting Date"),
          ServiceHour."Starting Date",
          Text057);
    END;

    LOCAL PROCEDURE LendLoanerWithConfirmation@19();
    BEGIN
      IF "Loaner No." = '' THEN
        EXIT;
      IF CONFIRM(STRSUBSTNO(Text029,Loaner.TABLECAPTION,"Loaner No."),FALSE) THEN
        ServLoanerMgt.LendLoaner(Rec)
      ELSE
        "Loaner No." := '';
    END;

    BEGIN
    END.
  }
}

