OBJECT Table 9650 Custom Report Layout
{
  OBJECT-PROPERTIES
  {
    Date=09/15/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    OnInsert=BEGIN
               TESTFIELD("Report ID");
               SetUpdated;
             END;

    OnModify=BEGIN
               TESTFIELD("Report ID");
               SetUpdated;
             END;

    CaptionML=[ENU=Custom Report Layout;
               ESM=Dise¤o de informe personalizado;
               FRC=Pr‚sentation rapport personnalis‚;
               ENC=Custom Report Layout];
    LookupPageID=Page9650;
    DrillDownPageID=Page9650;
  }
  FIELDS
  {
    { 1   ;   ;ID                  ;Integer       ;AutoIncrement=Yes;
                                                   CaptionML=[ENU=ID;
                                                              ESM=Id.;
                                                              FRC=Code;
                                                              ENC=ID] }
    { 2   ;   ;Report ID           ;Integer       ;TableRelation=AllObjWithCaption."Object ID" WHERE (Object Type=CONST(Report));
                                                   CaptionML=[ENU=Report ID;
                                                              ESM=Id. informe;
                                                              FRC=Code rapport;
                                                              ENC=Report ID] }
    { 3   ;   ;Report Name         ;Text80        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObjWithCaption."Object Caption" WHERE (Object Type=CONST(Report),
                                                                                                                Object ID=FIELD(Report ID)));
                                                   CaptionML=[ENU=Report Name;
                                                              ESM=Nombre informe;
                                                              FRC=Nom de rapport;
                                                              ENC=Report Name];
                                                   Editable=No }
    { 4   ;   ;Company Name        ;Text30        ;TableRelation=Company;
                                                   CaptionML=[ENU=Company Name;
                                                              ESM=Nombre empresa;
                                                              FRC=Nom de compagnie;
                                                              ENC=Company Name] }
    { 6   ;   ;Type                ;Option        ;InitValue=Word;
                                                   CaptionML=[ENU=Type;
                                                              ESM=Tipo;
                                                              FRC=Type;
                                                              ENC=Type];
                                                   OptionCaptionML=[ENU=RDLC,Word;
                                                                    ESM=RDLC,Word;
                                                                    FRC=RDLC,Word;
                                                                    ENC=RDLC,Word];
                                                   OptionString=RDLC,Word }
    { 7   ;   ;Layout              ;BLOB          ;CaptionML=[ENU=Layout;
                                                              ESM=Disposici¢n;
                                                              FRC=Disposition;
                                                              ENC=Layout] }
    { 8   ;   ;Last Modified       ;DateTime      ;CaptionML=[ENU=Last Modified;
                                                              ESM=éltima modificaci¢n;
                                                              FRC=DerniŠre modification;
                                                              ENC=Last Modified];
                                                   Editable=No }
    { 9   ;   ;Last Modified by User;Code50       ;CaptionML=[ENU=Last Modified by User;
                                                              ESM=élt. modificaci¢n por usuario;
                                                              FRC=DerniŠre modification par utilisateur;
                                                              ENC=Last Modified by User];
                                                   Editable=No }
    { 10  ;   ;File Extension      ;Text30        ;CaptionML=[ENU=File Extension;
                                                              ESM=Extensi¢n archivo;
                                                              FRC=Extension de fichier;
                                                              ENC=File Extension];
                                                   Editable=No }
    { 11  ;   ;Description         ;Text80        ;CaptionML=[ENU=Description;
                                                              ESM=Descripci¢n;
                                                              FRC=Description;
                                                              ENC=Description] }
    { 12  ;   ;Custom XML Part     ;BLOB          ;CaptionML=[ENU=Custom XML Part;
                                                              ESM=Elemento XML personalizado;
                                                              FRC=Composant XML personnalis‚;
                                                              ENC=Custom XML Part] }
  }
  KEYS
  {
    {    ;ID                                      ;Clustered=Yes }
    {    ;Report ID,Company Name,Type              }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ImportWordTxt@1000 : TextConst 'ENU=Import Word Document;ESM=Importar documento Word;FRC=Importer document Word;ENC=Import Word Document';
      ImportRdlcTxt@1006 : TextConst 'ENU=Import Report Layout;ESM=Importar dise¤o de informe;FRC=Importer pr‚sentation rapport;ENC=Import Report Layout';
      FileFilterWordTxt@1001 : TextConst '@@@="{Split=r''\|''}{Locked=s''1''}";ENU=Word Files (*.docx)|*.docx;ESM=Archivos de Word (*.docx)|*.docx;FRC=Fichiers Word (*.docx)|*.docx;ENC=Word Files (*.docx)|*.docx';
      FileFilterRdlcTxt@1005 : TextConst '@@@="{Split=r''\|''}{Locked=s''1''}";ENU="SQL Report Builder (*.rdl;*.rdlc)|*.rdl;*.rdlc";ESM="Generador de informes de SQL (*.rdl;*.rdlc)|*.rdl;*.rdlc";FRC="SQL Report Builder (*.rdl;*.rdlc)|*.rdl;*.rdlc";ENC="SQL Report Builder (*.rdl;*.rdlc)|*.rdl;*.rdlc"';
      NoRecordsErr@1002 : TextConst 'ENU=There is no record in the list.;ESM=No hay ning£n registro en la lista.;FRC=La liste ne contient aucun enregistrement.;ENC=There is no record in the list.';
      BuiltInTxt@1003 : TextConst 'ENU=Built-in layout;ESM=Dise¤ado integrado;FRC=Pr‚sentation int‚gr‚e;ENC=Built-in layout';
      CopyOfTxt@1004 : TextConst 'ENU=Copy of %1;ESM=Copia de %1;FRC=Copie de %1;ENC=Copy of %1';
      NewLayoutTxt@1007 : TextConst 'ENU=New layout;ESM=Nueva disposici¢n;FRC=Nouvelle pr‚sentation;ENC=New layout';
      ErrorInLayoutErr@1008 : TextConst '@@@="%1=a name, %2=a number, %3=a sentence/error description.";ENU=Issue found in layout %1 for report ID  %2:\%3.;ESM=Se encontr¢ un problema en el dise¤o %1 para el id. de informe %2:\%3.;FRC=ProblŠme d‚tect‚ dans la disposition %1 pour le code rapport %2:\%3.;ENC=Issue found in layout %1 for report ID  %2:\%3.';
      TemplateValidationQst@1011 : TextConst '@@@="%1 = an error message.";ENU=The RDLC layout does not comply with the current report design (for example, fields are missing or the report ID is wrong).\The following errors were detected during the layout validation:\%1\Do you want to continue?;ESM=El dise¤o de RDLC no cumple con el dise¤o del informe actual (por ejemplo, faltan campos o el id. de informe no es v lido).\Se detectaron los siguientes errores durante la validaci¢n del dise¤o:\%1\¨Desea continuar?;FRC=La pr‚sentation RDLC n''est pas compatible avec la conception actuelle du rapport (par exemple, champs absents ou Code du rapport incorrect).\Les erreurs suivantes ont ‚t‚ d‚tect‚es pendant la validation de la pr‚sentationÿ:\%1\Voulez-vous continuer?;ENC=The RDLC layout does not comply with the current report design (for example, fields are missing or the report ID is wrong).\The following errors were detected during the layout validation:\%1\Do you want to continue?';

      TemplateValidationErr@1010 : TextConst
        'ENU=The RDLC layout does not comply with the current report design (for example, fields are missing or the report ID is wrong).\The following errors were detected during the document validation:\%1\You must update the layout to match the current report design.',
        'ESM=El dise¤o de RDLC no cumple con el dise¤o del informe actual (por ejemplo, faltan campos o el id. de informe no es v lido).\Se detectaron los siguientes errores durante la validaci¢n del documento:\%1\Debe actualizar el dise¤o para que coincida con el dise¤o del informe actual.',
        'FRC=La pr‚sentation RDLC n''est pas compatible avec la conception actuelle du rapport (par exemple, champs absents ou Code du rapport incorrect).\Les erreurs suivantes ont ‚t‚ d‚tect‚es pendant la validation du documentÿ:\%1\Vous devez mettre … jour la pr‚sentation pour qu''elle corresponde … la conception actuelle du rapport.',
        'ENC=The RDLC layout does not comply with the current report design (for example, fields are missing or the report ID is wrong).\The following errors were detected during the document validation:\%1\You must update the layout to match the current report design.';
      AbortWithValidationErr@1009 : TextConst 'ENU=The RDLC layout action has been canceled because of validation errors.;ESM=La acci¢n de dise¤o de RDLC se ha cancelado por errores de validaci¢n.;FRC=L''action pr‚sentation RDLC a ‚t‚ annul‚e en raison d''erreurs de validation.;ENC=The RDLC layout action has been cancelled because of validation errors.';

    LOCAL PROCEDURE SetUpdated@2();
    BEGIN
      "Last Modified" := ROUNDDATETIME(CURRENTDATETIME);
      "Last Modified by User" := USERID;
    END;

    PROCEDURE InitBuiltInLayout@11(ReportID@1003 : Integer;LayoutType@1004 : Option);
    VAR
      CustomReportLayout@1002 : Record 9650;
      DocumentReportMgt@1005 : Codeunit 9651;
      InStr@1001 : InStream;
      OutStr@1000 : OutStream;
    BEGIN
      IF ReportID = 0 THEN
        EXIT;
      CustomReportLayout.INIT;
      CustomReportLayout."Report ID" := ReportID;
      CustomReportLayout.Type := LayoutType;
      CustomReportLayout.Description := COPYSTR(STRSUBSTNO(CopyOfTxt,BuiltInTxt),1,MAXSTRLEN(Description));

      CASE LayoutType OF
        CustomReportLayout.Type::Word:
          BEGIN
            CustomReportLayout.Layout.CREATEOUTSTREAM(OutStr);
            IF NOT REPORT.WORDLAYOUT(ReportID,InStr) THEN BEGIN
              DocumentReportMgt.NewWordLayout(ReportID,OutStr);
              CustomReportLayout.Description := COPYSTR(NewLayoutTxt,1,MAXSTRLEN(Description));
            END ELSE
              COPYSTREAM(OutStr,InStr);
          END;
        CustomReportLayout.Type::RDLC:
          BEGIN
            CustomReportLayout.Layout.CREATEOUTSTREAM(OutStr);
            IF REPORT.RDLCLAYOUT(ReportID,InStr) THEN
              COPYSTREAM(OutStr,InStr);
          END;
      END;

      InsertCustomXmlPart(CustomReportLayout);

      CustomReportLayout.ID := 0;
      CustomReportLayout.INSERT(TRUE);
    END;

    PROCEDURE InsertBuiltInLayout@13();
    VAR
      ReportLayoutLookup@1000 : Page 9651;
      ReportID@1001 : Integer;
    BEGIN
      FILTERGROUP(4);
      IF GETFILTER("Report ID") = '' THEN
        FILTERGROUP(0);
      IF GETFILTER("Report ID") <> '' THEN
        IF EVALUATE(ReportID,GETFILTER("Report ID")) THEN
          ReportLayoutLookup.SetReportID(ReportID);
      FILTERGROUP(0);
      IF ReportLayoutLookup.RUNMODAL = ACTION::OK THEN BEGIN
        IF ReportLayoutLookup.SelectedAddWordLayot THEN
          InitBuiltInLayout(ReportLayoutLookup.SelectedReportID,Type::Word);
        IF ReportLayoutLookup.SelectedAddRdlcLayot THEN
          InitBuiltInLayout(ReportLayoutLookup.SelectedReportID,Type::RDLC);
      END;
    END;

    PROCEDURE GetCustomRdlc@10(ReportID@1000 : Integer) : Text;
    VAR
      ReportLayoutSelection@1003 : Record 9651;
      InStream@1002 : InStream;
      RdlcTxt@1001 : Text;
      CustomLayoutID@1004 : Integer;
    BEGIN
      // Temporarily selected layout for Design-time report execution?
      IF ReportLayoutSelection.GetTempLayoutSelected <> 0 THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE  // Normal selection
        IF ReportLayoutSelection.HasCustomLayout(ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";

      IF (CustomLayoutID <> 0) AND GET(CustomLayoutID) THEN BEGIN
        TESTFIELD(Type,Type::RDLC);
        IF UpdateLayout(TRUE,FALSE) THEN
          COMMIT; // Save the updated layout
        CALCFIELDS(Layout);
        Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
      END ELSE
        REPORT.RDLCLAYOUT(ReportID,InStream);
      InStream.READ(RdlcTxt);

      EXIT(RdlcTxt);
    END;

    PROCEDURE CopyRecord@7();
    BEGIN
      IF ISEMPTY THEN
        ERROR(NoRecordsErr);
      CALCFIELDS(Layout);
      Description := COPYSTR(STRSUBSTNO(CopyOfTxt,Description),1,MAXSTRLEN(Description));
      ID := 0;
      CALCFIELDS("Custom XML Part");
      IF NOT "Custom XML Part".HASVALUE THEN
        InsertCustomXmlPart(Rec);

      INSERT(TRUE);
    END;

    PROCEDURE ImportLayout@6(DefaultFileName@1005 : Text);
    VAR
      TempBlob@1000 : Record 99008535;
      FileMgt@1001 : Codeunit 419;
      FileName@1003 : Text;
      FileFilterTxt@1002 : Text;
      ImportTxt@1004 : Text;
    BEGIN
      IF ISEMPTY THEN
        ERROR(NoRecordsErr);
      CASE Type OF
        Type::Word:
          BEGIN
            ImportTxt := ImportWordTxt;
            FileFilterTxt := FileFilterWordTxt;
          END;
        Type::RDLC:
          BEGIN
            ImportTxt := ImportRdlcTxt;
            FileFilterTxt := FileFilterRdlcTxt;
          END;
      END;
      FileName := FileMgt.BLOBImportWithFilter(TempBlob,ImportTxt,DefaultFileName,FileFilterTxt,FileFilterTxt);
      IF FileName = '' THEN
        EXIT;

      ImportLayoutBlob(TempBlob,UPPERCASE(FileMgt.GetExtension(FileName)));
    END;

    PROCEDURE ImportLayoutBlob@17(VAR TempBlob@1000 : Record 99008535;FileExtension@1001 : Text[30]);
    VAR
      OutputTempBlob@1008 : Record 99008535;
      DocumentReportMgt@1006 : Codeunit 9651;
      DocumentInStream@1007 : InStream;
      DocumentOutStream@1009 : OutStream;
      ErrorMessage@1010 : Text;
      XmlPart@1002 : Text;
    BEGIN
      // Layout is stored in the DocumentInStream (RDLC requires UTF8 encoding for which reason is stream is created in the case block.
      // Result is stored in the DocumentOutStream (..)
      TESTFIELD("Report ID");
      OutputTempBlob.Blob.CREATEOUTSTREAM(DocumentOutStream);
      XmlPart := REPORT.WORDXMLPART("Report ID",TRUE);

      CASE Type OF
        Type::Word:
          BEGIN
            // Run update
            TempBlob.Blob.CREATEINSTREAM(DocumentInStream);
            ErrorMessage := DocumentReportMgt.TryUpdateWordLayout(DocumentInStream,DocumentOutStream,'',XmlPart);
            // Validate the Word document layout against the layout of the current report
            IF ErrorMessage = '' THEN BEGIN
              COPYSTREAM(DocumentOutStream,DocumentInStream);
              DocumentReportMgt.ValidateWordLayout("Report ID",DocumentInStream,TRUE,TRUE);
            END;
          END;
        Type::RDLC:
          BEGIN
            // Update the Rdlc document layout against the layout of the current report
            TempBlob.Blob.CREATEINSTREAM(DocumentInStream,TEXTENCODING::UTF8);
            ErrorMessage := DocumentReportMgt.TryUpdateRdlcLayout("Report ID",DocumentInStream,DocumentOutStream,'',XmlPart,FALSE);
          END;
      END;

      CLEAR(Layout);
      Layout := OutputTempBlob.Blob;

      IF FileExtension <> '' THEN
        "File Extension" := FileExtension;
      InsertCustomXmlPart(Rec);
      MODIFY(TRUE);
      COMMIT;

      IF ErrorMessage <> '' THEN
        MESSAGE(ErrorMessage);
    END;

    PROCEDURE ExportLayout@1(DefaultFileName@1003 : Text;ShowFileDialog@1002 : Boolean) : Text;
    VAR
      TempBlob@1001 : Record 99008535;
      FileMgt@1000 : Codeunit 419;
    BEGIN
      UpdateLayout(TRUE,FALSE); // Don't block on errors (return false) as we in all cases want to have an export file to edit.

      IF NOT Layout.HASVALUE THEN
        EXIT;

      IF DefaultFileName = '' THEN
        DefaultFileName := '*.' + GetFileExtension;

      TempBlob.Blob := Layout;
      EXIT(FileMgt.BLOBExport(TempBlob,DefaultFileName,ShowFileDialog));
    END;

    PROCEDURE ValidateLayout@14(useConfirm@1002 : Boolean;UpdateContext@1003 : Boolean) : Boolean;
    VAR
      DocumentReportMgt@1001 : Codeunit 9651;
      DocumentInStream@1000 : InStream;
      ValidationErrorFormat@1004 : Text;
    BEGIN
      TESTFIELD("Report ID");
      CALCFIELDS(Layout);
      IF NOT Layout.HASVALUE THEN
        EXIT;
      Layout.CREATEINSTREAM(DocumentInStream);

      CASE Type OF
        Type::Word:
          EXIT(DocumentReportMgt.ValidateWordLayout("Report ID",DocumentInStream,useConfirm,UpdateContext));
        Type::RDLC:
          IF NOT TryValidateRdlcReport(DocumentInStream) THEN BEGIN
            IF useConfirm THEN BEGIN
              IF NOT CONFIRM(TemplateValidationQst,FALSE,GETLASTERRORTEXT) THEN
                ERROR(AbortWithValidationErr);
            END ELSE BEGIN
              ValidationErrorFormat := TemplateValidationErr;
              ERROR(ValidationErrorFormat,GETLASTERRORTEXT);
            END;
            EXIT(FALSE);
          END;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE UpdateLayout@22(ContinueOnError@1007 : Boolean;IgnoreDelete@1000 : Boolean) : Boolean;
    VAR
      ErrorMessage@1008 : Text;
    BEGIN
      ErrorMessage := TryUpdateLayout(IgnoreDelete);

      IF ErrorMessage = '' THEN BEGIN
        IF Type = Type::Word THEN
          EXIT(ValidateLayout(TRUE,TRUE));
        EXIT(TRUE); // We have no validate for RDLC
      END;

      ErrorMessage := STRSUBSTNO(ErrorInLayoutErr,Description,"Report ID",ErrorMessage);
      IF ContinueOnError THEN BEGIN
        MESSAGE(ErrorMessage);
        EXIT(TRUE);
      END;

      ERROR(ErrorMessage);
    END;

    PROCEDURE TryUpdateLayout@16(IgnoreDelete@1006 : Boolean) : Text;
    VAR
      TempBlob@1003 : Record 99008535;
      DocumentReportMgt@1004 : Codeunit 9651;
      DocumentInStream@1000 : InStream;
      DocumentOutStream@1001 : OutStream;
      PartStream@1005 : OutStream;
      WordXmlPart@1002 : Text;
      ErrorMessage@1007 : Text;
    BEGIN
      CALCFIELDS(Layout);
      IF NOT Layout.HASVALUE THEN
        EXIT('');

      CALCFIELDS("Custom XML Part");
      TESTFIELD("Custom XML Part");
      TESTFIELD("Report ID");

      WordXmlPart := REPORT.WORDXMLPART("Report ID",TRUE);

      CASE Type OF
        Type::Word:
          BEGIN
            Layout.CREATEINSTREAM(DocumentInStream);
            TempBlob.Blob.CREATEOUTSTREAM(DocumentOutStream);
            ErrorMessage := DocumentReportMgt.TryUpdateWordLayout(DocumentInStream,DocumentOutStream,GetCustomXmlPart,WordXmlPart);
          END;
        Type::RDLC:
          BEGIN
            Layout.CREATEINSTREAM(DocumentInStream,TEXTENCODING::UTF8);
            TempBlob.Blob.CREATEOUTSTREAM(DocumentOutStream,TEXTENCODING::UTF8);
            ErrorMessage := DocumentReportMgt.TryUpdateRdlcLayout(
                "Report ID",DocumentInStream,DocumentOutStream,GetCustomXmlPart,WordXmlPart,IgnoreDelete);
          END;
      END;

      CLEAR("Custom XML Part");
      "Custom XML Part".CREATEOUTSTREAM(PartStream,TEXTENCODING::UTF16);
      PartStream.WRITE(WordXmlPart);
      IF TempBlob.Blob.HASVALUE THEN BEGIN
        CLEAR(Layout);
        Layout := TempBlob.Blob;
      END;
      MODIFY;

      EXIT(ErrorMessage);
    END;

    LOCAL PROCEDURE GetWordXML@8(VAR TempBlob@1001 : Record 99008535);
    VAR
      OutStr@1000 : OutStream;
    BEGIN
      TESTFIELD("Report ID");
      TempBlob.Blob.CREATEOUTSTREAM(OutStr,TEXTENCODING::UTF16);
      OutStr.WRITETEXT(REPORT.WORDXMLPART("Report ID"));
    END;

    PROCEDURE ExportSchema@9(DefaultFileName@1003 : Text;ShowFileDialog@1002 : Boolean) : Text;
    VAR
      TempBlob@1001 : Record 99008535;
      FileMgt@1000 : Codeunit 419;
    BEGIN
      TESTFIELD(Type,Type::Word);

      IF DefaultFileName = '' THEN
        DefaultFileName := '*.xml';

      GetWordXML(TempBlob);
      IF TempBlob.Blob.HASVALUE THEN
        EXIT(FileMgt.BLOBExport(TempBlob,DefaultFileName,ShowFileDialog));
    END;

    PROCEDURE EditLayout@4();
    BEGIN
      UpdateLayout(TRUE,TRUE); // Don't block on errors (return false) as we in all cases want to have an export file to edit.

      CASE Type OF
        Type::Word:
          CODEUNIT.RUN(CODEUNIT::"Edit MS Word Report Layout",Rec);
        Type::RDLC:
          CODEUNIT.RUN(CODEUNIT::"Edit RDLC Report Layout",Rec);
      END;
    END;

    LOCAL PROCEDURE GetFileExtension@12() : Text[4];
    BEGIN
      CASE Type OF
        Type::Word:
          EXIT('docx');
        Type::RDLC:
          EXIT('rdl');
      END;
    END;

    LOCAL PROCEDURE InsertCustomXmlPart@18(VAR CustomReportLayout@1000 : Record 9650);
    VAR
      OutStr@1002 : OutStream;
      WordXmlPart@1001 : Text;
    BEGIN
      // Store the current design as an extended WordXmlPart. This data is used for later updates / refactorings.
      CustomReportLayout."Custom XML Part".CREATEOUTSTREAM(OutStr,TEXTENCODING::UTF16);
      WordXmlPart := REPORT.WORDXMLPART(CustomReportLayout."Report ID",TRUE);
      IF WordXmlPart <> '' THEN
        OutStr.WRITE(WordXmlPart);
    END;

    PROCEDURE GetCustomXmlPart@19() XmlPart : Text;
    VAR
      InStr@1000 : InStream;
    BEGIN
      CALCFIELDS("Custom XML Part");
      IF NOT "Custom XML Part".HASVALUE THEN
        EXIT;

      "Custom XML Part".CREATEINSTREAM(InStr,TEXTENCODING::UTF16);
      InStr.READ(XmlPart);
    END;

    PROCEDURE RunCustomReport@3();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
    BEGIN
      IF "Report ID" = 0 THEN
        EXIT;

      ReportLayoutSelection.SetTempLayoutSelected(ID);
      REPORT.RUNMODAL("Report ID");
      ReportLayoutSelection.SetTempLayoutSelected(0);
    END;

    PROCEDURE ApplyUpgrade@5(VAR ReportUpgrade@1007 : DotNet "'Microsoft.Dynamics.Nav.DocumentReport, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DocumentReport.ReportUpgradeSet";VAR ReportChangeLogCollection@1001 : DotNet "'Microsoft.Dynamics.Nav.Types.Report, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Types.Report.IReportChangeLogCollection";testOnly@1000 : Boolean);
    VAR
      TempBlob@1010 : Record 99008535;
      TempReportChangeLogCollection@1008 : DotNet "'Microsoft.Dynamics.Nav.Types.Report, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Types.Report.IReportChangeLogCollection";
      DataInStream@1004 : InStream;
      DataOutStream@1003 : OutStream;
      ModifyLayout@1002 : Boolean;
    BEGIN
      CALCFIELDS(Layout);
      IF NOT Layout.HASVALUE THEN
        EXIT;

      IF ReportUpgrade.ChangeCount() < 1 THEN
        EXIT;

      CLEAR(DataInStream);
      CLEAR(DataOutStream);
      IF Type = Type::Word THEN BEGIN
        Layout.CREATEINSTREAM(DataInStream);
        TempBlob.Blob.CREATEOUTSTREAM(DataOutStream);
      END ELSE BEGIN
        Layout.CREATEINSTREAM(DataInStream,TEXTENCODING::UTF8);
        TempBlob.Blob.CREATEOUTSTREAM(DataOutStream,TEXTENCODING::UTF8);
      END;

      TempReportChangeLogCollection := ReportUpgrade.Upgrade(Description,DataInStream,DataOutStream);

      IF NOT testOnly THEN BEGIN
        IF TempReportChangeLogCollection.Failures = 0 THEN BEGIN
          InsertCustomXmlPart(Rec);
          ModifyLayout := TRUE;
        END;
        IF TempBlob.Blob.HASVALUE THEN BEGIN
          CLEAR(Layout);
          Layout := TempBlob.Blob;
          ModifyLayout := TRUE;
        END;
        IF ModifyLayout = TRUE THEN BEGIN
          MODIFY;
          COMMIT;
        END;
      END;

      IF TempReportChangeLogCollection.Count > 0 THEN BEGIN
        IF ISNULL(ReportChangeLogCollection) THEN
          ReportChangeLogCollection := TempReportChangeLogCollection
        ELSE
          ReportChangeLogCollection.AddRange(TempReportChangeLogCollection);
      END;
    END;

    [TryFunction]
    LOCAL PROCEDURE TryValidateRdlcReport@15(VAR InStr@1002 : InStream);
    VAR
      RdlcReportManager@1001 : DotNet "'Microsoft.Dynamics.Nav.DocumentReport, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DocumentReport.RdlcReportManager";
      RdlcString@1000 : Text;
    BEGIN
      InStr.READ(RdlcString);
      RdlcReportManager.ValidateReport("Report ID",RdlcString);
    END;

    BEGIN
    END.
  }
}

