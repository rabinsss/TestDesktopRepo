OBJECT Table 1294 Applied Payment Entry
{
  OBJECT-PROPERTIES
  {
    Date=09/15/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               IF "Applies-to Entry No." <> 0 THEN
                 TESTFIELD("Applied Amount");

               CheckApplnIsSameAcc;
             END;

    OnModify=BEGIN
               TESTFIELD("Applied Amount");
               CheckApplnIsSameAcc;
             END;

    OnDelete=BEGIN
               "Applied Amount" := 0;
               "Applied Pmt. Discount" := 0;
               UpdateParentBankAccReconLine(TRUE);
             END;

    CaptionML=[ENU=Applied Payment Entry;
               ESM=Mov. de pago liquidado;
               FRC=êcriture paiement affectÇ;
               ENC=Applied Payment Entry];
    LookupPageID=Page1292;
  }
  FIELDS
  {
    { 1   ;   ;Bank Account No.    ;Code20        ;TableRelation="Bank Account";
                                                   CaptionML=[ENU=Bank Account No.;
                                                              ESM=C¢d. cuenta banco;
                                                              FRC=N¯ compte bancaire;
                                                              ENC=Bank Account No.] }
    { 2   ;   ;Statement No.       ;Code20        ;TableRelation="Bank Acc. Reconciliation"."Statement No." WHERE (Bank Account No.=FIELD(Bank Account No.),
                                                                                                                   Statement Type=FIELD(Statement Type));
                                                   CaptionML=[ENU=Statement No.;
                                                              ESM=Nß estado de cta. banco;
                                                              FRC=N¯ de relevÇ;
                                                              ENC=Statement No.] }
    { 3   ;   ;Statement Line No.  ;Integer       ;CaptionML=[ENU=Statement Line No.;
                                                              ESM=Nß l°n. estado de cuenta;
                                                              FRC=N¯ ligne relevÇ;
                                                              ENC=Statement Line No.] }
    { 20  ;   ;Statement Type      ;Option        ;CaptionML=[ENU=Statement Type;
                                                              ESM=Tipo de estado de cuenta;
                                                              FRC=Type relevÇ;
                                                              ENC=Statement Type];
                                                   OptionCaptionML=[ENU=Bank Reconciliation,Payment Application;
                                                                    ESM=Conciliaci¢n banco,liquidaci¢n de pago;
                                                                    FRC=Rapprochement bancaire,Affectation paiement;
                                                                    ENC=Bank Reconciliation,Payment Application];
                                                   OptionString=Bank Reconciliation,Payment Application }
    { 21  ;   ;Account Type        ;Option        ;OnValidate=BEGIN
                                                                VALIDATE("Account No.",'');
                                                              END;

                                                   CaptionML=[ENU=Account Type;
                                                              ESM=Tipo de cta.;
                                                              FRC=Type de compte;
                                                              ENC=Account Type];
                                                   OptionCaptionML=[ENU=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner;
                                                                    ESM=Cuenta,Cliente,Proveedor,Banco,Activo,Empresa vinculada asociada;
                                                                    FRC=Compte du grand livre,Client,Fournisseur,Compte bancaire,Immobilisation,Partenaire IC;
                                                                    ENC=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner];
                                                   OptionString=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner }
    { 22  ;   ;Account No.         ;Code20        ;TableRelation=IF (Account Type=CONST(G/L Account)) "G/L Account" WHERE (Account Type=CONST(Posting),
                                                                                                                           Blocked=CONST(No))
                                                                                                                           ELSE IF (Account Type=CONST(Customer)) Customer
                                                                                                                           ELSE IF (Account Type=CONST(Vendor)) Vendor
                                                                                                                           ELSE IF (Account Type=CONST(Bank Account)) "Bank Account"
                                                                                                                           ELSE IF (Account Type=CONST(Fixed Asset)) "Fixed Asset"
                                                                                                                           ELSE IF (Account Type=CONST(IC Partner)) "IC Partner";
                                                   OnValidate=BEGIN
                                                                IF "Account No." = '' THEN
                                                                  CheckApplnIsSameAcc;

                                                                GetAccInfo;
                                                                VALIDATE("Applies-to Entry No.",0);
                                                              END;

                                                   CaptionML=[ENU=Account No.;
                                                              ESM=Nß cuenta;
                                                              FRC=N¯ de compte;
                                                              ENC=Account No.] }
    { 23  ;   ;Applies-to Entry No.;Integer       ;TableRelation=IF (Account Type=CONST(G/L Account)) "G/L Entry"
                                                                 ELSE IF (Account Type=CONST(Customer)) "Cust. Ledger Entry" WHERE (Open=CONST(Yes))
                                                                 ELSE IF (Account Type=CONST(Vendor)) "Vendor Ledger Entry" WHERE (Open=CONST(Yes))
                                                                 ELSE IF (Account Type=CONST(Bank Account)) "Bank Account Ledger Entry" WHERE (Open=CONST(Yes));
                                                   OnValidate=BEGIN
                                                                IF "Applies-to Entry No." = 0 THEN BEGIN
                                                                  VALIDATE("Applied Amount",0);
                                                                  EXIT;
                                                                END;

                                                                CheckCurrencyCombination;
                                                                GetLedgEntryInfo;
                                                                UpdatePaymentDiscount(SuggestDiscToApply(FALSE));
                                                                VALIDATE("Applied Amount",SuggestAmtToApply);
                                                              END;

                                                   OnLookup=VAR
                                                              CustLedgEntry@1003 : Record 21;
                                                              VendLedgEntry@1002 : Record 25;
                                                              BankAccLedgEntry@1001 : Record 271;
                                                              GLEntry@1000 : Record 17;
                                                            BEGIN
                                                              CASE "Account Type" OF
                                                                "Account Type"::"G/L Account":
                                                                  BEGIN
                                                                    GLEntry.SETRANGE("G/L Account No.","Account No.");
                                                                    IF PAGE.RUNMODAL(0,GLEntry) = ACTION::LookupOK THEN
                                                                      VALIDATE("Applies-to Entry No.",GLEntry."Entry No.");
                                                                  END;
                                                                "Account Type"::Customer:
                                                                  BEGIN
                                                                    CustLedgEntry.SETRANGE(Open,TRUE);
                                                                    CustLedgEntry.SETRANGE("Customer No.","Account No.");
                                                                    IF PAGE.RUNMODAL(0,CustLedgEntry) = ACTION::LookupOK THEN
                                                                      VALIDATE("Applies-to Entry No.",CustLedgEntry."Entry No.");
                                                                  END;
                                                                "Account Type"::Vendor:
                                                                  BEGIN
                                                                    VendLedgEntry.SETRANGE(Open,TRUE);
                                                                    VendLedgEntry.SETRANGE("Vendor No.","Account No.");
                                                                    IF PAGE.RUNMODAL(0,VendLedgEntry) = ACTION::LookupOK THEN
                                                                      VALIDATE("Applies-to Entry No.",VendLedgEntry."Entry No.");
                                                                  END;
                                                                "Account Type"::"Bank Account":
                                                                  BEGIN
                                                                    BankAccLedgEntry.SETRANGE(Open,TRUE);
                                                                    BankAccLedgEntry.SETRANGE("Bank Account No.","Account No.");
                                                                    IF PAGE.RUNMODAL(0,BankAccLedgEntry) = ACTION::LookupOK THEN
                                                                      VALIDATE("Applies-to Entry No.",BankAccLedgEntry."Entry No.");
                                                                  END;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Applies-to Entry No.;
                                                              ESM=Liq. por nß mov.;
                                                              FRC=N¯ Çcriture affectÇ Ö;
                                                              ENC=Applies-to Entry No.] }
    { 24  ;   ;Applied Amount      ;Decimal       ;OnValidate=BEGIN
                                                                IF "Applies-to Entry No." <> 0 THEN
                                                                  TESTFIELD("Applied Amount");
                                                                CheckEntryAmt;
                                                                UpdatePaymentDiscount(SuggestDiscToApply(TRUE));
                                                                IF "Applied Pmt. Discount" <> 0 THEN
                                                                  "Applied Amount" := SuggestAmtToApply;

                                                                UpdateParentBankAccReconLine(FALSE);
                                                              END;

                                                   CaptionML=[ENU=Applied Amount;
                                                              ESM=Importe liquidado;
                                                              FRC=Montant affectÇ;
                                                              ENC=Applied Amount] }
    { 29  ;   ;Applied Pmt. Discount;Decimal      ;CaptionML=[ENU=Applied Pmt. Discount;
                                                              ESM=Descuento pago aplicado;
                                                              FRC=Escompte de paiement affectÇ;
                                                              ENC=Applied Pmt. Discount];
                                                   AutoFormatExpr="Currency Code" }
    { 30  ;   ;Quality             ;Integer       ;CaptionML=[ENU=Quality;
                                                              ESM=Calidad;
                                                              FRC=QualitÇ;
                                                              ENC=Quality] }
    { 31  ;   ;Posting Date        ;Date          ;CaptionML=[ENU=Posting Date;
                                                              ESM=Fecha registro;
                                                              FRC=Date de report;
                                                              ENC=Posting Date] }
    { 32  ;   ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              ESM=Tipo documento;
                                                              FRC=Type de document;
                                                              ENC=Document Type];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                                    ESM=" ,Pago,Factura,Nota crÇdito,Docs. interÇs,Recordatorio,Reembolso";
                                                                    FRC=" ,Paiement,Facture,Avoir,IntÇràts,Relance,Remboursement";
                                                                    ENC=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 33  ;   ;Document No.        ;Code20        ;CaptionML=[ENU=Document No.;
                                                              ESM=Nß documento;
                                                              FRC=N¯ de document;
                                                              ENC=Document No.] }
    { 34  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ESM=Descripci¢n;
                                                              FRC=Description;
                                                              ENC=Description] }
    { 35  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=[ENU=Currency Code;
                                                              ESM=C¢d. divisa;
                                                              FRC=Code devise;
                                                              ENC=Currency Code] }
    { 36  ;   ;Due Date            ;Date          ;CaptionML=[ENU=Due Date;
                                                              ESM=Fecha vencimiento;
                                                              FRC=Date d'ÇchÇance;
                                                              ENC=Due Date] }
    { 37  ;   ;External Document No.;Code35       ;CaptionML=[ENU=External Document No.;
                                                              ESM=Nß documento externo;
                                                              FRC=N¯ doc. externe;
                                                              ENC=External Document No.] }
    { 50  ;   ;Match Confidence    ;Option        ;InitValue=None;
                                                   CaptionML=[ENU=Match Confidence;
                                                              ESM=Confianza de la coincidencia;
                                                              FRC=FiabilitÇ correspondance;
                                                              ENC=Match Confidence];
                                                   OptionCaptionML=[ENU=None,Low,Medium,High,High - Text-to-Account Mapping,Manual,Accepted;
                                                                    ESM=Ninguna,Baja,Media,Alta,Alta: asignaci¢n de texto a cuentas,Manual,Aceptada;
                                                                    FRC=Aucune,Faible,Moyenne,êlevÇe,êlevÇe - Correspondance texte et compte,Manuelle,AcceptÇe;
                                                                    ENC=None,Low,Medium,High,High - Text-to-Account Mapping,Manual,Accepted];
                                                   OptionString=None,Low,Medium,High,High - Text-to-Account Mapping,Manual,Accepted;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Statement Type,Bank Account No.,Statement No.,Statement Line No.,Account Type,Account No.,Applies-to Entry No.;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      CurrencyMismatchErr@1001 : TextConst 'ENU=Currency codes on bank account %1 and ledger entry %2 do not match.;ESM=Los c¢digos de divisa en la cuenta bancaria %1 y el movimiento de contabilidad %2 no coinciden.;FRC=Les codes devise sur le compte bancaire %1 et l''Çcriture %2 ne correspondent pas.;ENC=Currency codes on bank account %1 and ledger entry %2 do not match.';
      AmtCannotExceedErr@1002 : TextConst 'ENU=The Amount to Apply cannot exceed %1. This is because the Remaining Amount on the entry is %2 and the amount assigned to other statement lines is %3.;ESM=El importe que se va a aplicar no puede superar %1. Esto se debe a que el importe restante del movimiento es %2 y el importe asignado a otras l°neas de estado de cuenta es %3.;FRC=Le montant Ö affecter ne peut pas dÇpasser %1. En effet, le montant ouvert sur l''Çcriture est %2 et le montant affectÇ Ö d''autres lignes relevÇ est %3.;ENC=The Amount to Apply cannot exceed %1. This is because the Remaining Amount on the entry is %2 and the amount assigned to other statement lines is %3.';
      CannotApplyStmtLineErr@1003 : TextConst '@@@="%1 = Account Type, %2 = Account No., %3 = Account Type, %4 = Account No.";ENU=You cannot apply to %1 %2 because the statement line already contains an application to %3 %4.;ESM=No puede liquidar en %1 %2 porque la l°nea de estado de cuenta ya contiene una liquidaci¢n en %3 %4.;FRC=Il est impossible de lettrer avec %1 %2 car la ligne relevÇ contient dÇjÖ un lettrage avec %3 %4.;ENC=You cannot apply to %1 %2 because the statement line already contains an application to %3 %4.';

    LOCAL PROCEDURE CheckApplnIsSameAcc@6();
    VAR
      ExistingAppliedPmtEntry@1001 : Record 1294;
      BankAccReconLine@1000 : Record 274;
    BEGIN
      IF "Account No." = '' THEN
        EXIT;
      BankAccReconLine.GET("Statement Type","Bank Account No.","Statement No.","Statement Line No.");
      ExistingAppliedPmtEntry.FilterAppliedPmtEntry(BankAccReconLine);
      IF ExistingAppliedPmtEntry.FINDFIRST THEN
        CheckCurrentMatchesExistingAppln(ExistingAppliedPmtEntry);
      IF ExistingAppliedPmtEntry.FINDLAST THEN
        CheckCurrentMatchesExistingAppln(ExistingAppliedPmtEntry);
    END;

    LOCAL PROCEDURE CheckCurrentMatchesExistingAppln@16(ExistingAppliedPmtEntry@1000 : Record 1294);
    BEGIN
      IF ("Account Type" = ExistingAppliedPmtEntry."Account Type") AND
         ("Account No." = ExistingAppliedPmtEntry."Account No.")
      THEN
        EXIT;

      ERROR(
        CannotApplyStmtLineErr,
        "Account Type","Account No.",
        ExistingAppliedPmtEntry."Account Type",
        ExistingAppliedPmtEntry."Account No.");
    END;

    LOCAL PROCEDURE CheckEntryAmt@1();
    VAR
      BankAccReconLine@1002 : Record 274;
      AmtAvailableToApply@1000 : Decimal;
    BEGIN
      IF "Applied Amount" = 0 THEN
        EXIT;

      BankAccReconLine.GET("Statement Type","Bank Account No.","Statement No.","Statement Line No.");
      // Amount should not exceed Remaining Amount
      AmtAvailableToApply := GetRemAmt - GetAmtAppliedToOtherStmtLines;
      IF "Applies-to Entry No." <> 0 THEN
        IF "Applied Amount" > 0 THEN BEGIN
          IF NOT ("Applied Amount" IN [0..AmtAvailableToApply]) THEN
            ERROR(AmtCannotExceedErr,AmtAvailableToApply,GetRemAmt,GetAmtAppliedToOtherStmtLines);
        END ELSE
          IF NOT ("Applied Amount" IN [AmtAvailableToApply..0]) THEN
            ERROR(AmtCannotExceedErr,AmtAvailableToApply,GetRemAmt,GetAmtAppliedToOtherStmtLines);
    END;

    LOCAL PROCEDURE UpdateParentBankAccReconLine@2(IsDelete@1001 : Boolean);
    VAR
      BankAccReconLine@1000 : Record 274;
      NewAppliedAmt@1002 : Decimal;
    BEGIN
      BankAccReconLine.GET("Statement Type","Bank Account No.","Statement No.","Statement Line No.");

      NewAppliedAmt := GetTotalAppliedAmountInclPmtDisc(IsDelete);

      BankAccReconLine."Applied Entries" := GetNoOfAppliedEntries(IsDelete);

      IF IsDelete THEN BEGIN
        IF NewAppliedAmt = 0 THEN BEGIN
          BankAccReconLine.VALIDATE("Applied Amount",0);
          BankAccReconLine.VALIDATE("Account No.",'')
        END
      END ELSE
        IF BankAccReconLine."Applied Amount" = 0 THEN BEGIN
          BankAccReconLine.VALIDATE("Account Type","Account Type");
          BankAccReconLine.VALIDATE("Account No.","Account No.");
        END ELSE
          CheckApplnIsSameAcc;

      BankAccReconLine.VALIDATE("Applied Amount",NewAppliedAmt);
      BankAccReconLine.MODIFY;
    END;

    LOCAL PROCEDURE CheckCurrencyCombination@4();
    VAR
      CustLedgEntry@1001 : Record 21;
      VendorLedgEntry@1000 : Record 25;
      BankAccLedgEntry@1002 : Record 271;
    BEGIN
      IF IsBankLCY THEN
        EXIT;

      IF "Applies-to Entry No." = 0 THEN
        EXIT;

      CASE "Account Type" OF
        "Account Type"::Customer:
          BEGIN
            CustLedgEntry.GET("Applies-to Entry No.");
            IF NOT CurrencyMatches("Bank Account No.",CustLedgEntry."Currency Code",GetLCYCode) THEN
              ERROR(CurrencyMismatchErr,"Bank Account No.","Applies-to Entry No.");
          END;
        "Account Type"::Vendor:
          BEGIN
            VendorLedgEntry.GET("Applies-to Entry No.");
            IF NOT CurrencyMatches("Bank Account No.",VendorLedgEntry."Currency Code",GetLCYCode) THEN
              ERROR(CurrencyMismatchErr,"Bank Account No.","Applies-to Entry No.");
          END;
        "Account Type"::"Bank Account":
          BEGIN
            BankAccLedgEntry.GET("Applies-to Entry No.");
            IF NOT CurrencyMatches("Bank Account No.",BankAccLedgEntry."Currency Code",GetLCYCode) THEN
              ERROR(CurrencyMismatchErr,"Bank Account No.","Applies-to Entry No.");
          END;
      END;
    END;

    LOCAL PROCEDURE CurrencyMatches@5(BankAccNo@1000 : Code[20];LedgEntryCurrCode@1001 : Code[10];LCYCode@1005 : Code[10]) : Boolean;
    VAR
      BankAcc@1003 : Record 270;
      BankAccCurrCode@1004 : Code[10];
    BEGIN
      BankAcc.GET(BankAccNo);
      BankAccCurrCode := BankAcc."Currency Code";
      IF BankAccCurrCode = '' THEN
        BankAccCurrCode := LCYCode;
      IF LedgEntryCurrCode = '' THEN
        LedgEntryCurrCode := LCYCode;
      EXIT(LedgEntryCurrCode = BankAccCurrCode);
    END;

    LOCAL PROCEDURE IsBankLCY@13() : Boolean;
    VAR
      BankAcc@1000 : Record 270;
    BEGIN
      BankAcc.GET("Bank Account No.");
      EXIT(BankAcc.IsInLocalCurrency);
    END;

    LOCAL PROCEDURE GetLCYCode@17() : Code[10];
    VAR
      GLSetup@1000 : Record 98;
    BEGIN
      GLSetup.GET;
      EXIT(GLSetup.GetCurrencyCode(''));
    END;

    PROCEDURE SuggestAmtToApply@11() : Decimal;
    VAR
      RemAmtToApply@1000 : Decimal;
      LineRemAmtToApply@1001 : Decimal;
    BEGIN
      RemAmtToApply := GetRemAmt - GetAmtAppliedToOtherStmtLines;
      LineRemAmtToApply := GetStmtLineRemAmtToApply + "Applied Pmt. Discount";

      IF "Account Type" = "Account Type"::Customer THEN
        IF (LineRemAmtToApply >= 0) AND ("Document Type" = "Document Type"::"Credit Memo") THEN
          EXIT(RemAmtToApply);
      IF "Account Type" = "Account Type"::Vendor THEN
        IF (LineRemAmtToApply <= 0) AND ("Document Type" = "Document Type"::"Credit Memo") THEN
          EXIT(RemAmtToApply);

      EXIT(
        AbsMin(
          RemAmtToApply,
          LineRemAmtToApply));
    END;

    PROCEDURE SuggestDiscToApply@36(UseAppliedAmt@1000 : Boolean) : Decimal;
    VAR
      PmtDiscDueDate@1002 : Date;
      PmtDiscToleranceDate@1003 : Date;
      RemPmtDiscPossible@1001 : Decimal;
    BEGIN
      IF InclPmtDisc(UseAppliedAmt) THEN BEGIN
        GetDiscInfo(PmtDiscDueDate,PmtDiscToleranceDate,RemPmtDiscPossible);
        EXIT(RemPmtDiscPossible);
      END;
      EXIT(0);
    END;

    PROCEDURE GetDiscInfo@40(VAR PmtDiscDueDate@1000 : Date;VAR PmtDiscToleranceDate@1002 : Date;VAR RemPmtDiscPossible@1001 : Decimal);
    BEGIN
      PmtDiscDueDate := 0D;
      RemPmtDiscPossible := 0;

      IF "Account No." = '' THEN
        EXIT;
      IF "Applies-to Entry No." = 0 THEN
        EXIT;

      CASE "Account Type" OF
        "Account Type"::Customer:
          GetCustLedgEntryDiscInfo(PmtDiscDueDate,PmtDiscToleranceDate,RemPmtDiscPossible);
        "Account Type"::Vendor:
          GetVendLedgEntryDiscInfo(PmtDiscDueDate,PmtDiscToleranceDate,RemPmtDiscPossible);
      END;
    END;

    LOCAL PROCEDURE GetCustLedgEntryDiscInfo@39(VAR PmtDiscDueDate@1002 : Date;VAR PmtDiscToleranceDate@1003 : Date;VAR RemPmtDiscPossible@1001 : Decimal);
    VAR
      CustLedgEntry@1000 : Record 21;
    BEGIN
      CustLedgEntry.GET("Applies-to Entry No.");
      PmtDiscDueDate := CustLedgEntry."Pmt. Discount Date";
      PmtDiscToleranceDate := CustLedgEntry."Pmt. Disc. Tolerance Date";
      IF IsBankLCY AND (CustLedgEntry."Currency Code" <> '') THEN
        RemPmtDiscPossible :=
          ROUND(CustLedgEntry."Remaining Pmt. Disc. Possible" / CustLedgEntry."Adjusted Currency Factor")
      ELSE
        RemPmtDiscPossible := CustLedgEntry."Remaining Pmt. Disc. Possible";
    END;

    LOCAL PROCEDURE GetVendLedgEntryDiscInfo@38(VAR PmtDiscDueDate@1002 : Date;VAR PmtDiscToleranceDate@1003 : Date;VAR RemPmtDiscPossible@1001 : Decimal);
    VAR
      VendLedgEntry@1000 : Record 25;
    BEGIN
      VendLedgEntry.GET("Applies-to Entry No.");
      PmtDiscDueDate := VendLedgEntry."Pmt. Discount Date";
      PmtDiscToleranceDate := VendLedgEntry."Pmt. Disc. Tolerance Date";
      VendLedgEntry.CALCFIELDS("Amount (LCY)",Amount);
      IF IsBankLCY AND (VendLedgEntry."Currency Code" <> '') THEN
        RemPmtDiscPossible :=
          ROUND(VendLedgEntry."Remaining Pmt. Disc. Possible" / VendLedgEntry."Adjusted Currency Factor")
      ELSE
        RemPmtDiscPossible := VendLedgEntry."Remaining Pmt. Disc. Possible";
    END;

    PROCEDURE GetRemAmt@3() : Decimal;
    BEGIN
      IF "Account No." = '' THEN
        EXIT(0);
      IF "Applies-to Entry No." = 0 THEN
        EXIT(GetStmtLineRemAmtToApply);

      CASE "Account Type" OF
        "Account Type"::Customer:
          EXIT(GetCustLedgEntryRemAmt);
        "Account Type"::Vendor:
          EXIT(GetVendLedgEntryRemAmt);
        "Account Type"::"Bank Account":
          EXIT(GetBankAccLedgEntryRemAmt);
      END;
    END;

    LOCAL PROCEDURE GetCustLedgEntryRemAmt@30() : Decimal;
    VAR
      CustLedgEntry@1000 : Record 21;
    BEGIN
      CustLedgEntry.GET("Applies-to Entry No.");
      IF IsBankLCY AND (CustLedgEntry."Currency Code" <> '') THEN BEGIN
        CustLedgEntry.CALCFIELDS("Remaining Amt. (LCY)");
        EXIT(CustLedgEntry."Remaining Amt. (LCY)");
      END;
      CustLedgEntry.CALCFIELDS("Remaining Amount");
      EXIT(CustLedgEntry."Remaining Amount");
    END;

    LOCAL PROCEDURE GetVendLedgEntryRemAmt@31() : Decimal;
    VAR
      VendLedgEntry@1000 : Record 25;
    BEGIN
      VendLedgEntry.GET("Applies-to Entry No.");
      IF IsBankLCY AND (VendLedgEntry."Currency Code" <> '') THEN BEGIN
        VendLedgEntry.CALCFIELDS("Remaining Amt. (LCY)");
        EXIT(VendLedgEntry."Remaining Amt. (LCY)");
      END;
      VendLedgEntry.CALCFIELDS("Remaining Amount");
      EXIT(VendLedgEntry."Remaining Amount");
    END;

    LOCAL PROCEDURE GetBankAccLedgEntryRemAmt@32() : Decimal;
    VAR
      BankAccLedgEntry@1000 : Record 271;
    BEGIN
      BankAccLedgEntry.GET("Applies-to Entry No.");
      IF IsBankLCY THEN
        EXIT(
          ROUND(
            BankAccLedgEntry."Remaining Amount" *
            BankAccLedgEntry."Amount (LCY)" / BankAccLedgEntry.Amount));
      EXIT(BankAccLedgEntry."Remaining Amount");
    END;

    PROCEDURE GetStmtLineRemAmtToApply@12() : Decimal;
    VAR
      BankAccReconLine@1000 : Record 274;
    BEGIN
      BankAccReconLine.GET("Statement Type","Bank Account No.","Statement No.","Statement Line No.");

      IF BankAccReconLine.Difference = 0 THEN
        EXIT(0);

      EXIT(BankAccReconLine.Difference + GetOldAppliedAmtInclDisc);
    END;

    LOCAL PROCEDURE GetOldAppliedAmtInclDisc@35() : Decimal;
    VAR
      OldAppliedPmtEntry@1000 : Record 1294;
    BEGIN
      OldAppliedPmtEntry := Rec;
      IF NOT OldAppliedPmtEntry.FIND THEN
        EXIT(0);
      EXIT(OldAppliedPmtEntry."Applied Amount" - OldAppliedPmtEntry."Applied Pmt. Discount");
    END;

    LOCAL PROCEDURE AbsMin@15(Amt1@1000 : Decimal;Amt2@1001 : Decimal) : Decimal;
    BEGIN
      IF ABS(Amt1) < ABS(Amt2) THEN
        EXIT(Amt1);
      EXIT(Amt2)
    END;

    LOCAL PROCEDURE GetAccInfo@34();
    BEGIN
      IF "Account No." = '' THEN
        EXIT;

      CASE "Account Type" OF
        "Account Type"::Customer:
          GetCustInfo;
        "Account Type"::Vendor:
          GetVendInfo;
        "Account Type"::"Bank Account":
          GetBankAccInfo;
        "Account Type"::"G/L Account":
          GetGLAccInfo;
      END;
    END;

    LOCAL PROCEDURE GetCustInfo@23();
    VAR
      Cust@1000 : Record 18;
    BEGIN
      Cust.GET("Account No.");
      Description := Cust.Name;
    END;

    LOCAL PROCEDURE GetVendInfo@22();
    VAR
      Vend@1000 : Record 23;
    BEGIN
      Vend.GET("Account No.");
      Description := Vend.Name;
    END;

    LOCAL PROCEDURE GetBankAccInfo@21();
    VAR
      BankAcc@1000 : Record 270;
    BEGIN
      BankAcc.GET("Account No.");
      Description := BankAcc.Name;
      "Currency Code" := BankAcc."Currency Code";
    END;

    LOCAL PROCEDURE GetGLAccInfo@27();
    VAR
      GLAcc@1000 : Record 15;
    BEGIN
      GLAcc.GET("Account No.");
      Description := GLAcc.Name;
    END;

    PROCEDURE GetLedgEntryInfo@8();
    BEGIN
      IF "Applies-to Entry No." = 0 THEN
        EXIT;

      CASE "Account Type" OF
        "Account Type"::Customer:
          GetCustLedgEntryInfo;
        "Account Type"::Vendor:
          GetVendLedgEntryInfo;
        "Account Type"::"Bank Account":
          GetBankAccLedgEntryInfo;
      END;
    END;

    LOCAL PROCEDURE GetCustLedgEntryInfo@24();
    VAR
      CustLedgEntry@1000 : Record 21;
    BEGIN
      CustLedgEntry.GET("Applies-to Entry No.");
      Description := CustLedgEntry.Description;
      "Posting Date" := CustLedgEntry."Posting Date";
      "Due Date" := CustLedgEntry."Due Date";
      "Document Type" := CustLedgEntry."Document Type";
      "Document No." := CustLedgEntry."Document No.";
      "External Document No." := CustLedgEntry."External Document No.";
      "Currency Code" := CustLedgEntry."Currency Code";
    END;

    LOCAL PROCEDURE GetVendLedgEntryInfo@25();
    VAR
      VendLedgEntry@1000 : Record 25;
    BEGIN
      VendLedgEntry.GET("Applies-to Entry No.");
      Description := VendLedgEntry.Description;
      "Posting Date" := VendLedgEntry."Posting Date";
      "Due Date" := VendLedgEntry."Due Date";
      "Document Type" := VendLedgEntry."Document Type";
      "Document No." := VendLedgEntry."Document No.";
      "External Document No." := VendLedgEntry."External Document No.";
      "Currency Code" := VendLedgEntry."Currency Code";
    END;

    LOCAL PROCEDURE GetBankAccLedgEntryInfo@26();
    VAR
      BankAccLedgEntry@1000 : Record 271;
    BEGIN
      BankAccLedgEntry.GET("Applies-to Entry No.");
      Description := BankAccLedgEntry.Description;
      "Posting Date" := BankAccLedgEntry."Posting Date";
      "Due Date" := 0D;
      "Document Type" := BankAccLedgEntry."Document Type";
      "Document No." := BankAccLedgEntry."Document No.";
      "External Document No." := BankAccLedgEntry."External Document No.";
      "Currency Code" := BankAccLedgEntry."Currency Code";
    END;

    PROCEDURE GetAmtAppliedToOtherStmtLines@7() : Decimal;
    VAR
      AppliedPmtEntry@1000 : Record 1294;
    BEGIN
      IF "Applies-to Entry No." = 0 THEN
        EXIT(0);

      AppliedPmtEntry := Rec;
      AppliedPmtEntry.FilterEntryAppliedToOtherStmtLines;
      AppliedPmtEntry.CALCSUMS("Applied Amount");
      EXIT(AppliedPmtEntry."Applied Amount");
    END;

    PROCEDURE FilterEntryAppliedToOtherStmtLines@28();
    BEGIN
      RESET;
      SETRANGE("Statement Type","Statement Type");
      SETRANGE("Bank Account No.","Bank Account No.");
      SETRANGE("Statement No.","Statement No.");
      SETFILTER("Statement Line No.",'<>%1',"Statement Line No.");
      SETRANGE("Account Type","Account Type");
      SETRANGE("Account No.","Account No.");
      SETRANGE("Applies-to Entry No.","Applies-to Entry No.");
    END;

    PROCEDURE FilterAppliedPmtEntry@9(BankAccReconLine@1000 : Record 274);
    BEGIN
      RESET;
      SETRANGE("Statement Type",BankAccReconLine."Statement Type");
      SETRANGE("Bank Account No.",BankAccReconLine."Bank Account No.");
      SETRANGE("Statement No.",BankAccReconLine."Statement No.");
      SETRANGE("Statement Line No.",BankAccReconLine."Statement Line No.");
    END;

    PROCEDURE AppliedPmtEntryLinesExist@19(BankAccReconLine@1000 : Record 274) : Boolean;
    BEGIN
      FilterAppliedPmtEntry(BankAccReconLine);
      EXIT(FINDSET);
    END;

    PROCEDURE TransferFromBankAccReconLine@14(BankAccReconLine@1000 : Record 274);
    BEGIN
      "Statement Type" := BankAccReconLine."Statement Type";
      "Bank Account No." := BankAccReconLine."Bank Account No.";
      "Statement No." := BankAccReconLine."Statement No.";
      "Statement Line No." := BankAccReconLine."Statement Line No.";
    END;

    PROCEDURE ApplyFromBankStmtMatchingBuf@18(BankAccReconLine@1001 : Record 274;BankStmtMatchingBuffer@1000 : Record 1250;TextMapperAmount@1002 : Decimal;EntryNo@1004 : Integer);
    VAR
      BankPmtApplRule@1003 : Record 1252;
    BEGIN
      INIT;
      TransferFromBankAccReconLine(BankAccReconLine);
      VALIDATE("Account Type",BankStmtMatchingBuffer."Account Type");
      VALIDATE("Account No.",BankStmtMatchingBuffer."Account No.");
      IF (EntryNo < 0) AND (NOT BankStmtMatchingBuffer."One to Many Match") THEN BEGIN // text mapper
        VALIDATE("Applies-to Entry No.",0);
        VALIDATE("Applied Amount",TextMapperAmount);
      END ELSE
        VALIDATE("Applies-to Entry No.",EntryNo);
      VALIDATE(Quality,BankStmtMatchingBuffer.Quality);
      VALIDATE("Match Confidence",BankPmtApplRule.GetMatchConfidence(BankStmtMatchingBuffer.Quality));
      INSERT(TRUE);
    END;

    LOCAL PROCEDURE InclPmtDisc@20(UseAppliedAmt@1001 : Boolean) : Boolean;
    VAR
      BankAccReconLine@1000 : Record 274;
      AmtApplied@1002 : Decimal;
      PmtDiscDueDate@1004 : Date;
      PmtDiscToleranceDate@1005 : Date;
      RemPmtDiscPossible@1003 : Decimal;
    BEGIN
      GetDiscInfo(PmtDiscDueDate,PmtDiscToleranceDate,RemPmtDiscPossible);
      IF RemPmtDiscPossible = 0 THEN
        EXIT(FALSE);
      IF NOT ("Document Type" IN ["Document Type"::"Credit Memo","Document Type"::Invoice]) THEN
        EXIT(FALSE);
      BankAccReconLine.GET("Statement Type","Bank Account No.","Statement No.","Statement Line No.");
      IF BankAccReconLine."Transaction Date" > PmtDiscDueDate THEN
        EXIT(FALSE);

      IF UseAppliedAmt THEN
        AmtApplied := "Applied Amount" + GetAmtAppliedToOtherStmtLines
      ELSE
        AmtApplied := BankAccReconLine.Difference + GetOldAppliedAmtInclDisc + GetAmtAppliedToOtherStmtLines;

      EXIT(ABS(AmtApplied) >= ABS(GetRemAmt - RemPmtDiscPossible));
    END;

    PROCEDURE GetTotalAppliedAmountInclPmtDisc@29(IsDelete@1002 : Boolean) : Decimal;
    VAR
      AppliedPaymentEntry@1000 : Record 1294;
      TotalAmountIncludingPmtDisc@1001 : Decimal;
    BEGIN
      AppliedPaymentEntry.SETRANGE("Statement Type","Statement Type");
      AppliedPaymentEntry.SETRANGE("Statement No.","Statement No.");
      AppliedPaymentEntry.SETRANGE("Statement Line No.","Statement Line No.");
      AppliedPaymentEntry.SETRANGE("Bank Account No.","Bank Account No.");
      AppliedPaymentEntry.SETRANGE("Account Type","Account Type");
      AppliedPaymentEntry.SETRANGE("Account No.","Account No.");
      AppliedPaymentEntry.SETFILTER("Applies-to Entry No.",'<>%1',"Applies-to Entry No.");

      IF IsDelete THEN
        TotalAmountIncludingPmtDisc := 0
      ELSE
        TotalAmountIncludingPmtDisc := "Applied Amount" - "Applied Pmt. Discount";

      IF AppliedPaymentEntry.FINDSET THEN
        REPEAT
          TotalAmountIncludingPmtDisc += AppliedPaymentEntry."Applied Amount";
          TotalAmountIncludingPmtDisc -= AppliedPaymentEntry."Applied Pmt. Discount";
        UNTIL AppliedPaymentEntry.NEXT = 0;

      EXIT(TotalAmountIncludingPmtDisc);
    END;

    LOCAL PROCEDURE GetNoOfAppliedEntries@33(IsDelete@1000 : Boolean) : Decimal;
    VAR
      AppliedPaymentEntry@1002 : Record 1294;
    BEGIN
      AppliedPaymentEntry.SETRANGE("Statement Type","Statement Type");
      AppliedPaymentEntry.SETRANGE("Statement No.","Statement No.");
      AppliedPaymentEntry.SETRANGE("Statement Line No.","Statement Line No.");
      AppliedPaymentEntry.SETRANGE("Bank Account No.","Bank Account No.");
      AppliedPaymentEntry.SETRANGE("Account Type","Account Type");
      AppliedPaymentEntry.SETRANGE("Account No.","Account No.");
      AppliedPaymentEntry.SETFILTER("Applies-to Entry No.",'<>%1',"Applies-to Entry No.");

      IF IsDelete THEN
        EXIT(AppliedPaymentEntry.COUNT);

      EXIT(AppliedPaymentEntry.COUNT + 1);
    END;

    PROCEDURE UpdatePaymentDiscount@10(PaymentDiscountAmount@1000 : Decimal);
    VAR
      AppliedPaymentEntry@1001 : Record 1294;
    BEGIN
      // Payment discount must go to last entry only because of posting
      AppliedPaymentEntry.SETRANGE("Statement Type","Statement Type");
      AppliedPaymentEntry.SETRANGE("Bank Account No.","Bank Account No.");
      AppliedPaymentEntry.SETRANGE("Statement No.","Statement No.");
      AppliedPaymentEntry.SETRANGE("Account Type","Account Type");
      AppliedPaymentEntry.SETRANGE("Applies-to Entry No.","Applies-to Entry No.");
      AppliedPaymentEntry.SETFILTER("Applied Pmt. Discount",'<>0');

      IF AppliedPaymentEntry.FINDFIRST THEN
        AppliedPaymentEntry.RemovePaymentDiscount;

      IF PaymentDiscountAmount = 0 THEN
        EXIT;

      AppliedPaymentEntry.SETRANGE("Applied Pmt. Discount");

      IF AppliedPaymentEntry.FINDLAST THEN
        IF "Statement Line No." < AppliedPaymentEntry."Statement Line No." THEN BEGIN
          AppliedPaymentEntry.SetPaymentDiscount(PaymentDiscountAmount,TRUE);
          EXIT;
        END;

      SetPaymentDiscount(PaymentDiscountAmount,FALSE);
    END;

    PROCEDURE SetPaymentDiscount@42(PaymentDiscountAmount@1001 : Decimal;DifferentLineThanCurrent@1002 : Boolean);
    BEGIN
      VALIDATE("Applied Pmt. Discount",PaymentDiscountAmount);

      IF DifferentLineThanCurrent THEN BEGIN
        "Applied Amount" += "Applied Pmt. Discount";
        MODIFY(TRUE);
      END;
    END;

    PROCEDURE RemovePaymentDiscount@41();
    BEGIN
      "Applied Amount" := "Applied Amount" - "Applied Pmt. Discount";
      "Applied Pmt. Discount" := 0;
      MODIFY(TRUE);
    END;

    BEGIN
    END.
  }
}

