OBJECT Table 915 ATO Sales Buffer
{
  OBJECT-PROPERTIES
  {
    Date=09/15/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=ATO Sales Buffer;
               ESM=B£fer ventas ATO;
               FRC=Tampon vente ATO;
               ENC=ATO Sales Buffer];
  }
  FIELDS
  {
    { 1   ;   ;Type                ;Option        ;CaptionML=[ENU=Type;
                                                              ESM=Tipo;
                                                              FRC=Type;
                                                              ENC=Type];
                                                   OptionCaptionML=[ENU=,Sale,Total Sale,Assembly,Total Assembly;
                                                                    ESM=,Ventas,Ventas totales,Ensamblado,Ensamblado total;
                                                                    FRC=,Vente,Total vente,Assemblage,Total assemblage;
                                                                    ENC=,Sale,Total Sale,Assembly,Total Assembly];
                                                   OptionString=,Sale,Total Sale,Assembly,Total Assembly }
    { 2   ;   ;Order No.           ;Code20        ;CaptionML=[ENU=Order No.;
                                                              ESM=N§ pedido;
                                                              FRC=Nø commande;
                                                              ENC=Order No.] }
    { 3   ;   ;Item No.            ;Code20        ;CaptionML=[ENU=Item No.;
                                                              ESM=N§ producto;
                                                              FRC=Nø d'article;
                                                              ENC=Item No.] }
    { 4   ;   ;Parent Item No.     ;Code20        ;CaptionML=[ENU=Parent Item No.;
                                                              ESM=N§ L.M.;
                                                              FRC=Nø article reli‚;
                                                              ENC=Parent Item No.] }
    { 5   ;   ;Quantity            ;Decimal       ;CaptionML=[ENU=Quantity;
                                                              ESM=Cantidad;
                                                              FRC=Quantit‚;
                                                              ENC=Quantity] }
    { 6   ;   ;Sales Cost          ;Decimal       ;CaptionML=[ENU=Sales Cost;
                                                              ESM=Costo de ventas;
                                                              FRC=Co–t ventes;
                                                              ENC=Sales Cost] }
    { 7   ;   ;Sales Amount        ;Decimal       ;CaptionML=[ENU=Sales Amount;
                                                              ESM=Importe ventas;
                                                              FRC=Montant de ventes;
                                                              ENC=Sales Amount] }
    { 8   ;   ;Profit %            ;Decimal       ;CaptionML=[ENU=Profit %;
                                                              ESM=% Bf§ bruto;
                                                              FRC=% profit;
                                                              ENC=Profit %] }
    { 9   ;   ;Parent Description  ;Text50        ;CaptionML=[ENU=Parent Description;
                                                              ESM=Descripci¢n elemento primario;
                                                              FRC=Description parent;
                                                              ENC=Parent Description] }
  }
  KEYS
  {
    {    ;Type,Order No.,Item No.,Parent Item No. ;Clustered=Yes }
    {    ;Item No.,Type,Parent Item No.            }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE UpdateBufferWithComp@1(CompATOSalesBuffer@1000 : Record 915;ProfitPct@1001 : Decimal;IsTotal@1002 : Boolean);
    BEGIN
      INIT;
      IF IsTotal THEN
        Type := Type::"Total Assembly"
      ELSE
        Type := Type::Assembly;
      "Order No." := '';
      "Item No." := CompATOSalesBuffer."Item No.";
      IF NOT IsTotal THEN
        "Parent Item No." := CompATOSalesBuffer."Parent Item No."
      ELSE
        "Parent Item No." := '';
      IF FIND THEN BEGIN
        Quantity += CompATOSalesBuffer.Quantity;
        "Sales Cost" += CompATOSalesBuffer."Sales Cost";
        "Sales Amount" += CalcSalesAmt(CompATOSalesBuffer."Sales Cost",ProfitPct);
        "Profit %" := CalcSalesProfitPct("Sales Cost","Sales Amount");
        MODIFY;
        EXIT;
      END;

      Quantity := CompATOSalesBuffer.Quantity;
      "Sales Cost" := CompATOSalesBuffer."Sales Cost";
      "Sales Amount" := CalcSalesAmt(CompATOSalesBuffer."Sales Cost",ProfitPct);
      "Profit %" := ProfitPct;
      INSERT;
    END;

    PROCEDURE UpdateBufferWithItemLedgEntry@2(ItemLedgEntry@1000 : Record 32;IsTotal@1001 : Boolean);
    BEGIN
      ItemLedgEntry.CALCFIELDS("Cost Amount (Expected)","Cost Amount (Actual)","Sales Amount (Actual)","Sales Amount (Expected)");

      INIT;
      "Item No." := ItemLedgEntry."Item No.";
      "Order No." := '';
      "Parent Item No." := '';
      CASE ItemLedgEntry."Entry Type" OF
        ItemLedgEntry."Entry Type"::Sale:
          IF IsTotal THEN
            Type := Type::"Total Sale"
          ELSE BEGIN
            Type := Type::Sale;
            "Order No." := FindATO(ItemLedgEntry);
          END;
        ItemLedgEntry."Entry Type"::"Assembly Consumption":
          BEGIN
            IF IsTotal THEN
              Type := Type::"Total Assembly"
            ELSE
              Type := Type::Assembly;
            "Parent Item No." := ItemLedgEntry."Source No.";
          END;
      END;
      IF FIND THEN BEGIN
        Quantity += -ItemLedgEntry.Quantity;
        "Sales Cost" += -(ItemLedgEntry."Cost Amount (Expected)" + ItemLedgEntry."Cost Amount (Actual)");
        "Sales Amount" += ItemLedgEntry."Sales Amount (Actual)" + ItemLedgEntry."Sales Amount (Expected)";
        "Profit %" := CalcSalesProfitPct("Sales Cost","Sales Amount");
        MODIFY;
        EXIT;
      END;

      Quantity := -ItemLedgEntry.Quantity;
      "Sales Cost" := -(ItemLedgEntry."Cost Amount (Expected)" + ItemLedgEntry."Cost Amount (Actual)");
      "Sales Amount" := ItemLedgEntry."Sales Amount (Actual)" + ItemLedgEntry."Sales Amount (Expected)";
      "Profit %" := CalcSalesProfitPct("Sales Cost","Sales Amount");
      INSERT;
    END;

    LOCAL PROCEDURE FindATO@3(ItemLedgEntry@1003 : Record 32) : Code[20];
    VAR
      PostedATOLink@1000 : Record 914;
      ItemApplnEntry@1001 : Record 339;
    BEGIN
      IF NOT ItemLedgEntry."Assemble to Order" THEN
        EXIT('');

      IF ItemLedgEntry."Document Type" <> ItemLedgEntry."Document Type"::"Sales Shipment" THEN
        EXIT('');

      PostedATOLink.SETCURRENTKEY("Document Type","Document No.","Document Line No.");
      PostedATOLink.SETRANGE("Document Type",PostedATOLink."Document Type"::"Sales Shipment");
      PostedATOLink.SETRANGE("Document No.",ItemLedgEntry."Document No.");
      PostedATOLink.SETRANGE("Document Line No.",ItemLedgEntry."Document Line No.");
      IF PostedATOLink.FINDFIRST THEN
        EXIT(PostedATOLink."Assembly Order No.");

      IF ItemLedgEntry.Correction THEN
        IF ItemApplnEntry.AppliedFromEntryExists(ItemLedgEntry."Entry No.") THEN BEGIN
          ItemLedgEntry.GET(ItemApplnEntry."Outbound Item Entry No.");
          EXIT(FindATO(ItemLedgEntry));
        END;
    END;

    LOCAL PROCEDURE CalcSalesAmt@5(SalesCost@1001 : Decimal;ProfitPct@1000 : Decimal) : Decimal;
    BEGIN
      IF ProfitPct = 100 THEN
        EXIT(0);
      EXIT(ROUND(100 * SalesCost / (100 - ProfitPct)))
    END;

    LOCAL PROCEDURE CalcSalesProfitPct@6(CostAmt@1000 : Decimal;SalesAmt@1001 : Decimal) : Decimal;
    BEGIN
      IF SalesAmt = 0 THEN
        EXIT(0);
      EXIT(ROUND(100 * (SalesAmt - CostAmt) / SalesAmt));
    END;

    BEGIN
    END.
  }
}

