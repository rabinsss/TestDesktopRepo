OBJECT Table 1053 Line Fee Note on Report Hist.
{
  OBJECT-PROPERTIES
  {
    Date=09/15/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    Permissions=TableData 1053=rimd;
    CaptionML=[ENU=Line Fee Note on Report Hist.;
               ESM=Nota de recargo l¡nea en historial informes;
               FRC=Note de frais de ligne sur l'hist. du rapport;
               ENC=Line Fee Note on Report Hist.];
    LookupPageID=Page1053;
    DrillDownPageID=Page1053;
  }
  FIELDS
  {
    { 1   ;   ;Cust. Ledger Entry No;Integer      ;TableRelation="Cust. Ledger Entry"."Entry No." WHERE (Entry No.=FIELD(Cust. Ledger Entry No));
                                                   CaptionML=[ENU=Cust. Ledger Entry No;
                                                              ESM=N§ mov. cliente;
                                                              FRC=Nø s‚quence ‚criture clt;
                                                              ENC=Cust. Ledger Entry No];
                                                   Editable=No }
    { 2   ;   ;Due Date            ;Date          ;CaptionML=[ENU=Due Date;
                                                              ESM=Fecha vencimiento;
                                                              FRC=Date d'‚ch‚ance;
                                                              ENC=Due Date];
                                                   Editable=No }
    { 3   ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   CaptionML=[ENU=Language Code;
                                                              ESM=C¢d. idioma;
                                                              FRC=Code langue;
                                                              ENC=Language Code];
                                                   NotBlank=Yes;
                                                   Editable=No }
    { 4   ;   ;Reminder Terms Code ;Code10        ;CaptionML=[ENU=Reminder Terms Code;
                                                              ESM=C¢d. recordatorio;
                                                              FRC=Code modalit‚ de rappel;
                                                              ENC=Reminder Terms Code] }
    { 5   ;   ;Reminder Level No   ;Integer       ;CaptionML=[ENU=Reminder Level No;
                                                              ESM=N.§ nivel recordatorio;
                                                              FRC=Nø du niveau de rappel;
                                                              ENC=Reminder Level No] }
    { 6   ;   ;ReportText          ;Text200       ;CaptionML=[ENU=ReportText;
                                                              ESM=ReportText;
                                                              FRC=ReportText;
                                                              ENC=ReportText];
                                                   NotBlank=Yes;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Cust. Ledger Entry No,Due Date,Language Code,Reminder Terms Code,Reminder Level No;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    LOCAL PROCEDURE GetLineFeeNoteOnReport@120(CustLedgerEntry@1001 : Record 21;ReminderLevel@1012 : Record 293;LineFeeNoteOnReport@1000 : Text[150];DueDate@1004 : Date) : Text[200];
    VAR
      GeneralLedgerSetup@1006 : Record 98;
      AdditionalFeePerLine@1003 : Decimal;
      CurrencyCode@1007 : Code[10];
      MarginalPerc@1002 : Decimal;
    BEGIN
      CustLedgerEntry.CALCFIELDS("Original Amount");
      AdditionalFeePerLine :=
        ReminderLevel.GetAdditionalFee(
          CustLedgerEntry."Original Amount",CustLedgerEntry."Currency Code",TRUE,CustLedgerEntry."Posting Date");
      IF AdditionalFeePerLine = 0 THEN
        EXIT;

      IF CustLedgerEntry."Currency Code" = '' THEN BEGIN
        GeneralLedgerSetup.GET;
        CurrencyCode := GeneralLedgerSetup."LCY Code";
      END ELSE
        CurrencyCode := CustLedgerEntry."Currency Code";

      IF CustLedgerEntry."Original Amount" > 0 THEN
        MarginalPerc := ROUND(AdditionalFeePerLine * 100 / CustLedgerEntry."Original Amount",0.01);

      EXIT(STRSUBSTNO(LineFeeNoteOnReport,FORMAT(ROUND(AdditionalFeePerLine,0.01),0,9),CurrencyCode,DueDate,FORMAT(MarginalPerc,0,9)));
    END;

    LOCAL PROCEDURE InsertRec@1(ReminderLevel@1003 : Record 293;CustLedgerEntryNo@1001 : Integer;DueDate@1002 : Date;LanguageCode@1004 : Code[10];LineFeeNoteOnReport@1005 : Text[200]);
    VAR
      LineFeeNoteOnReportHist@1000 : Record 1053;
    BEGIN
      IF LineFeeNoteOnReport <> '' THEN BEGIN
        LineFeeNoteOnReportHist.INIT;
        LineFeeNoteOnReportHist."Cust. Ledger Entry No" := CustLedgerEntryNo;
        LineFeeNoteOnReportHist."Due Date" := DueDate;
        LineFeeNoteOnReportHist."Language Code" := LanguageCode;
        LineFeeNoteOnReportHist."Reminder Terms Code" := ReminderLevel."Reminder Terms Code";
        LineFeeNoteOnReportHist."Reminder Level No" := ReminderLevel."No.";
        LineFeeNoteOnReportHist.ReportText := LineFeeNoteOnReport;
        LineFeeNoteOnReportHist.INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE InsertTransLineFeeNoteOnReport@5(CustLedgerEntry@1004 : Record 21;ReminderTerms@1000 : Record 292;ReminderLevel@1001 : Record 293;DueDate@1005 : Date);
    VAR
      Language@1006 : Record 8;
      ReminderTermsTranslation@1007 : Record 1052;
      AddTextOnReport@1003 : Text[200];
      AddTextOnReportDefault@1002 : Text[200];
      DefaultLanguageCode@1014 : Code[10];
    BEGIN
      // insert default language
      IF ReminderTerms."Note About Line Fee on Report" <> '' THEN BEGIN
        DefaultLanguageCode := Language.GetUserLanguage;
        IF NOT ReminderTermsTranslation.GET(ReminderTerms.Code,DefaultLanguageCode) THEN BEGIN
          AddTextOnReportDefault := GetLineFeeNoteOnReport(CustLedgerEntry,ReminderLevel,
              ReminderTerms."Note About Line Fee on Report",DueDate);
          InsertRec(ReminderLevel,CustLedgerEntry."Entry No.",DueDate,Language.GetUserLanguage,AddTextOnReportDefault);
        END;
      END;

      // insert Reminder Terms Translation records
      ReminderTermsTranslation.SETRANGE("Reminder Terms Code",ReminderLevel."Reminder Terms Code");
      IF ReminderTermsTranslation.FINDSET THEN
        REPEAT
          AddTextOnReport :=
            GetLineFeeNoteOnReport(CustLedgerEntry,ReminderLevel,ReminderTermsTranslation."Note About Line Fee on Report",DueDate);
          InsertRec(ReminderLevel,
            CustLedgerEntry."Entry No.",
            DueDate,
            ReminderTermsTranslation."Language Code",
            AddTextOnReport);

        UNTIL ReminderTermsTranslation.NEXT = 0;
    END;

    PROCEDURE Save@36(CustLedgerEntry@1003 : Record 21);
    VAR
      Customer@1004 : Record 18;
      ReminderTerms@1001 : Record 292;
      ReminderLevel@1002 : Record 293;
      DueDate@1007 : Date;
    BEGIN
      IF NOT Customer.GET(CustLedgerEntry."Customer No.") THEN
        EXIT;

      IF NOT ReminderTerms.GET(Customer."Reminder Terms Code") THEN
        EXIT;

      IF NOT ReminderTerms."Post Add. Fee per Line" THEN
        EXIT;

      ReminderLevel.SETRANGE("Reminder Terms Code",ReminderTerms.Code);
      IF ReminderLevel.FINDSET THEN BEGIN
        DueDate := CALCDATE(ReminderLevel."Grace Period",CustLedgerEntry."Due Date");
        InsertTransLineFeeNoteOnReport(CustLedgerEntry,ReminderTerms,ReminderLevel,DueDate);
        WHILE ReminderLevel.NEXT <> 0 DO BEGIN
          DueDate := CALCDATE(ReminderLevel."Grace Period",DueDate);
          InsertTransLineFeeNoteOnReport(CustLedgerEntry,ReminderTerms,ReminderLevel,DueDate);
        END;
      END;
    END;

    BEGIN
    END.
  }
}

