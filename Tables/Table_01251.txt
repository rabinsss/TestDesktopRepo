OBJECT Table 1251 Text-to-Account Mapping
{
  OBJECT-PROPERTIES
  {
    Date=10/23/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.43402;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               CheckMappingText;
             END;

    OnModify=BEGIN
               CheckMappingText;
             END;

    CaptionML=[ENU=Text-to-Account Mapping;
               ESM=Asignaci¢n de texto a cuenta;
               FRC=Correspondance texte et compte;
               ENC=Text-to-Account Mapping];
  }
  FIELDS
  {
    { 1   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ESM=N§ l¡nea;
                                                              FRC=Nø ligne;
                                                              ENC=Line No.] }
    { 2   ;   ;Mapping Text        ;Text250       ;OnValidate=BEGIN
                                                                "Mapping Text" := COPYSTR(RecordMatchMgt.Trim("Mapping Text"),1,250);
                                                              END;

                                                   CaptionML=[ENU=Mapping Text;
                                                              ESM=Asignando texto;
                                                              FRC=Correspondance texte;
                                                              ENC=Mapping Text];
                                                   NotBlank=Yes }
    { 3   ;   ;Debit Acc. No.      ;Code20        ;TableRelation="G/L Account" WHERE (Account Type=CONST(Posting),
                                                                                      Blocked=CONST(No),
                                                                                      Direct Posting=CONST(Yes));
                                                   CaptionML=[ENU=Debit Acc. No.;
                                                              ESM=N.§ cta. d‚bito;
                                                              FRC=Nø cpte d‚bit;
                                                              ENC=Debit Acc. No.] }
    { 4   ;   ;Credit Acc. No.     ;Code20        ;TableRelation="G/L Account" WHERE (Account Type=CONST(Posting),
                                                                                      Blocked=CONST(No),
                                                                                      Direct Posting=CONST(Yes));
                                                   CaptionML=[ENU=Credit Acc. No.;
                                                              ESM=N.§ cta. cr‚dito;
                                                              FRC=Nø cpte cr‚dit;
                                                              ENC=Credit Acc. No.] }
    { 5   ;   ;Bal. Source Type    ;Option        ;OnValidate=BEGIN
                                                                VALIDATE("Bal. Source No.",'');
                                                              END;

                                                   CaptionML=[ENU=Bal. Source Type;
                                                              ESM=Tipo origen contr.;
                                                              FRC=Type origine solde;
                                                              ENC=Bal. Source Type];
                                                   OptionCaptionML=[ENU=G/L Account,Customer,Vendor,Bank Account;
                                                                    ESM=Cuenta,Cliente,Proveedor,Banco;
                                                                    FRC=Compte du grand livre,Client,Fournisseur,Compte bancaire;
                                                                    ENC=G/L Account,Customer,Vendor,Bank Account];
                                                   OptionString=G/L Account,Customer,Vendor,Bank Account }
    { 6   ;   ;Bal. Source No.     ;Code20        ;TableRelation=IF (Bal. Source Type=CONST(G/L Account)) "G/L Account" WHERE (Account Type=CONST(Posting),
                                                                                                                               Blocked=CONST(No))
                                                                                                                               ELSE IF (Bal. Source Type=CONST(Customer)) Customer
                                                                                                                               ELSE IF (Bal. Source Type=CONST(Vendor)) Vendor
                                                                                                                               ELSE IF (Bal. Source Type=CONST(Bank Account)) "Bank Account";
                                                   CaptionML=[ENU=Bal. Source No.;
                                                              ESM=N.§ origen contr.;
                                                              FRC=Nø origine solde;
                                                              ENC=Bal. Source No.] }
  }
  KEYS
  {
    {    ;Line No.                                ;Clustered=Yes }
    {    ;Mapping Text                             }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      RecordMatchMgt@1000 : Codeunit 1251;
      AlreadyExistErr@1001 : TextConst '@@@=%1 is the field name (mapping text) and %2 is the value currently inserted.;ENU="Entry with %1=''%2'' already exists.";ESM="La entrada con %1=''%2'' ya existe.";FRC="L''‚criture avec %1=®ÿ%2ÿ¯ existe d‚j….";ENC="Entry with %1=''%2'' already exists."';
      BalAccountNoErr@1002 : TextConst '@@@=%1 is field caption "Bal. Source No.", %2 is field caption "Bal. Source Type", %3 is option: Vendor or Customer. %4 is field caption Mapping text and %5 is the record value in this field.;ENU=%1 must have a value if %2 is %3.\\Affected %4: %5.;ESM=%1 debe tener un valor si %2 es %3.\\Afectado %4: %5.;FRC=%1 doit avoir une valeur si %2 est %3.\\Valeur de %4ÿ: %5.;ENC=%1 must have a value if %2 is %3.\\Affected %4: %5.';
      GLAccountNoErr@1003 : TextConst '@@@=%1 is field caption "Debit Acc. No.", %2 is field caption "Credit Acc. No.", %3 is field caption ""Bal. Source Type" and %4 is option: G/L Account. %5 is field caption Mapping text and %6 is the record value in this field.;ENU=%1 or %2 must have a value if %3 is %4.\\Affected %5: %6.;ESM=%1 o %2 deben tener un valor si %3 es %4.\\Afectado %5: %6.;FRC=%1 ou %2 doit avoir une valeur si %3 est %4.\\Valeur de %5ÿ: %6.;ENC=%1 or %2 must have a value if %3 is %4.\\Affected %5: %6.';

    PROCEDURE InsertRec@1(GenJnlLine@1000 : Record 81);
    VAR
      TextToAccMapping@1001 : Record 1251;
      LastLineNo@1002 : Integer;
    BEGIN
      IF RecordMatchMgt.Trim(GenJnlLine.Description) <> '' THEN BEGIN
        TextToAccMapping.SETFILTER("Mapping Text",'%1','@' + RecordMatchMgt.Trim(GenJnlLine.Description));
        IF TextToAccMapping.FINDFIRST THEN
          COPY(TextToAccMapping)
        ELSE BEGIN
          TextToAccMapping.RESET;
          IF TextToAccMapping.FINDLAST THEN
            LastLineNo := TextToAccMapping."Line No.";

          INIT;
          "Line No." := LastLineNo + 10000;
          VALIDATE("Mapping Text",GenJnlLine.Description);
          SetBalSourceType(GenJnlLine);
          IF "Bal. Source Type" <> "Bal. Source Type"::"G/L Account" THEN
            "Bal. Source No." := GenJnlLine."Account No."
          ELSE BEGIN
            "Debit Acc. No." := GenJnlLine."Account No.";
            "Credit Acc. No." := GenJnlLine."Account No.";
          END;

          IF "Mapping Text" <> '' THEN
            INSERT;
        END;

        RESET;
      END;

      PAGE.RUN(PAGE::"Text-to-Account Mapping",Rec);
    END;

    PROCEDURE InsertRecFromBankAccReconciliationLine@7(BankAccReconciliationLine@1000 : Record 274);
    VAR
      TextToAccMapping@1001 : Record 1251;
      LastLineNo@1002 : Integer;
    BEGIN
      IF RecordMatchMgt.Trim(BankAccReconciliationLine."Transaction Text") <> '' THEN BEGIN
        TextToAccMapping.SETFILTER("Mapping Text",'%1','@' + RecordMatchMgt.Trim(BankAccReconciliationLine."Transaction Text"));
        IF TextToAccMapping.FINDFIRST THEN
          COPY(TextToAccMapping)
        ELSE BEGIN
          TextToAccMapping.RESET;
          IF TextToAccMapping.FINDLAST THEN
            LastLineNo := TextToAccMapping."Line No.";

          INIT;
          "Line No." := LastLineNo + 10000;
          VALIDATE("Mapping Text",BankAccReconciliationLine."Transaction Text");

          SetSourceTypeFromReconcLine(BankAccReconciliationLine);
          IF "Bal. Source Type" <> "Bal. Source Type"::"G/L Account" THEN
            "Bal. Source No." := BankAccReconciliationLine."Account No."
          ELSE BEGIN
            "Debit Acc. No." := BankAccReconciliationLine."Account No.";
            "Credit Acc. No." := BankAccReconciliationLine."Account No.";
          END;

          IF "Mapping Text" <> '' THEN
            INSERT;
        END;

        RESET;

        COMMIT;
      END;

      PAGE.RUNMODAL(PAGE::"Text-to-Account Mapping",Rec);
    END;

    PROCEDURE GetAccountNo@2(Amount@1000 : Decimal) : Code[20];
    BEGIN
      IF Amount >= 0 THEN
        EXIT("Debit Acc. No.");

      EXIT("Credit Acc. No.");
    END;

    PROCEDURE GetPaymentDocType@5(VAR PaymentDocType@1002 : Option;ActualSourceType@1005 : Option;Amount@1000 : Decimal);
    VAR
      GenJournalLine@1004 : Record 81;
      ExpectedSourceType@1001 : Option;
    BEGIN
      IF Amount >= 0 THEN
        ExpectedSourceType := "Bal. Source Type"::Vendor
      ELSE
        ExpectedSourceType := "Bal. Source Type"::Customer;

      IF ExpectedSourceType = ActualSourceType THEN
        PaymentDocType := GenJournalLine."Document Type"::Payment
      ELSE
        PaymentDocType := GenJournalLine."Document Type"::Refund;
    END;

    PROCEDURE GetDocTypeForPmt@4(VAR DocType@1000 : Option;PaymentDocType@1002 : Option);
    VAR
      GenJournalLine@1004 : Record 81;
    BEGIN
      CASE PaymentDocType OF
        GenJournalLine."Document Type"::Payment:
          DocType := GenJournalLine."Document Type"::Invoice;
        GenJournalLine."Document Type"::Refund:
          DocType := GenJournalLine."Document Type"::"Credit Memo";
      END;
    END;

    LOCAL PROCEDURE SetBalSourceType@3(GenJournalLine@1000 : Record 81);
    BEGIN
      CASE GenJournalLine."Account Type" OF
        GenJournalLine."Account Type"::Customer:
          "Bal. Source Type" := "Bal. Source Type"::Customer;
        GenJournalLine."Account Type"::Vendor:
          "Bal. Source Type" := "Bal. Source Type"::Vendor;
      END;
    END;

    LOCAL PROCEDURE SetSourceTypeFromReconcLine@9(BankAccReconciliationLine@1001 : Record 274);
    BEGIN
      CASE BankAccReconciliationLine."Account Type" OF
        BankAccReconciliationLine."Account Type"::Customer:
          "Bal. Source Type" := "Bal. Source Type"::Customer;
        BankAccReconciliationLine."Account Type"::Vendor:
          "Bal. Source Type" := "Bal. Source Type"::Vendor;
      END;
    END;

    PROCEDURE IsBalSourceNoEnabled@6() : Boolean;
    BEGIN
      EXIT(NOT ("Bal. Source Type" IN ["Bal. Source Type"::"G/L Account","Bal. Source Type"::"Bank Account"]));
    END;

    LOCAL PROCEDURE CheckMappingText@8();
    VAR
      TextToAccMapping@1000 : Record 1251;
    BEGIN
      TESTFIELD("Mapping Text");

      TextToAccMapping.SETRANGE("Mapping Text","Mapping Text");
      TextToAccMapping.SETFILTER("Line No.",'<>%1',"Line No.");
      IF NOT TextToAccMapping.ISEMPTY THEN
        ERROR(AlreadyExistErr,FIELDCAPTION("Mapping Text"),"Mapping Text");
    END;

    PROCEDURE CheckEntriesAreConsistent@10();
    VAR
      TextToAccMapping@1000 : Record 1251;
    BEGIN
      WITH TextToAccMapping DO BEGIN
        SETFILTER("Bal. Source Type",'%1|%2',"Bal. Source Type"::Vendor,"Bal. Source Type"::Customer);
        SETRANGE("Bal. Source No.",'');
        IF FINDFIRST THEN
          ERROR(BalAccountNoErr,FIELDCAPTION("Bal. Source No."),FIELDCAPTION("Bal. Source Type"),
            "Bal. Source Type",FIELDCAPTION("Mapping Text"),"Mapping Text");

        SETRANGE("Bal. Source Type","Bal. Source Type"::"G/L Account");
        SETRANGE("Debit Acc. No.",'');
        SETRANGE("Credit Acc. No.",'');
        IF FINDFIRST THEN
          ERROR(GLAccountNoErr,FIELDCAPTION("Debit Acc. No."),FIELDCAPTION("Credit Acc. No."),
            FIELDCAPTION("Bal. Source Type"),"Bal. Source Type"::"G/L Account",
            FIELDCAPTION("Mapping Text"),"Mapping Text");

        SETRANGE("Bal. Source Type","Bal. Source Type"::"Bank Account");
        SETRANGE("Debit Acc. No.",'');
        SETRANGE("Credit Acc. No.",'');
        IF FINDFIRST THEN
          ERROR(GLAccountNoErr,FIELDCAPTION("Debit Acc. No."),FIELDCAPTION("Credit Acc. No."),
            FIELDCAPTION("Bal. Source Type"),"Bal. Source Type"::"Bank Account",
            FIELDCAPTION("Mapping Text"),"Mapping Text");
      END;
    END;

    BEGIN
    END.
  }
}

