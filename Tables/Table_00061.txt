OBJECT Table 61 Electronic Document Format
{
  OBJECT-PROPERTIES
  {
    Date=11/26/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.43897;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               CheckCodeunitExist;
             END;

    OnModify=BEGIN
               CheckCodeunitExist;
             END;

    CaptionML=[ENU=Electronic Document Format;
               ESM=Formato de documento electr¢nico;
               FRC=Format de document ‚lectronique;
               ENC=Electronic Document Format];
    LookupPageID=Page363;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;CaptionML=[ENU=Code;
                                                              ESM=C¢digo;
                                                              FRC=Code;
                                                              ENC=Code];
                                                   NotBlank=Yes }
    { 2   ;   ;Usage               ;Option        ;CaptionML=[ENU=Usage;
                                                              ESM=Uso;
                                                              FRC=Utilisation;
                                                              ENC=Usage];
                                                   OptionCaptionML=[ENU=Sales Invoice,Sales Credit Memo,Sales Validation,Service Invoice,Service Credit Memo,Service Validation;
                                                                    ESM=Factura venta,Nota de cr‚dito venta,Validaci¢n de venta,Factura servicio,Nota de cr‚dito servicio,Validaci¢n de servicio;
                                                                    FRC=Facture vente,Note de cr‚dit vente,Validation vente,Facture service,Note de cr‚dit service,Validation service;
                                                                    ENC=Sales Invoice,Sales Credit Memo,Sales Validation,Service Invoice,Service Credit Memo,Service Validation];
                                                   OptionString=Sales Invoice,Sales Credit Memo,Sales Validation,Service Invoice,Service Credit Memo,Service Validation }
    { 4   ;   ;Description         ;Text250       ;CaptionML=[ENU=Description;
                                                              ESM=Descripci¢n;
                                                              FRC=Description;
                                                              ENC=Description] }
    { 5   ;   ;Codeunit ID         ;Integer       ;TableRelation=AllObj."Object ID" WHERE (Object Type=CONST(Codeunit));
                                                   CaptionML=[ENU=Codeunit ID;
                                                              ESM=Id. de Codeunit;
                                                              FRC=Code du Codeunit;
                                                              ENC=Codeunit ID];
                                                   NotBlank=Yes;
                                                   BlankZero=Yes }
    { 6   ;   ;Codeunit Caption    ;Text250       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObjWithCaption."Object Caption" WHERE (Object Type=CONST(Codeunit),
                                                                                                                Object ID=FIELD(Codeunit ID)));
                                                   CaptionML=[ENU=Codeunit Caption;
                                                              ESM=T¡tulo de Codeunit;
                                                              FRC=Libell‚ codeunit;
                                                              ENC=Codeunit Caption];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Code,Usage                              ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      UnSupportedTableTypeErr@1000 : TextConst '@@@="%1 = Sales Document Type";ENU=The %1 table is not supported.;ESM=No se admite la tabla %1.;FRC=La table %1 n''est pas prise en charge.;ENC=The %1 table is not supported.';
      NonExistingDocumentFormatErr@1001 : TextConst 'ENU=Electronic document format %1 does not exist for document type %2.;ESM=El formato de documento electr¢nico %1 no existe para el tipo de documento %2.;FRC=Le format de document ‚lectronique %1 n''existe pas pour le type de document %2.;ENC=Electronic document format %1 does not exist for document type %2.';
      UnSupportedDocumentTypeErr@1002 : TextConst 'ENU=Document type %1 is not supported.;ESM=El tipo de documento %1 no es compatible.;FRC=Le type de document %1 n''est pas pris en charge.;ENC=Document type %1 is not supported.';
      ElectronicDocumentNotCreatedErr@1003 : TextConst 'ENU=The electronic document has not been created.;ESM=El documento electr¢nico no se cre¢.;FRC=Le document ‚lectronique n''a pas ‚t‚ cr‚‚.;ENC=The electronic document has not been created.';
      ElectronicFormatErr@1004 : TextConst '@@@="%1=Specified Electronic Format";ENU=Electronic format %1 does not exist.;ESM=El formato electr¢nico %1 no existe.;FRC=Le format ‚lectronique %1 n''existe pas.;ENC=Electronic format %1 does not exist.';
      FileManagement@1005 : Codeunit 419;
      AttachmentFileNameTxt@1010 : TextConst '@@@="%1 = Company Name. %2 = Document Type %3 = Invoice No. %4 = File Extension";ENU=%1 - %2 %3.%4;ESM=%1 - %2 %3.%4;FRC=%1 - %2 %3.%4;ENC=%1 - %2 %3.%4';

    PROCEDURE SendElectronically@1(VAR ServerFilePath@1008 : Text[250];VAR ClientFileName@1009 : Text[250];DocumentVariant@1000 : Variant;ElectronicFormat@1003 : Code[20]);
    VAR
      ElectronicDocumentFormat@1001 : Record 61;
      RecordExportBuffer@1002 : Record 62;
      TempErrorMessage@1011 : TEMPORARY Record 700;
      ErrorMessage@1012 : Record 700;
      RecRef@1005 : RecordRef;
      DocumentUsage@1004 : 'Sales Invoice,Sales Credit Memo';
      StartID@1006 : Integer;
      EndID@1007 : Integer;
      IsMissingServerFile@1010 : Boolean;
    BEGIN
      GetDocumentUsage(DocumentUsage,DocumentVariant);

      IF NOT ElectronicDocumentFormat.GET(ElectronicFormat,DocumentUsage) THEN
        ERROR(STRSUBSTNO(NonExistingDocumentFormatErr,ElectronicFormat,FORMAT(DocumentUsage)));

      RecRef.GETTABLE(DocumentVariant);

      RecordExportBuffer.LOCKTABLE;
      IF RecRef.FINDSET THEN
        REPEAT
          CLEAR(RecordExportBuffer);
          RecordExportBuffer.RecordID := RecRef.RECORDID;
          RecordExportBuffer.ClientFileName :=
            GetAttachmentFileName(ElectronicDocumentFormat.GetDocumentNo(RecRef),GetDocumentType(RecRef),'xml');
          RecordExportBuffer.ZipFileName :=
            GetAttachmentFileName(ElectronicDocumentFormat.GetDocumentNo(RecRef),GetDocumentType(RecRef),'zip');
          RecordExportBuffer.INSERT(TRUE);
          IF StartID = 0 THEN
            StartID := RecordExportBuffer.ID;
          EndID := RecordExportBuffer.ID;
        UNTIL RecRef.NEXT = 0;

      RecordExportBuffer.SETRANGE(ID,StartID,EndID);
      IF RecordExportBuffer.FINDSET THEN
        REPEAT
          ErrorMessage.SetContext(RecordExportBuffer);
          ErrorMessage.ClearLog;

          CODEUNIT.RUN(ElectronicDocumentFormat."Codeunit ID",RecordExportBuffer);

          TempErrorMessage.CopyFromContext(RecordExportBuffer);
          ErrorMessage.ClearLog; // Clean up

          IF RecordExportBuffer.ServerFilePath = '' THEN
            IsMissingServerFile := TRUE;
        UNTIL RecordExportBuffer.NEXT = 0;

      // Display errors in case anything went wrong.
      TempErrorMessage.ShowErrorMessages(TRUE);
      IF IsMissingServerFile THEN
        ERROR(ElectronicDocumentNotCreatedErr);

      IF RecordExportBuffer.COUNT > 1 THEN BEGIN
        ServerFilePath := COPYSTR(FileManagement.CreateZipArchiveObject,1,250);
        ClientFileName := COPYSTR(RecordExportBuffer.ZipFileName,1,250);
        RecordExportBuffer.FINDSET;
        REPEAT
          FileManagement.AddFileToZipArchive(RecordExportBuffer.ServerFilePath,RecordExportBuffer.ClientFileName);
        UNTIL RecordExportBuffer.NEXT = 0;
        FileManagement.CloseZipArchive;
      END ELSE
        IF RecordExportBuffer.FINDFIRST THEN BEGIN
          ServerFilePath := RecordExportBuffer.ServerFilePath;
          ClientFileName := RecordExportBuffer.ClientFileName;
        END;

      RecordExportBuffer.DELETEALL;
    END;

    PROCEDURE ValidateElectronicServiceDocument@11(ServiceHeader@1000 : Record 5900;ElectronicFormat@1001 : Code[20]);
    VAR
      ElectronicDocumentFormat@1002 : Record 61;
    BEGIN
      IF NOT ElectronicDocumentFormat.GET(ElectronicFormat,ElectronicDocumentFormat.Usage::"Service Validation") THEN
        EXIT; // no validation required

      CODEUNIT.RUN(ElectronicDocumentFormat."Codeunit ID",ServiceHeader);
    END;

    PROCEDURE ValidateElectronicSalesDocument@3(SalesHeader@1000 : Record 36;ElectronicFormat@1001 : Code[20]);
    VAR
      ElectronicDocumentFormat@1002 : Record 61;
    BEGIN
      IF NOT ElectronicDocumentFormat.GET(ElectronicFormat,ElectronicDocumentFormat.Usage::"Sales Validation") THEN
        EXIT; // no validation required

      CODEUNIT.RUN(ElectronicDocumentFormat."Codeunit ID",SalesHeader);
    END;

    PROCEDURE GetAttachmentFileName@30(DocumentNo@1003 : Code[20];DocumentType@1005 : Text;Extension@1001 : Code[3]) : Text[250];
    VAR
      FileMgt@1000 : Codeunit 419;
    BEGIN
      EXIT(
        COPYSTR(
          STRSUBSTNO(AttachmentFileNameTxt,FileMgt.StripNotsupportChrInFileName(COMPANYNAME),DocumentType,DocumentNo,Extension),1,250));
    END;

    PROCEDURE GetDocumentUsage@4(VAR DocumentUsage@1000 : Option;DocumentVariant@1001 : Variant);
    VAR
      ElectronicDocumentFormat@1006 : Record 61;
      DocumentRecordRef@1003 : RecordRef;
    BEGIN
      DocumentRecordRef.GETTABLE(DocumentVariant);
      CASE DocumentRecordRef.NUMBER OF
        DATABASE::"Sales Invoice Header":
          DocumentUsage := ElectronicDocumentFormat.Usage::"Sales Invoice";
        DATABASE::"Sales Cr.Memo Header":
          DocumentUsage := ElectronicDocumentFormat.Usage::"Sales Credit Memo";
        DATABASE::"Service Invoice Header":
          DocumentUsage := ElectronicDocumentFormat.Usage::"Service Invoice";
        DATABASE::"Service Cr.Memo Header":
          DocumentUsage := ElectronicDocumentFormat.Usage::"Service Credit Memo";
        DATABASE::"Sales Header":
          GetDocumentUsageForSalesHeader(DocumentUsage,DocumentVariant);
        DATABASE::"Service Header":
          GetDocumentUsageForServiceHeader(DocumentUsage,DocumentVariant);
        ELSE
          ERROR(STRSUBSTNO(UnSupportedTableTypeErr,DocumentRecordRef.CAPTION));
      END;
    END;

    PROCEDURE GetDocumentNo@7(DocumentVariant@1001 : Variant) : Code[20];
    VAR
      SalesInvoiceHeader@1000 : Record 112;
      SalesCrMemoHeader@1002 : Record 114;
      SalesHeader@1004 : Record 36;
      ServiceInvoiceHeader@1005 : Record 5992;
      ServiceCrMemoHeader@1006 : Record 5994;
      ServiceHeader@1007 : Record 5900;
      DocumentRecordRef@1003 : RecordRef;
    BEGIN
      IF DocumentVariant.ISRECORD THEN
        DocumentRecordRef.GETTABLE(DocumentVariant)
      ELSE
        IF DocumentVariant.ISRECORDREF THEN
          DocumentRecordRef := DocumentVariant;

      CASE DocumentRecordRef.NUMBER OF
        DATABASE::"Sales Invoice Header":
          BEGIN
            SalesInvoiceHeader := DocumentVariant;
            EXIT(SalesInvoiceHeader."No.");
          END;
        DATABASE::"Sales Cr.Memo Header":
          BEGIN
            SalesCrMemoHeader := DocumentVariant;
            EXIT(SalesCrMemoHeader."No.");
          END;
        DATABASE::"Service Invoice Header":
          BEGIN
            ServiceInvoiceHeader := DocumentVariant;
            EXIT(ServiceInvoiceHeader."No.");
          END;
        DATABASE::"Service Cr.Memo Header":
          BEGIN
            ServiceCrMemoHeader := DocumentVariant;
            EXIT(ServiceCrMemoHeader."No.");
          END;
        DATABASE::"Service Header":
          BEGIN
            ServiceHeader := DocumentVariant;
            EXIT(ServiceHeader."No.");
          END;
        DATABASE::"Sales Header":
          BEGIN
            SalesHeader := DocumentVariant;
            EXIT(SalesHeader."No.");
          END;
        ELSE
          ERROR(STRSUBSTNO(UnSupportedTableTypeErr,DocumentRecordRef.CAPTION));
      END;
    END;

    LOCAL PROCEDURE GetDocumentUsageForSalesHeader@2(VAR DocumentUsage@1001 : 'Sales Invoice,Sales Credit Memo';SalesHeader@1000 : Record 36);
    VAR
      ElectronicDocumentFormat@1002 : Record 61;
    BEGIN
      CASE SalesHeader."Document Type" OF
        SalesHeader."Document Type"::Invoice:
          DocumentUsage := ElectronicDocumentFormat.Usage::"Sales Invoice";
        SalesHeader."Document Type"::"Credit Memo":
          DocumentUsage := ElectronicDocumentFormat.Usage::"Sales Credit Memo";
        ELSE
          ERROR(STRSUBSTNO(UnSupportedDocumentTypeErr,FORMAT(SalesHeader."Document Type")));
      END;
    END;

    LOCAL PROCEDURE GetDocumentUsageForServiceHeader@9(VAR DocumentUsage@1001 : 'Sales Invoice,Sales Credit Memo';ServiceHeader@1000 : Record 5900);
    VAR
      ElectronicDocumentFormat@1002 : Record 61;
    BEGIN
      CASE ServiceHeader."Document Type" OF
        ServiceHeader."Document Type"::Invoice:
          DocumentUsage := ElectronicDocumentFormat.Usage::"Sales Invoice";
        ServiceHeader."Document Type"::"Credit Memo":
          DocumentUsage := ElectronicDocumentFormat.Usage::"Sales Credit Memo";
        ELSE
          ERROR(STRSUBSTNO(UnSupportedDocumentTypeErr,FORMAT(ServiceHeader."Document Type")));
      END;
    END;

    LOCAL PROCEDURE CheckCodeunitExist@8();
    VAR
      AllObj@1000 : Record 2000000038;
    BEGIN
      AllObj.GET(AllObj."Object Type"::Codeunit,"Codeunit ID");
    END;

    PROCEDURE ValidateElectronicFormat@5(ElectronicFormat@1001 : Code[20]);
    VAR
      ElectronicDocumentFormat@1000 : Record 61;
    BEGIN
      ElectronicDocumentFormat.SETRANGE(Code,ElectronicFormat);
      IF NOT ElectronicDocumentFormat.FINDFIRST THEN
        ERROR(ElectronicFormatErr,ElectronicFormat);
    END;

    LOCAL PROCEDURE GetDocumentType@60(DocumentVariant@1000 : Variant) : Text[50];
    VAR
      DummySalesHeader@1002 : Record 36;
      DummyServiceHeader@1003 : Record 5900;
      DocumentRecordRef@1001 : RecordRef;
    BEGIN
      IF DocumentVariant.ISRECORD THEN
        DocumentRecordRef.GETTABLE(DocumentVariant)
      ELSE
        IF DocumentVariant.ISRECORDREF THEN
          DocumentRecordRef := DocumentVariant;
      CASE DocumentRecordRef.NUMBER OF
        DATABASE::"Sales Invoice Header":
          EXIT(FORMAT(DummySalesHeader."Document Type"::Invoice));
        DATABASE::"Sales Cr.Memo Header":
          EXIT(FORMAT(DummySalesHeader."Document Type"::"Credit Memo"));
        DATABASE::"Service Invoice Header":
          EXIT(FORMAT(DummyServiceHeader."Document Type"::Invoice));
        DATABASE::"Service Cr.Memo Header":
          EXIT(FORMAT(DummyServiceHeader."Document Type"::"Credit Memo"));
        DATABASE::"Service Header":
          BEGIN
            DummyServiceHeader := DocumentVariant;
            IF DummyServiceHeader."Document Type" = DummyServiceHeader."Document Type"::Quote THEN
              EXIT(FORMAT(DummyServiceHeader."Document Type"::Quote));
          END;
        DATABASE::"Sales Header":
          BEGIN
            DummySalesHeader := DocumentVariant;
            IF DummySalesHeader."Document Type" = DummySalesHeader."Document Type"::Quote THEN
              EXIT(FORMAT(DummySalesHeader."Document Type"::Quote));
          END;
      END;
    END;

    BEGIN
    END.
  }
}

