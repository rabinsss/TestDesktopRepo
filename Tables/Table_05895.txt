OBJECT Table 5895 Inventory Adjustment Buffer
{
  OBJECT-PROPERTIES
  {
    Date=09/15/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Inventory Adjustment Buffer;
               ESM=Almacenaje ajuste inventario;
               FRC=Tampon ajustement inventaire;
               ENC=Inventory Adjustment Buffer];
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;CaptionML=[ENU=Entry No.;
                                                              ESM=Nß mov.;
                                                              FRC=N¯ Çcriture;
                                                              ENC=Entry No.] }
    { 2   ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   CaptionML=[ENU=Item No.;
                                                              ESM=Nß producto;
                                                              FRC=N¯ d'article;
                                                              ENC=Item No.] }
    { 3   ;   ;Posting Date        ;Date          ;CaptionML=[ENU=Posting Date;
                                                              ESM=Fecha registro;
                                                              FRC=Date de report;
                                                              ENC=Posting Date] }
    { 6   ;   ;Document No.        ;Code20        ;CaptionML=[ENU=Document No.;
                                                              ESM=Nß documento;
                                                              FRC=N¯ de document;
                                                              ENC=Document No.] }
    { 8   ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   CaptionML=[ENU=Location Code;
                                                              ESM=C¢d. almacÇn;
                                                              FRC=Code d'emplacement;
                                                              ENC=Location Code] }
    { 11  ;   ;Item Ledger Entry No.;Integer      ;TableRelation="Item Ledger Entry";
                                                   CaptionML=[ENU=Item Ledger Entry No.;
                                                              ESM=Nß mov. producto;
                                                              FRC=N¯ Çcriture article gr. livre;
                                                              ENC=Item Ledger Entry No.] }
    { 13  ;   ;Item Ledger Entry Quantity;Decimal ;CaptionML=[ENU=Item Ledger Entry Quantity;
                                                              ESM=Cantidad mov. producto;
                                                              FRC=QuantitÇ Çcriture article;
                                                              ENC=Item Ledger Entry Quantity];
                                                   DecimalPlaces=0:5 }
    { 43  ;   ;Cost Amount (Actual);Decimal       ;CaptionML=[ENU=Cost Amount (Actual);
                                                              ESM=Importe costo (real);
                                                              FRC=Coñt indiquÇ (rÇel);
                                                              ENC=Cost Amount (Actual)];
                                                   AutoFormatType=1 }
    { 68  ;   ;Cost Amount (Actual) (ACY);Decimal ;CaptionML=[ENU=Cost Amount (Actual) (ACY);
                                                              ESM=Importe costo (real) (DA);
                                                              FRC=Coñt indiq. (rÇel) (dev. add.);
                                                              ENC=Cost Amount (Actual) (ACY)];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 98  ;   ;Expected Cost       ;Boolean       ;CaptionML=[ENU=Expected Cost;
                                                              ESM=Costo esperado;
                                                              FRC=Coñt prÇvu;
                                                              ENC=Expected Cost] }
    { 100 ;   ;Valued By Average Cost;Boolean     ;CaptionML=[ENU=Valued By Average Cost;
                                                              ESM=Valuado a costo promedio;
                                                              FRC=ValorisÇ par coñt moyen;
                                                              ENC=Valued By Average Cost] }
    { 104 ;   ;Valuation Date      ;Date          ;CaptionML=[ENU=Valuation Date;
                                                              ESM=Fecha valoraci¢n;
                                                              FRC=Date Çvaluation;
                                                              ENC=Valuation Date] }
    { 105 ;   ;Entry Type          ;Option        ;CaptionML=[ENU=Entry Type;
                                                              ESM=Tipo movimiento;
                                                              FRC=Type d'Çcriture;
                                                              ENC=Entry Type];
                                                   OptionCaptionML=[ENU=Direct Cost,Revaluation,Rounding,Indirect Cost,Variance;
                                                                    ESM=Costo directo,Revaluaci¢n,Redondeo,Costo indirecto,Variaci¢n;
                                                                    FRC=Coñt direct,RÇÇvaluation,Arrondissement,Coñt indirect,êcart;
                                                                    ENC=Direct Cost,Revaluation,Rounding,Indirect Cost,Variance];
                                                   OptionString=Direct Cost,Revaluation,Rounding,Indirect Cost,Variance }
    { 106 ;   ;Variance Type       ;Option        ;CaptionML=[ENU=Variance Type;
                                                              ESM=Tipo desviaci¢n;
                                                              FRC=Type Çcart;
                                                              ENC=Variance Type];
                                                   OptionCaptionML=[ENU=" ,Purchase,Material,Capacity,Capacity Overhead,Manufacturing Overhead,Subcontracted";
                                                                    ESM=" ,Compras,Materiales,Capacidad,Gastos gen. capacidad,Gastos gen. fabr.,Subcontrataci¢n";
                                                                    FRC=" ,Achat,Matiäre,CapacitÇ,Utilisation fixe de capacitÇ,Frais gÇnÇraux matiäre,Sous-traitance";
                                                                    ENC=" ,Purchase,Material,Capacity,Capacity Overhead,Manufacturing Overhead,Subcontracted"];
                                                   OptionString=[ ,Purchase,Material,Capacity,Capacity Overhead,Manufacturing Overhead,Subcontracted] }
    { 151 ;   ;Cost Amount (Expected);Decimal     ;CaptionML=[ENU=Cost Amount (Expected);
                                                              ESM=Importe costo (Esperado);
                                                              FRC=Coñt indiquÇ (prÇvu);
                                                              ENC=Cost Amount (Expected)];
                                                   AutoFormatType=1 }
    { 156 ;   ;Cost Amount (Expected) (ACY);Decimal;
                                                   CaptionML=[ENU=Cost Amount (Expected) (ACY);
                                                              ESM=Importe costo (Esperado) (DA);
                                                              FRC=Coñt indiquÇ prÇvu (dev. add.);
                                                              ENC=Cost Amount (Expected) (ACY)];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 5402;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   CaptionML=[ENU=Variant Code;
                                                              ESM=C¢d. variante;
                                                              FRC=Code variante;
                                                              ENC=Variant Code] }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
    {    ;Item Ledger Entry No.                   ;SumIndexFields=Cost Amount (Expected),Cost Amount (Actual),Cost Amount (Expected) (ACY),Cost Amount (Actual) (ACY) }
    {    ;Item No.,Valuation Date,Location Code,Variant Code;
                                                   SumIndexFields=Cost Amount (Expected),Cost Amount (Actual),Cost Amount (Expected) (ACY),Cost Amount (Actual) (ACY),Item Ledger Entry Quantity }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      GLSetup@1001 : Record 98;
      GLSetupRead@1000 : Boolean;

    LOCAL PROCEDURE GetCurrencyCode@1() : Code[10];
    BEGIN
      IF NOT GLSetupRead THEN BEGIN
        GLSetup.GET;
        GLSetupRead := TRUE;
      END;
      EXIT(GLSetup."Additional Reporting Currency");
    END;

    PROCEDURE CalcItemLedgEntryCost@5(ItemLedgEntryNo@1000 : Integer;Expected@1001 : Boolean);
    VAR
      ItemLedgEntryQty@1006 : Decimal;
      CostAmtActual@1002 : Decimal;
      CostAmtActualACY@1003 : Decimal;
      CostAmtExpected@1004 : Decimal;
      CostAmtExpectedACY@1005 : Decimal;
    BEGIN
      RESET;
      SETCURRENTKEY("Item Ledger Entry No.");
      SETRANGE("Item Ledger Entry No.",ItemLedgEntryNo);
      IF FIND('-') THEN
        REPEAT
          IF "Expected Cost" = Expected THEN BEGIN
            ItemLedgEntryQty := ItemLedgEntryQty + "Item Ledger Entry Quantity";
            CostAmtActual := CostAmtActual + "Cost Amount (Actual)";
            CostAmtActualACY := CostAmtActualACY + "Cost Amount (Actual) (ACY)";
            CostAmtExpected := CostAmtExpected + "Cost Amount (Expected)";
            CostAmtExpectedACY := CostAmtExpectedACY + "Cost Amount (Expected) (ACY)";
          END;
        UNTIL NEXT = 0;

      "Item Ledger Entry Quantity" := ItemLedgEntryQty;
      "Cost Amount (Actual)" := CostAmtActual;
      "Cost Amount (Actual) (ACY)" := CostAmtActualACY;
      "Cost Amount (Expected)" := CostAmtExpected;
      "Cost Amount (Expected) (ACY)" := CostAmtExpectedACY;
    END;

    PROCEDURE SumCostsTillValuationDate@4(VAR ValueEntry@1000 : Record 5802);
    VAR
      AccountingPeriod@1009 : Record 50;
      PrevInvtAdjmtBufSum@1007 : Record 5895;
      Item@1006 : Record 27;
      FromDate@1005 : Date;
      ToDate@1004 : Date;
      CostCalcIsChanged@1003 : Boolean;
      QtyFactor@1002 : Decimal;
    BEGIN
      Item.GET(ValueEntry."Item No.");
      IF Item."Costing Method" = Item."Costing Method"::Average THEN
        ToDate := ValueEntry.GetAvgToDate(ValueEntry."Valuation Date")
      ELSE
        ToDate := "Valuation Date";

      REPEAT
        IF Item."Costing Method" = Item."Costing Method"::Average THEN
          FromDate := ValueEntry.GetAvgFromDate(ToDate,AccountingPeriod,CostCalcIsChanged)
        ELSE
          FromDate := 0D;

        QtyFactor := 1;
        RESET;
        SETCURRENTKEY("Item No.","Valuation Date","Location Code","Variant Code");
        SETRANGE("Item No.",ValueEntry."Item No.");
        SETRANGE("Valuation Date",FromDate,ToDate);
        IF (AccountingPeriod."Average Cost Calc. Type" =
            AccountingPeriod."Average Cost Calc. Type"::"Item & Location & Variant") OR
           (Item."Costing Method" <> Item."Costing Method"::Average)
        THEN BEGIN
          SETRANGE("Location Code",ValueEntry."Location Code");
          SETRANGE("Variant Code",ValueEntry."Variant Code");
        END ELSE
          IF CostCalcIsChanged THEN
            QtyFactor := ValueEntry.CalcQtyFactor(FromDate,ToDate);

        CALCSUMS(
          "Item Ledger Entry Quantity",
          "Cost Amount (Actual)","Cost Amount (Actual) (ACY)",
          "Cost Amount (Expected)","Cost Amount (Expected) (ACY)");

        "Item Ledger Entry Quantity" :=
          ROUND("Item Ledger Entry Quantity" * QtyFactor,0.00001) + PrevInvtAdjmtBufSum."Item Ledger Entry Quantity";
        "Cost Amount (Actual)" :=
          "Cost Amount (Actual)" * QtyFactor + PrevInvtAdjmtBufSum."Cost Amount (Actual)";
        "Cost Amount (Expected)" :=
          "Cost Amount (Expected)" * QtyFactor + PrevInvtAdjmtBufSum."Cost Amount (Expected)";
        "Cost Amount (Expected) (ACY)" :=
          "Cost Amount (Expected) (ACY)" * QtyFactor + PrevInvtAdjmtBufSum."Cost Amount (Expected) (ACY)";
        "Cost Amount (Actual) (ACY)" :=
          "Cost Amount (Actual) (ACY)" * QtyFactor + PrevInvtAdjmtBufSum."Cost Amount (Actual) (ACY)";
        PrevInvtAdjmtBufSum := Rec;

        IF FromDate <> 0D THEN
          ToDate := CALCDATE('<-1D>',FromDate);
      UNTIL FromDate = 0D;
    END;

    PROCEDURE AddActualCostBuf@2(ValueEntry@1000 : Record 5802;NewAdjustedCost@1002 : Decimal;NewAdjustedCostACY@1003 : Decimal;ItemLedgEntryPostingDate@1001 : Date);
    BEGIN
      RESET;
      "Entry No." := ValueEntry."Entry No.";
      IF FIND THEN BEGIN
        IF ValueEntry."Expected Cost" THEN BEGIN
          "Cost Amount (Expected)" := "Cost Amount (Expected)" + NewAdjustedCost;
          "Cost Amount (Expected) (ACY)" := "Cost Amount (Expected) (ACY)" + NewAdjustedCostACY;
        END ELSE BEGIN
          "Cost Amount (Actual)" := "Cost Amount (Actual)" + NewAdjustedCost;
          "Cost Amount (Actual) (ACY)" := "Cost Amount (Actual) (ACY)" + NewAdjustedCostACY;
        END;
        MODIFY;
      END ELSE BEGIN
        INIT;
        "Item No." := ValueEntry."Item No.";
        "Document No." := ValueEntry."Document No.";
        "Location Code" := ValueEntry."Location Code";
        "Variant Code" := ValueEntry."Variant Code";
        "Entry Type" := ValueEntry."Entry Type";
        "Item Ledger Entry No." := ValueEntry."Item Ledger Entry No.";
        "Expected Cost" := ValueEntry."Expected Cost";
        IF ItemLedgEntryPostingDate = 0D THEN
          "Posting Date" := ValueEntry."Posting Date"
        ELSE
          "Posting Date" := ItemLedgEntryPostingDate;
        IF ValueEntry."Expected Cost" THEN BEGIN
          "Cost Amount (Expected)" := NewAdjustedCost;
          "Cost Amount (Expected) (ACY)" := NewAdjustedCostACY;
        END ELSE BEGIN
          "Cost Amount (Actual)" := NewAdjustedCost;
          "Cost Amount (Actual) (ACY)" := NewAdjustedCostACY;
        END;
        "Valued By Average Cost" := ValueEntry."Valued By Average Cost";
        "Valuation Date" := ValueEntry."Valuation Date";
        INSERT;
      END;
    END;

    PROCEDURE AddBalanceExpectedCostBuf@6(ValueEntry@1002 : Record 5802;NewAdjustedCost@1001 : Decimal;NewAdjustedCostACY@1000 : Decimal);
    BEGIN
      IF ValueEntry."Expected Cost" OR
         (ValueEntry."Entry Type" <> ValueEntry."Entry Type"::"Direct Cost")
      THEN
        EXIT;

      RESET;
      "Entry No." := ValueEntry."Entry No.";
      FIND;
      "Cost Amount (Expected)" := NewAdjustedCost;
      "Cost Amount (Expected) (ACY)" := NewAdjustedCostACY;
      MODIFY;
    END;

    PROCEDURE AddOrderCost@3(ItemLedgEntryNo@1000 : Integer;EntryType@1002 : Option;VarianceType@1001 : Option;CostAmt@1003 : Decimal;CostAmtLCY@1004 : Decimal);
    VAR
      CopyOfInvtAdjmtBuf@1005 : Record 5895;
    BEGIN
      CopyOfInvtAdjmtBuf.COPY(Rec);
      RESET;
      SETCURRENTKEY("Item Ledger Entry No.");
      SETRANGE("Item Ledger Entry No.",ItemLedgEntryNo);
      SETRANGE("Entry Type",EntryType);
      SETRANGE("Variance Type",VarianceType);
      IF FINDFIRST THEN BEGIN
        "Cost Amount (Actual)" += CostAmt;
        "Cost Amount (Actual) (ACY)" += CostAmtLCY;
        MODIFY;
      END ELSE BEGIN
        INIT;
        "Item Ledger Entry No." := ItemLedgEntryNo;
        "Entry Type" := EntryType;
        "Variance Type" := VarianceType;
        "Entry No." := GetLastNo + 1;
        "Cost Amount (Actual)" := CostAmt;
        "Cost Amount (Actual) (ACY)" := CostAmtLCY;
        INSERT;
      END;
      COPY(CopyOfInvtAdjmtBuf);
    END;

    LOCAL PROCEDURE GetLastNo@10() LastNo : Integer;
    VAR
      CopyOfInvtAdjmtBuf@1000 : Record 5895;
    BEGIN
      CopyOfInvtAdjmtBuf.COPY(Rec);
      RESET;
      IF FINDLAST THEN
        LastNo := "Entry No.";
      COPY(CopyOfInvtAdjmtBuf);
    END;

    BEGIN
    END.
  }
}

