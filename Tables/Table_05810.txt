OBJECT Table 5810 Rounding Residual Buffer
{
  OBJECT-PROPERTIES
  {
    Date=09/15/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Rounding Residual Buffer;
               ESM=Mem. int. redondeo residual;
               FRC=Tampon ajustement stock;
               ENC=Rounding Residual Buffer];
  }
  FIELDS
  {
    { 1   ;   ;Item Ledger Entry No.;Integer      ;CaptionML=[ENU=Item Ledger Entry No.;
                                                              ESM=N§ mov. producto;
                                                              FRC=Nø ‚criture article gr. livre;
                                                              ENC=Item Ledger Entry No.] }
    { 2   ;   ;Adjusted Cost       ;Decimal       ;CaptionML=[ENU=Adjusted Cost;
                                                              ESM=Costo actualizado;
                                                              FRC=Co–t ajust‚;
                                                              ENC=Adjusted Cost] }
    { 3   ;   ;Adjusted Cost (ACY) ;Decimal       ;CaptionML=[ENU=Adjusted Cost (ACY);
                                                              ESM=Costo actualizado (DA);
                                                              FRC=Co–t ajust‚ (dev. add.);
                                                              ENC=Adjusted Cost (ACY)] }
    { 4   ;   ;Completely Invoiced ;Boolean       ;CaptionML=[ENU=Completely Invoiced;
                                                              ESM=Facturado completamente;
                                                              FRC=EntiŠrement factur‚;
                                                              ENC=Completely Invoiced] }
    { 5   ;   ;No. of Hits         ;Integer       ;CaptionML=[ENU=No. of Hits;
                                                              ESM=N.§ de aciertos;
                                                              FRC=Nombre d'occurrences;
                                                              ENC=No. of Hits] }
  }
  KEYS
  {
    {    ;Item Ledger Entry No.                   ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE AddAdjustedCost@1(NewInboundEntryNo@1000 : Integer;NewAdjustedCost@1001 : Decimal;NewAdjustedCostACY@1002 : Decimal;NewCompletelyInvoiced@1003 : Boolean);
    BEGIN
      IF NOT HasNewCost(NewAdjustedCost,NewAdjustedCostACY) AND NewCompletelyInvoiced THEN BEGIN
        Retrieve(NewInboundEntryNo);
        EXIT;
      END;

      IF Retrieve(NewInboundEntryNo) THEN BEGIN
        "Adjusted Cost" := "Adjusted Cost" + NewAdjustedCost;
        "Adjusted Cost (ACY)" := "Adjusted Cost (ACY)" + NewAdjustedCostACY;
        IF NOT NewCompletelyInvoiced THEN
          "Completely Invoiced" := FALSE;
        MODIFY;
      END ELSE BEGIN
        INIT;
        "Adjusted Cost" := NewAdjustedCost;
        "Adjusted Cost (ACY)" := NewAdjustedCostACY;
        "Completely Invoiced" := NewCompletelyInvoiced;
        INSERT;
      END;
    END;

    PROCEDURE UpdRoundingCheck@2(NewInboundEntryNo@1000 : Integer;NewAdjustedCost@1001 : Decimal;NewAdjustedCostACY@1002 : Decimal;RdngPrecision@1004 : Decimal;RndngPrecisionACY@1005 : Decimal);
    BEGIN
      IF NOT HasNewCost(NewAdjustedCost,NewAdjustedCostACY) THEN BEGIN
        Retrieve(NewInboundEntryNo);
        EXIT;
      END;

      IF Retrieve(NewInboundEntryNo) THEN BEGIN
        IF ((RdngPrecision >= NewAdjustedCost) OR
            (RndngPrecisionACY >= NewAdjustedCostACY)) AND
           (("Adjusted Cost" * NewAdjustedCost <= 0) AND
            ("Adjusted Cost (ACY)" * NewAdjustedCostACY <= 0))
        THEN
          "No. of Hits" := "No. of Hits" + 1
        ELSE
          "No. of Hits" := 0;

        "Adjusted Cost" := NewAdjustedCost;
        "Adjusted Cost (ACY)" := NewAdjustedCostACY;
        MODIFY;
      END ELSE BEGIN
        INIT;
        "Adjusted Cost" := NewAdjustedCost;
        "Adjusted Cost (ACY)" := NewAdjustedCostACY;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE Retrieve@72(NewInboundEntryNo@1000 : Integer) : Boolean;
    BEGIN
      RESET;
      "Item Ledger Entry No." := NewInboundEntryNo;
      IF NOT FIND THEN BEGIN
        INIT;
        EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE HasNewCost@54(NewCost@1000 : Decimal;NewCostACY@1001 : Decimal) : Boolean;
    BEGIN
      EXIT((NewCost <> 0) OR (NewCostACY <> 0));
    END;

    BEGIN
    END.
  }
}

