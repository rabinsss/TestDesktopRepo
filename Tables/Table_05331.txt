OBJECT Table 5331 CRM Integration Record
{
  OBJECT-PROPERTIES
  {
    Date=09/15/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=CRM Integration Record;
               ESM=Registro de integraci¢n CRM;
               FRC=Enregistrement int‚gration CRM;
               ENC=CRM Integration Record];
  }
  FIELDS
  {
    { 2   ;   ;CRM ID              ;GUID          ;CaptionML=[ENU=CRM ID;
                                                              ESM=Id. de CRM;
                                                              FRC=Code CRM;
                                                              ENC=CRM ID] }
    { 3   ;   ;Integration ID      ;GUID          ;TableRelation="Integration Record"."Integration ID";
                                                   CaptionML=[ENU=Integration ID;
                                                              ESM=Id. de integraci¢n;
                                                              FRC=Code int‚gration;
                                                              ENC=Integration ID] }
    { 4   ;   ;Last Synch. Modified On;DateTime   ;CaptionML=[ENU=Last Synch. Modified On;
                                                              ESM=Fecha de £ltima modificaci¢n de sincronizaci¢n;
                                                              FRC=DerniŠre synch. modifi‚e le;
                                                              ENC=Last Synch. Modified On] }
    { 5   ;   ;Last Synch. CRM Modified On;DateTime;
                                                   CaptionML=[ENU=Last Synch. CRM Modified On;
                                                              ESM=Fecha de £ltima modificaci¢n de sincronizaci¢n de CRM;
                                                              FRC=DerniŠre synch. CRM modifi‚e le;
                                                              ENC=Last Synch. CRM Modified On] }
    { 6   ;   ;Table ID            ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Integration Record"."Table ID" WHERE (Integration ID=FIELD(Integration ID)));
                                                   CaptionML=[ENU=Table ID;
                                                              ESM=Id. tabla;
                                                              FRC=Code table;
                                                              ENC=Table ID] }
  }
  KEYS
  {
    {    ;CRM ID,Integration ID                   ;Clustered=Yes }
    {    ;Integration ID                           }
    {    ;Last Synch. Modified On,Integration ID   }
    {    ;Last Synch. CRM Modified On,CRM ID       }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      IntegrationRecordNotFoundErr@1000 : TextConst 'ENU=The integration record for entity %1 was not found.;ESM=El registro de integraci¢n de la entidad %1 no se encontr¢.;FRC=L''enregistrement d''int‚gration de l''entit‚ %1 est introuvable.;ENC=The integration record for entity %1 was not found.';
      CRMIdAlreadyMappedErr@1003 : TextConst '@@@=%1 ID of the record, %2 ID of the already mapped record;ENU=Cannot couple %1 to this Dynamics CRM record, because the Dynamics CRM record is already coupled to %2.;ESM=No se puede emparejar %1 a este registro de Dynamics CRM porque este £ltimo ya est  emparejado con %2.;FRC=Impossible de coupler %1 … cet enregistrement Dynamics CRM, car ce dernier est d‚j… coupl‚ … %2.;ENC=Cannot couple %1 to this Dynamics CRM record, because the Dynamics CRM record is already coupled to %2.';
      RecordIdAlreadyMappedErr@1004 : TextConst '@@@=%1 ID from the record, %2 ID of the already mapped record;ENU=Cannot couple the Dynamics CRM record to %1, because %1 is already coupled to another Dynamics CRM record.;ESM=No se puede emparejar este registro de Dynamics CRM con %1 porque %1 ya est  emparejado con otro registro de Dynamics CRM.;FRC=Impossible de coupler l''enregistrement Dynamics CRM … %1, car %1 est d‚j… coupl‚ … un autre enregistrement Dynamics CRM.;ENC=Cannot couple the Dynamics CRM record to %1, because %1 is already coupled to another Dynamics CRM record.';

    PROCEDURE IsRecordCoupled@5(DestinationRecordID@1001 : RecordID) : Boolean;
    VAR
      CRMId@1002 : GUID;
    BEGIN
      EXIT(FindIDFromRecordID(DestinationRecordID,CRMId));
    END;

    PROCEDURE FindRecordIDFromID@3(SourceCRMID@1001 : GUID;DestinationTableID@1004 : Integer;VAR DestinationRecordId@1002 : RecordID) : Boolean;
    VAR
      CRMIntegrationRecord@1003 : Record 5331;
      IntegrationRecord@1005 : Record 5151;
    BEGIN
      IF FindRowFromCRMID(SourceCRMID,DestinationTableID,CRMIntegrationRecord) THEN
        IF IntegrationRecord.FindByIntegrationId(CRMIntegrationRecord."Integration ID") THEN BEGIN
          DestinationRecordId := IntegrationRecord."Record ID";
          EXIT(TRUE);
        END;

      EXIT(FALSE);
    END;

    PROCEDURE FindIDFromRecordID@2(SourceRecordID@1001 : RecordID;VAR DestinationCRMID@1002 : GUID) : Boolean;
    VAR
      CRMIntegrationRecord@1004 : Record 5331;
    BEGIN
      IF NOT FindRowFromRecordID(SourceRecordID,CRMIntegrationRecord) THEN
        EXIT(FALSE);

      DestinationCRMID := CRMIntegrationRecord."CRM ID";
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE FindIntegrationIDFromCRMID@20(SourceCRMID@1002 : GUID;DestinationTableID@1004 : Integer;VAR DestinationIntegrationID@1001 : GUID) : Boolean;
    VAR
      CRMIntegrationRecord@1000 : Record 5331;
    BEGIN
      IF FindRowFromCRMID(SourceCRMID,DestinationTableID,CRMIntegrationRecord) THEN BEGIN
        DestinationIntegrationID := CRMIntegrationRecord."Integration ID";
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE CoupleCRMIDToRecordID@1(CRMID@1000 : GUID;RecordID@1001 : RecordID);
    VAR
      CRMIntegrationRecord@1003 : Record 5331;
      IntegrationRecord@1004 : Record 5151;
      CRMIntegrationRecord2@1006 : Record 5331;
      ErrCRMID@1005 : GUID;
    BEGIN
      IF NOT IntegrationRecord.FindByRecordId(RecordID) THEN
        ERROR(IntegrationRecordNotFoundErr,FORMAT(RecordID,0,1));

      // Find coupling between CRMID and TableNo
      IF NOT FindRowFromCRMID(CRMID,RecordID.TABLENO,CRMIntegrationRecord) THEN
        // Find rogue coupling beteen CRMID and table 0
        IF NOT FindRowFromCRMID(CRMID,0,CRMIntegrationRecord) THEN BEGIN
          // Find other coupling to the record
          IF CRMIntegrationRecord2.FindIDFromRecordID(RecordID,ErrCRMID) THEN
            ERROR(RecordIdAlreadyMappedErr,FORMAT(RecordID,0,1));

          WITH CRMIntegrationRecord DO BEGIN
            RESET;
            INIT;
            "CRM ID" := CRMID;
            "Integration ID" := IntegrationRecord."Integration ID";
            INSERT(TRUE);
          END;
          EXIT;
        END;

      // Update Integration ID
      IF CRMIntegrationRecord."Integration ID" <> IntegrationRecord."Integration ID" THEN BEGIN
        IF CRMIntegrationRecord2.FindIDFromRecordID(RecordID,ErrCRMID) THEN
          ERROR(RecordIdAlreadyMappedErr,FORMAT(RecordID,0,1));
        CRMIntegrationRecord.RENAME(CRMIntegrationRecord."CRM ID",IntegrationRecord."Integration ID");
      END;
    END;

    PROCEDURE CoupleRecordIdToCRMID@99(RecordID@1001 : RecordID;CRMID@1000 : GUID);
    VAR
      CRMIntegrationRecord@1003 : Record 5331;
      IntegrationRecord@1004 : Record 5151;
    BEGIN
      IF NOT IntegrationRecord.FindByRecordId(RecordID) THEN
        ERROR(IntegrationRecordNotFoundErr,FORMAT(RecordID,0,1));

      IF NOT FindRowFromIntegrationID(IntegrationRecord."Integration ID",CRMIntegrationRecord) THEN BEGIN
        AssertRecordIDCanBeCoupled(RecordID,CRMID);
        WITH CRMIntegrationRecord DO BEGIN
          RESET;
          INIT;
          "CRM ID" := CRMID;
          "Integration ID" := IntegrationRecord."Integration ID";
          INSERT(TRUE);
        END;
      END ELSE
        IF CRMIntegrationRecord."CRM ID" <> CRMID THEN BEGIN
          AssertRecordIDCanBeCoupled(RecordID,CRMID);
          CRMIntegrationRecord.RENAME(CRMID,CRMIntegrationRecord."Integration ID");
        END;
    END;

    PROCEDURE RemoveCouplingToRecord@15(RecordID@1000 : RecordID) : Boolean;
    VAR
      CRMIntegrationRecord@1002 : Record 5331;
      IntegrationRecord@1001 : Record 5151;
    BEGIN
      IF NOT IntegrationRecord.FindByRecordId(RecordID) THEN
        ERROR(IntegrationRecordNotFoundErr,FORMAT(RecordID,0,1));

      IF FindRowFromIntegrationID(IntegrationRecord."Integration ID",CRMIntegrationRecord) THEN BEGIN
        CRMIntegrationRecord.DELETE(TRUE);
        EXIT(TRUE);
      END;
    END;

    PROCEDURE RemoveCouplingToCRMID@13(CRMID@1000 : GUID;DestinationTableID@1003 : Integer) : Boolean;
    VAR
      CRMIntegrationRecord@1002 : Record 5331;
    BEGIN
      IF FindRowFromCRMID(CRMID,DestinationTableID,CRMIntegrationRecord) THEN BEGIN
        CRMIntegrationRecord.DELETE(TRUE);
        EXIT(TRUE);
      END;
    END;

    PROCEDURE AssertRecordIDCanBeCoupled@4(RecordID@1001 : RecordID;CRMID@1000 : GUID);
    VAR
      CRMIntegrationRecord@1003 : Record 5331;
      ErrRecordID@1004 : RecordID;
      ErrIntegrationID@1005 : GUID;
    BEGIN
      IF FindIntegrationIDFromCRMID(CRMID,RecordID.TABLENO,ErrIntegrationID) THEN
        IF NOT UncoupleCRMIDIfRecordDeleted(ErrIntegrationID) THEN BEGIN
          CRMIntegrationRecord.FindRecordIDFromID(CRMID,RecordID.TABLENO,ErrRecordID);
          ERROR(CRMIdAlreadyMappedErr,FORMAT(RecordID,0,1),ErrRecordID);
        END;
    END;

    PROCEDURE SetLastSynchModifiedOns@8(SourceCRMID@1001 : GUID;DestinationTableID@1005 : Integer;CRMLastModifiedOn@1000 : DateTime;LastModifiedOn@1003 : DateTime);
    VAR
      CRMIntegrationRecord@1004 : Record 5331;
    BEGIN
      IF NOT FindRowFromCRMID(SourceCRMID,DestinationTableID,CRMIntegrationRecord) THEN
        EXIT;

      WITH CRMIntegrationRecord DO BEGIN
        "Last Synch. CRM Modified On" := CRMLastModifiedOn;
        "Last Synch. Modified On" := LastModifiedOn;
        MODIFY(TRUE);
      END;
    END;

    PROCEDURE SetLastSynchCRMModifiedOn@12(CRMID@1001 : GUID;DestinationTableID@1003 : Integer;CRMLastModifiedOn@1000 : DateTime);
    VAR
      CRMIntegrationRecord@1004 : Record 5331;
    BEGIN
      IF NOT FindRowFromCRMID(CRMID,DestinationTableID,CRMIntegrationRecord) THEN
        EXIT;

      CRMIntegrationRecord."Last Synch. CRM Modified On" := CRMLastModifiedOn;
      CRMIntegrationRecord.MODIFY(TRUE);
    END;

    PROCEDURE IsModifiedAfterLastSynchonizedCRMRecord@6(CRMID@1000 : GUID;DestinationTableID@1004 : Integer;CurrentModifiedOn@1002 : DateTime) : Boolean;
    VAR
      CRMIntegrationRecord@1003 : Record 5331;
    BEGIN
      IF NOT FindRowFromCRMID(CRMID,DestinationTableID,CRMIntegrationRecord) THEN
        EXIT(FALSE);

      EXIT(ROUNDDATETIME(CurrentModifiedOn) > ROUNDDATETIME(CRMIntegrationRecord."Last Synch. CRM Modified On"));
    END;

    PROCEDURE IsModifiedAfterLastSynchronizedRecord@7(RecordID@1001 : RecordID;CurrentModifiedOn@1000 : DateTime) : Boolean;
    VAR
      CRMIntegrationRecord@1003 : Record 5331;
    BEGIN
      IF NOT FindRowFromRecordID(RecordID,CRMIntegrationRecord) THEN
        EXIT(FALSE);

      EXIT(ROUNDDATETIME(CurrentModifiedOn) > ROUNDDATETIME(CRMIntegrationRecord."Last Synch. Modified On"));
    END;

    LOCAL PROCEDURE UncoupleCRMIDIfRecordDeleted@9(IntegrationID@1001 : GUID) : Boolean;
    VAR
      IntegrationRecord@1000 : Record 5151;
      CRMIntegrationRecord@1003 : Record 5331;
    BEGIN
      IntegrationRecord.FindByIntegrationId(IntegrationID);
      IF IntegrationRecord."Deleted On" <> 0DT THEN BEGIN
        IF FindRowFromIntegrationID(IntegrationID,CRMIntegrationRecord) THEN
          CRMIntegrationRecord.DELETE;
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE DeleteIfRecordDeleted@17(CRMID@1001 : GUID;DestinationTableID@1002 : Integer) : Boolean;
    VAR
      IntegrationID@1004 : GUID;
    BEGIN
      IF NOT FindIntegrationIDFromCRMID(CRMID,DestinationTableID,IntegrationID) THEN
        EXIT(FALSE);

      EXIT(UncoupleCRMIDIfRecordDeleted(IntegrationID));
    END;

    LOCAL PROCEDURE FindRowFromRecordID@10(SourceRecordID@1000 : RecordID;VAR CRMIntegrationRecord@1001 : Record 5331) : Boolean;
    VAR
      IntegrationRecord@1002 : Record 5151;
    BEGIN
      IF NOT IntegrationRecord.FindByRecordId(SourceRecordID) THEN
        EXIT(FALSE);
      EXIT(FindRowFromIntegrationID(IntegrationRecord."Integration ID",CRMIntegrationRecord));
    END;

    LOCAL PROCEDURE FindRowFromCRMID@11(CRMID@1001 : GUID;DestinationTableID@1003 : Integer;VAR CRMIntegrationRecord@1000 : Record 5331) : Boolean;
    BEGIN
      CRMIntegrationRecord.SETRANGE("CRM ID",CRMID);
      CRMIntegrationRecord.SETFILTER("Table ID",FORMAT(DestinationTableID));
      EXIT(CRMIntegrationRecord.FINDFIRST);
    END;

    LOCAL PROCEDURE FindRowFromIntegrationID@22(IntegrationID@1001 : GUID;VAR CRMIntegrationRecord@1000 : Record 5331) : Boolean;
    BEGIN
      CRMIntegrationRecord.SETCURRENTKEY("Integration ID");
      CRMIntegrationRecord.SETFILTER("Integration ID",IntegrationID);
      EXIT(CRMIntegrationRecord.FINDFIRST);
    END;

    BEGIN
    END.
  }
}

