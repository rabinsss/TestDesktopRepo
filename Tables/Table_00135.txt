OBJECT Table 135 Acc. Sched. KPI Web Srv. Setup
{
  OBJECT-PROPERTIES
  {
    Date=11/26/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.43897;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               TESTFIELD("Primary Key",'');
             END;

    OnDelete=VAR
               AccSchedKPIWebSrvLine@1000 : Record 136;
             BEGIN
               AccSchedKPIWebSrvLine.DELETEALL;
             END;

    CaptionML=[ENU=Acc. Sched. KPI Web Srv. Setup;
               ESM=Config. servicio web KPI esq. cta.;
               FRC=Tabl. analyse - ParamŠtres serv. web KPI;
               ENC=Acc. Sched. KPI Web Srv. Setup];
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10        ;OnValidate=BEGIN
                                                                TESTFIELD("Primary Key",'');
                                                              END;

                                                   CaptionML=[ENU=Primary Key;
                                                              ESM=Clave primaria;
                                                              FRC=Cl‚ primaire;
                                                              ENC=Primary Key] }
    { 2   ;   ;Forecasted Values Start;Option     ;CaptionML=[ENU=Forecasted Values Start;
                                                              ESM=Inicio de valores previstos;
                                                              FRC=D‚but valeurs pr‚vues;
                                                              ENC=Forecasted Values Start];
                                                   OptionCaptionML=[ENU=After Latest Closed Period,After Current Date;
                                                                    ESM=Despu‚s periodo £ltimo cierre,Despu‚s fecha actual;
                                                                    FRC=AprŠs p‚riode derniŠre fermeture,AprŠs date du jour;
                                                                    ENC=After Latest Closed Period,After Current Date];
                                                   OptionString=After Latest Closed Period,After Current Date }
    { 3   ;   ;G/L Budget Name     ;Code10        ;TableRelation="G/L Budget Name";
                                                   CaptionML=[ENU=G/L Budget Name;
                                                              ESM=Nombre ppto. contable;
                                                              FRC=Nom de budget du grand livre;
                                                              ENC=G/L Budget Name] }
    { 4   ;   ;Period              ;Option        ;CaptionML=[ENU=Period;
                                                              ESM=Periodo;
                                                              FRC=P‚riode;
                                                              ENC=Period];
                                                   OptionCaptionML=[ENU=Fiscal Year - Last Locked Period,Current Fiscal Year,Current Calendar Year,Current Calendar Quarter,Current Month,Today,Current Period,Last Locked Period,Current Fiscal Year + 3 Previous Years;
                                                                    ESM=Ejercicio - éltimo periodo bloqueado,Ejercicio actual,A¤o natural actual,Trimestre natural actual,Mes actual,Hoy,Periodo actual,éltimo periodo bloqueado,Ejercicio actual + 3 ejercicios anteriores;
                                                                    FRC=Exercice financier comptable - DerniŠre p‚riode verrouill‚e,Exercice financier comptable en cours,Ann‚e civile en cours,Trimestre civil en cours,Mois en cours,Aujourd'hui,P‚riode actuelle,DerniŠre p‚riode verrouill‚e,Exercice financier comptable en cours + 3ÿexercice financiers pr‚c‚dents;
                                                                    ENC=Fiscal Year - Last Locked Period,Current Fiscal Year,Current Calendar Year,Current Calendar Quarter,Current Month,Today,Current Period,Last Locked Period,Current Fiscal Year + 3 Previous Years];
                                                   OptionString=Fiscal Year - Last Locked Period,Current Fiscal Year,Current Calendar Year,Current Calendar Quarter,Current Month,Today,Current Period,Last Locked Period,Current Fiscal Year + 3 Previous Years }
    { 5   ;   ;View By             ;Option        ;CaptionML=[ENU=View By;
                                                              ESM=Vista por;
                                                              FRC=Afficher par;
                                                              ENC=View By];
                                                   OptionCaptionML=[ENU=Day,Week,Month,Quarter,Year,Period;
                                                                    ESM=D¡a,Semana,Mes,Trimestre,A¤o,Periodo;
                                                                    FRC=Jour,Semaine,Mois,Trimestre,Ann‚e,P‚riode;
                                                                    ENC=Day,Week,Month,Quarter,Year,Period];
                                                   OptionString=Day,Week,Month,Quarter,Year,Period }
    { 6   ;   ;Web Service Name    ;Text240       ;OnValidate=VAR
                                                                i@1001 : Integer;
                                                                s@1000 : Text;
                                                              BEGIN
                                                                IF "Web Service Name" = '' THEN
                                                                  EXIT;
                                                                s := LOWERCASE("Web Service Name");
                                                                FOR i := 1 TO STRLEN(s) DO
                                                                  IF NOT (s[i] IN ['a'..'z','0'..'9','-']) THEN
                                                                    ERROR(ServiceNameErr);
                                                              END;

                                                   CaptionML=[ENU=Web Service Name;
                                                              ESM=Nombre del servicio web;
                                                              FRC=Nom du service web;
                                                              ENC=Web Service Name] }
    { 7   ;   ;Published           ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Web Service" WHERE (Object Type=CONST(Page),
                                                                                          Object ID=CONST(197),
                                                                                          Published=CONST(Yes)));
                                                   CaptionML=[ENU=Published;
                                                              ESM=Publicado;
                                                              FRC=Publi‚;
                                                              ENC=Published];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ServiceNameErr@1000 : TextConst 'ENU=The service name may only contain letters A-Z, a-z, digits 0-9, and hyphens (-). No other characters are allowed.;ESM=El nombre de servicio solo puede contener las letras A-Z, a-z, los d¡gitos 0-9 y guiones (-). No se admiten otros caracteres.;FRC=Le nom du service ne peut contenir que les lettres A-Z, a-z, les chiffres 0-9 et des tirets (-). Aucun autre caractŠre n''est autoris‚.;ENC=The service name may only contain letters A-Z, a-z, digits 0-9, and hyphens (-). No other characters are allowed.';

    PROCEDURE TestValues@3();
    BEGIN
      TESTFIELD("G/L Budget Name");
    END;

    PROCEDURE GetPeriodLength@7(VAR NoOfLines@1003 : Integer;VAR StartDate@1004 : Date;VAR EndDate@1005 : Date);
    VAR
      AccountingPeriod@1002 : Record 50;
      TotalNoOfDays@1000 : Integer;
      NoOfDaysPerLine@1001 : Integer;
    BEGIN
      CASE Period OF
        Period::"Fiscal Year - Last Locked Period":
          GetFiscalYear(GetLastClosedAccDate,StartDate,EndDate);
        Period::"Current Fiscal Year":
          GetFiscalYear(WORKDATE,StartDate,EndDate);
        Period::"Current Period":
          BEGIN
            AccountingPeriod.SETFILTER("Starting Date",'<=%1',WORKDATE);
            AccountingPeriod.FINDLAST;
            StartDate := AccountingPeriod."Starting Date";
            AccountingPeriod.SETRANGE("Starting Date");
            IF AccountingPeriod.FIND('>') THEN
              EndDate := AccountingPeriod."Starting Date" - 1
            ELSE
              EndDate := CALCDATE('<CM>',StartDate);
          END;
        Period::"Last Locked Period":
          BEGIN
            AccountingPeriod.SETFILTER("Starting Date",'<=%1',GetLastClosedAccDate);
            AccountingPeriod.FINDLAST;
            StartDate := AccountingPeriod."Starting Date";
            AccountingPeriod.SETRANGE("Starting Date");
            IF AccountingPeriod.FIND('>') THEN
              EndDate := AccountingPeriod."Starting Date" - 1
            ELSE
              EndDate := CALCDATE('<CM>',StartDate);
          END;
        Period::"Current Calendar Year":
          BEGIN
            StartDate := CALCDATE('<-CY>',WORKDATE);
            EndDate := CALCDATE('<CY>',StartDate);
          END;
        Period::"Current Calendar Quarter":
          BEGIN
            StartDate := CALCDATE('<-CQ>',WORKDATE);
            EndDate := CALCDATE('<CQ>',StartDate);
          END;
        Period::"Current Month":
          BEGIN
            StartDate := CALCDATE('<-CM>',WORKDATE);
            EndDate := CALCDATE('<CM>',StartDate);
          END;
        Period::Today:
          BEGIN
            StartDate := WORKDATE;
            EndDate := WORKDATE;
          END;
        Period::"Current Fiscal Year + 3 Previous Years":
          BEGIN
            GetFiscalYear(WORKDATE,StartDate,EndDate);
            StartDate := CALCDATE('<-3Y>',StartDate);
            AccountingPeriod.SETRANGE("New Fiscal Year",TRUE);
            AccountingPeriod.FINDFIRST; // Get oldest accounting year
            IF AccountingPeriod."Starting Date" > StartDate THEN
              StartDate := AccountingPeriod."Starting Date";
          END;
      END;
      TotalNoOfDays := EndDate - StartDate + 1;

      CASE "View By" OF
        "View By"::Period:
          NoOfDaysPerLine := TotalNoOfDays;
        "View By"::Year:
          NoOfDaysPerLine := TotalNoOfDays;
        "View By"::Quarter:
          NoOfDaysPerLine := 90;
        "View By"::Month:
          NoOfDaysPerLine := 30;
        "View By"::Week:
          NoOfDaysPerLine := 7;
        "View By"::Day:
          NoOfDaysPerLine := 1;
      END;

      NoOfLines := TotalNoOfDays DIV NoOfDaysPerLine;
      IF NoOfLines = 0 THEN
        NoOfLines := 1;
    END;

    LOCAL PROCEDURE GetFiscalYear@13(Date@1000 : Date;VAR StartDate@1001 : Date;VAR EndDate@1002 : Date);
    VAR
      AccountingPeriod@1003 : Record 50;
    BEGIN
      StartDate := Date;
      AccountingPeriod.SETFILTER("Starting Date",'<=%1',Date);
      AccountingPeriod.SETRANGE("New Fiscal Year",TRUE);
      IF AccountingPeriod.FINDLAST THEN
        StartDate := AccountingPeriod."Starting Date";
      AccountingPeriod.SETRANGE("Starting Date");
      IF AccountingPeriod.FIND('>') THEN
        EndDate := AccountingPeriod."Starting Date" - 1
      ELSE
        EndDate := CALCDATE('<1Y-1D>',StartDate);
    END;

    PROCEDURE CalcNextStartDate@4(OrgStartDate@1000 : Date;OffSet@1001 : Integer) : Date;
    VAR
      AccountingPeriod@1004 : Record 50;
      DateCalc@1003 : DateFormula;
      DateCalcStr@1002 : Text;
    BEGIN
      IF OffSet = 0 THEN
        EXIT(OrgStartDate);

      CASE "View By" OF
        "View By"::Period:
          BEGIN
            AccountingPeriod."Starting Date" := OrgStartDate;
            AccountingPeriod.FIND('=><');
            AccountingPeriod.NEXT(OffSet);
            EXIT(AccountingPeriod."Starting Date")
          END;
        "View By"::Year:
          DateCalcStr := '<%1Y>';
        "View By"::Quarter:
          DateCalcStr := '<%1Q>';
        "View By"::Month:
          DateCalcStr := '<%1M>';
        "View By"::Week:
          DateCalcStr := '<%1W>';
        "View By"::Day:
          DateCalcStr := '<%1D>';
      END;

      EVALUATE(DateCalc,STRSUBSTNO(DateCalcStr,OffSet));
      EXIT(CALCDATE(DateCalc,OrgStartDate));
    END;

    PROCEDURE GetLastClosedAccDate@1() : Date;
    VAR
      GLSetup@1000 : Record 98;
    BEGIN
      GLSetup.GET;
      IF GLSetup."Allow Posting From" <> 0D THEN
        EXIT(GLSetup."Allow Posting From" - 1);
      EXIT(WORKDATE);
    END;

    PROCEDURE GetLastBudgetChangedDate@2() : Date;
    VAR
      GLBudgetEntry@1001 : Record 96;
    BEGIN
      IF "G/L Budget Name" <> '' THEN
        GLBudgetEntry.SETRANGE("Budget Name","G/L Budget Name");
      GLBudgetEntry.SETCURRENTKEY("Last Date Modified","Budget Name");
      IF GLBudgetEntry.FINDLAST THEN
        EXIT(GLBudgetEntry."Last Date Modified");
      EXIT(0D);
    END;

    PROCEDURE PublishWebService@8();
    VAR
      WebService@1000 : Record 2000000076;
      WebServiceManagement@1001 : Codeunit 9750;
    BEGIN
      TESTFIELD("Web Service Name");
      DeleteWebService;
      WebServiceManagement.CreateWebService(WebService."Object Type"::Page,
        PAGE::"Acc. Sched. KPI Web Service","Web Service Name",TRUE);
    END;

    PROCEDURE DeleteWebService@12();
    VAR
      WebService@1000 : Record 2000000076;
    BEGIN
      WebService.SETRANGE("Object Type",WebService."Object Type"::Page);
      WebService.SETRANGE("Object ID",PAGE::"Acc. Sched. KPI Web Service");
      WebService.SETRANGE("Service Name","Web Service Name");
      IF NOT WebService.FINDFIRST THEN
        WebService.SETRANGE("Service Name");
      IF WebService.FINDFIRST THEN
        WebService.DELETE;
    END;

    BEGIN
    END.
  }
}

