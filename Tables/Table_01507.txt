OBJECT Table 1507 Workflow Step Buffer
{
  OBJECT-PROPERTIES
  {
    Date=10/23/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.43402;
  }
  PROPERTIES
  {
    OnInsert=VAR
               WorkflowStep@1001 : Record 1502;
               IsEventInsert@1004 : Boolean;
             BEGIN
               IsEventInsert := "Parent Event Step ID" = 0;

               IF "Previous Workflow Step ID" = 0 THEN
                 CreateWorkflowStep(WorkflowStep,"Workflow Code","Parent Event Step ID")
               ELSE
                 CreateWorkflowStep(WorkflowStep,"Workflow Code","Previous Workflow Step ID");

               IF IsEventInsert THEN BEGIN
                 WorkflowStep.VALIDATE(Type,WorkflowStep.Type::"Event");
                 WorkflowStep.VALIDATE("Entry Point","Entry Point");
                 WorkflowStep.VALIDATE("Sequence No.","Sequence No.");
                 WorkflowStep.MODIFY(TRUE);
                 UpdateCondition(WorkflowStep);
                 UpdateSequenceNo;
                 "Event Step ID" := WorkflowStep.ID;
               END ELSE BEGIN
                 IF "Previous Workflow Step ID" = 0 THEN
                   "Previous Workflow Step ID" := "Parent Event Step ID";
                 ChangeChildsPreviousToMe("Workflow Code","Previous Workflow Step ID",WorkflowStep.ID);
                 WorkflowStep.VALIDATE(Type,WorkflowStep.Type::Response);
                 WorkflowStep.MODIFY(TRUE);
                 "Response Step ID" := WorkflowStep.ID;
               END;
             END;

    OnModify=VAR
               WorkflowStep@1000 : Record 1502;
             BEGIN
               IF NOT WorkflowStep.GET("Workflow Code","Event Step ID") THEN
                 EXIT;

               WorkflowStep.VALIDATE("Previous Workflow Step ID","Previous Workflow Step ID");
               WorkflowStep.VALIDATE("Sequence No.","Sequence No.");
               WorkflowStep.MODIFY(TRUE);
             END;

    OnDelete=VAR
               WorkflowStep@1000 : Record 1502;
               TempWorkflowStepBuffer@1001 : TEMPORARY Record 1507;
             BEGIN
               IF "Response Step ID" > 0 THEN BEGIN
                 WorkflowStep.GET("Workflow Code","Response Step ID");
                 WorkflowStep.DELETE(TRUE);
               END;

               IF "Response Step ID" = MultipleResponseID THEN BEGIN
                 TempWorkflowStepBuffer.PopulateTableFromEvent("Workflow Code","Event Step ID");
                 TempWorkflowStepBuffer.DELETEALL(TRUE);
               END;

               IF "Event Step ID" > 0 THEN BEGIN
                 WorkflowStep.GET("Workflow Code","Event Step ID");
                 WorkflowStep.DELETE(TRUE);
               END;
             END;

    CaptionML=[ENU=Workflow Step Buffer;
               ESM=B£fer de paso de flujo de trabajo;
               FRC=Tampon Çtape de flux de travail;
               ENC=Workflow Step Buffer];
  }
  FIELDS
  {
    { 1   ;   ;Order               ;Integer       ;CaptionML=[ENU=Order;
                                                              ESM=Orden;
                                                              FRC=Ordre;
                                                              ENC=Order] }
    { 2   ;   ;Indent              ;Integer       ;CaptionML=[ENU=Indent;
                                                              ESM=Sangr°a;
                                                              FRC=DÇcaler;
                                                              ENC=Indent] }
    { 3   ;   ;Event Description   ;Text250       ;TableRelation="Workflow Event".Description;
                                                   OnValidate=VAR
                                                                WorkflowEvent@1000 : Record 1520;
                                                                WorkflowStep@1001 : Record 1502;
                                                              BEGIN
                                                                WorkflowEvent.SETRANGE(Description,"Event Description");
                                                                IF NOT WorkflowEvent.FINDFIRST THEN BEGIN
                                                                  WorkflowEvent.SETFILTER(Description,'%1','@*' + "Event Description" + '*');
                                                                  IF NOT LookupEvents(WorkflowEvent.GETVIEW,WorkflowEvent) THEN
                                                                    ERROR(EventNotExistErr,"Event Description");
                                                                END;

                                                                WorkflowStep.SETRANGE("Workflow Code","Workflow Code");
                                                                WorkflowStep.SETRANGE(ID,"Event Step ID");
                                                                IF NOT WorkflowStep.FINDFIRST THEN BEGIN
                                                                  INSERT(TRUE);
                                                                  WorkflowStep.SETRANGE(ID,"Event Step ID");
                                                                  WorkflowStep.FINDFIRST;
                                                                END;

                                                                WorkflowStep.VALIDATE("Function Name",WorkflowEvent."Function Name");
                                                                WorkflowStep.MODIFY(TRUE);

                                                                UpdateCondition(WorkflowStep);
                                                                UpdateThen;
                                                              END;

                                                   OnLookup=VAR
                                                              WorkflowEvent@1000 : Record 1520;
                                                            BEGIN
                                                              LookupEvents('',WorkflowEvent);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Event Description;
                                                              ESM=Descripci¢n de evento;
                                                              FRC=Description ÇvÇnement;
                                                              ENC=Event Description] }
    { 4   ;   ;Condition           ;Text100       ;CaptionML=[ENU=Condition;
                                                              ESM=Condici¢n;
                                                              FRC=êtat;
                                                              ENC=Condition] }
    { 5   ;   ;Response Description;Text250       ;TableRelation="Workflow Response".Description;
                                                   OnValidate=VAR
                                                                WorkflowResponse@1001 : Record 1521;
                                                                WorkflowStep@1000 : Record 1502;
                                                              BEGIN
                                                                IF "Response Description" = '' THEN BEGIN
                                                                  DELETE(TRUE);
                                                                  EXIT;
                                                                END;

                                                                WorkflowResponse.SETRANGE(Description,"Response Description");
                                                                IF NOT WorkflowResponse.FINDFIRST THEN BEGIN
                                                                  WorkflowResponse.SETFILTER(Description,'%1','@*' + "Response Description" + '*');
                                                                  IF NOT ResponseDescriptionLookup(WorkflowResponse.GETVIEW,WorkflowResponse) THEN
                                                                    ERROR(ResponseNotExistErr,"Response Description");
                                                                END;

                                                                WorkflowStep.SETRANGE("Workflow Code","Workflow Code");
                                                                WorkflowStep.SETRANGE(ID,"Response Step ID");
                                                                IF NOT WorkflowStep.FINDFIRST THEN BEGIN
                                                                  INSERT(TRUE);
                                                                  WorkflowStep.SETRANGE(ID,"Response Step ID");
                                                                  WorkflowStep.FINDFIRST;
                                                                END;

                                                                WorkflowStep.VALIDATE("Function Name",WorkflowResponse."Function Name");
                                                                WorkflowStep.MODIFY(TRUE);
                                                                UpdateRecFromWorkflowStep;
                                                                MODIFY(TRUE);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Response Description;
                                                              ESM=Descripci¢n de respuesta;
                                                              FRC=Description rÇponse;
                                                              ENC=Response Description] }
    { 7   ;   ;Event Step ID       ;Integer       ;TableRelation="Workflow Step".ID WHERE (Workflow Code=FIELD(Workflow Code),
                                                                                           Type=CONST(Event));
                                                   CaptionML=[ENU=Event Step ID;
                                                              ESM=Id. de paso de evento;
                                                              FRC=Code de l'Çtape d'ÇvÇnement;
                                                              ENC=Event Step ID] }
    { 8   ;   ;Response Step ID    ;Integer       ;TableRelation="Workflow Step".ID WHERE (Workflow Code=FIELD(Workflow Code),
                                                                                           Type=CONST(Response));
                                                   CaptionML=[ENU=Response Step ID;
                                                              ESM=Id. de paso de respuesta;
                                                              FRC=Code de l'Çtape de rÇponse;
                                                              ENC=Response Step ID] }
    { 9   ;   ;Workflow Code       ;Code20        ;TableRelation=Workflow.Code;
                                                   CaptionML=[ENU=Workflow Code;
                                                              ESM=C¢digo de flujo de trabajo;
                                                              FRC=Code flux de travail;
                                                              ENC=Workflow Code] }
    { 10  ;   ;Parent Event Step ID;Integer       ;TableRelation="Workflow Step".ID WHERE (Workflow Code=FIELD(Workflow Code),
                                                                                           Type=CONST(Event));
                                                   CaptionML=[ENU=Parent Event Step ID;
                                                              ESM=Id. de paso de evento principal;
                                                              FRC=Code de l'Çtape d'ÇvÇnement parent;
                                                              ENC=Parent Event Step ID] }
    { 11  ;   ;Previous Workflow Step ID;Integer  ;TableRelation="Workflow Step".ID WHERE (Workflow Code=FIELD(Workflow Code));
                                                   CaptionML=[ENU=Previous Workflow Step ID;
                                                              ESM=Id. de paso de flujo de trabajo anterior;
                                                              FRC=Code Çtape de flux de travail prÇcÇdente;
                                                              ENC=Previous Workflow Step ID] }
    { 12  ;   ;Response Description Style;Text30  ;CaptionML=[ENU=Response Description Style;
                                                              ESM=Estilo de descripci¢n de respuesta;
                                                              FRC=Style de description de rÇponse;
                                                              ENC=Response Description Style] }
    { 14  ;   ;Entry Point         ;Boolean       ;OnValidate=VAR
                                                                WorkflowStep@1000 : Record 1502;
                                                              BEGIN
                                                                IF NOT WorkflowStep.GET("Workflow Code","Event Step ID") THEN
                                                                  ERROR(WhenMissingErr);

                                                                WorkflowStep.VALIDATE("Entry Point","Entry Point");
                                                                WorkflowStep.MODIFY(TRUE);
                                                              END;

                                                   CaptionML=[ENU=Entry Point;
                                                              ESM=Punto de entrada;
                                                              FRC=Point d'entrÇe;
                                                              ENC=Entry Point] }
    { 15  ;   ;Sequence No.        ;Integer       ;CaptionML=[ENU=Sequence No.;
                                                              ESM=Nß secuencia;
                                                              FRC=N¯ sÇquence;
                                                              ENC=Sequence No.] }
    { 16  ;   ;Next Step Description;Text250      ;CaptionML=[ENU=Next Step Description;
                                                              ESM=Descripci¢n de siguiente paso;
                                                              FRC=Description Çtape suivante;
                                                              ENC=Next Step Description] }
    { 17  ;   ;Argument            ;GUID          ;CaptionML=[ENU=Argument;
                                                              ESM=Argumento;
                                                              FRC=Argument;
                                                              ENC=Argument] }
    { 18  ;   ;Template            ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Workflow.Template WHERE (Code=FIELD(Workflow Code)));
                                                   CaptionML=[ENU=Template;
                                                              ESM=Plantilla;
                                                              FRC=Modäle;
                                                              ENC=Template] }
  }
  KEYS
  {
    {    ;Order                                   ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ThenTextForMultipleResponsesTxt@1002 : TextConst 'ENU=(+) %1;ESM=(+) %1;FRC=(+) %1;ENC=(+) %1';
      SelectResponseTxt@1000 : TextConst 'ENU=<Select Response>;ESM=<Seleccionar respuesta>;FRC=<SÇlectionner la rÇponse>;ENC=<Select Response>';
      EventNotExistErr@1001 : TextConst 'ENU=Workflow event %1 does not exist.;ESM=El evento de flujo de trabajo %1 no existe.;FRC=L''ÇvÇnement de flux de travail %1 n''existe pas.;ENC=Workflow event %1 does not exist.';
      WhenMissingErr@1003 : TextConst 'ENU=You need to select a When first.;ESM=Debe seleccionar primero un campo Cu†ndo.;FRC=Vous devez d''abord sÇlectionner une condition (Si).;ENC=You need to select a When first.';
      AlwaysTxt@1004 : TextConst 'ENU=<Always>;ESM=<Siempre>;FRC=<Toujours>;ENC=<Always>';
      ResponseNotExistErr@1005 : TextConst 'ENU=Workflow response %1 does not exist.;ESM=La respuesta de flujo de trabajo %1 no existe.;FRC=La rÇponse de flux de travail %1 n''existe pas.;ENC=Workflow response %1 does not exist.';
      WhenNextStepDescTxt@1006 : TextConst 'ENU=Next when "%1";ESM=Siguiente cuando "%1";FRC=Si suivant Æˇ%1ˇØ;ENC=Next when "%1"';
      ThenNextStepDescTxt@1007 : TextConst 'ENU=Next then "%1";ESM=Siguiente despuÇs de "%1";FRC=Alors suivant Æˇ%1ˇØ;ENC=Next then "%1"';
      CombinedConditionTxt@1008 : TextConst '@@@={Locked};ENU="%1; %2";ESM="%1; %2";FRC="%1; %2";ENC="%1; %2"';

    PROCEDURE OpenEventConditions@7();
    VAR
      Workflow@1000 : Record 1501;
      WorkflowStep@1002 : Record 1502;
      WorkflowEvent@1003 : Record 1520;
    BEGIN
      Workflow.GET("Workflow Code");
      WorkflowStep.GET(Workflow.Code,"Event Step ID");
      WorkflowEvent.GET(WorkflowStep."Function Name");

      IF WorkflowEvent."Used for Record Change" THEN
        WorkflowStep.OpenAdvancedEventConditions
      ELSE
        WorkflowStep.OpenEventConditions;

      UpdateCondition(WorkflowStep);
    END;

    PROCEDURE DeleteEventConditions@24();
    VAR
      WorkflowStep@1000 : Record 1502;
    BEGIN
      WorkflowStep.GET("Workflow Code","Event Step ID");
      WorkflowStep.DeleteEventConditions;
      UpdateCondition(WorkflowStep);
    END;

    PROCEDURE OpenEventResponses@12();
    VAR
      TempWorkflowStepBuffer@1000 : TEMPORARY Record 1507;
    BEGIN
      TempWorkflowStepBuffer.PopulateTableFromEvent("Workflow Code","Event Step ID");
      IF PAGE.RUNMODAL(PAGE::"Workflow Step Responses",TempWorkflowStepBuffer) = ACTION::LookupOK THEN;
      UpdateThen;
    END;

    PROCEDURE PopulateTable@1(WorkflowCode@1000 : Code[20]);
    VAR
      OrderVar@1001 : Integer;
    BEGIN
      OrderVar := 10000;
      CreateTree(WorkflowCode,OrderVar,0,0,FALSE);
      IF FINDSET THEN;
    END;

    LOCAL PROCEDURE CreateTree@2(WorkflowCode@1003 : Code[20];VAR OrderVar@1004 : Integer;NodeId@1000 : Integer;CurrIndent@1002 : Integer;ForLookup@1005 : Boolean);
    VAR
      WorkflowStep@1001 : Record 1502;
    BEGIN
      IF NodeId <> 0 THEN
        CreateNode(WorkflowCode,OrderVar,NodeId,CurrIndent,ForLookup);

      WorkflowStep.SETRANGE("Workflow Code",WorkflowCode);
      WorkflowStep.SETRANGE("Previous Workflow Step ID",NodeId);
      WorkflowStep.SETCURRENTKEY("Sequence No.");

      IF NOT WorkflowStep.FINDSET THEN
        EXIT;

      REPEAT
        CreateTree(WorkflowCode,OrderVar,WorkflowStep.ID,CurrIndent,ForLookup);
      UNTIL WorkflowStep.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateNode@3(WorkflowCode@1009 : Code[20];VAR OrderVar@1010 : Integer;VAR NodeID@1000 : Integer;VAR CurrIndent@1003 : Integer;ForLookup@1001 : Boolean);
    VAR
      WorkflowStep@1007 : Record 1502;
    BEGIN
      WorkflowStep.GET(WorkflowCode,NodeID);
      CreateWhen(WorkflowCode,OrderVar,CurrIndent,WorkflowStep);
      IF ForLookup THEN
        NodeID := CreateResponseTree(WorkflowCode,OrderVar,NodeID)
      ELSE
        NodeID := UpdateThen;
    END;

    LOCAL PROCEDURE UpdateThen@8() : Integer;
    VAR
      TempWorkflowStepBuffer@1000 : TEMPORARY Record 1507;
      LastThen@1001 : Text[250];
    BEGIN
      TempWorkflowStepBuffer.PopulateTableFromEvent("Workflow Code","Event Step ID");
      IF TempWorkflowStepBuffer.FINDFIRST THEN;
      CASE TempWorkflowStepBuffer.COUNT OF
        0:
          BEGIN
            "Response Description" := SelectResponseTxt;
            "Response Step ID" := 0;
          END;
        1:
          BEGIN
            "Response Description" := TempWorkflowStepBuffer."Response Description";
            "Response Step ID" := TempWorkflowStepBuffer."Response Step ID";
          END;
        ELSE BEGIN
          LastThen := COPYSTR(TempWorkflowStepBuffer."Response Description",1,
              MAXSTRLEN(TempWorkflowStepBuffer."Response Description") - STRLEN(ThenTextForMultipleResponsesTxt));
          "Response Description" := STRSUBSTNO(ThenTextForMultipleResponsesTxt,LastThen);
          "Response Step ID" := MultipleResponseID;
        END;
      END;

      UpdateResponseDescriptionStyle;

      MODIFY;

      IF TempWorkflowStepBuffer.FINDLAST THEN
        EXIT(TempWorkflowStepBuffer."Response Step ID");

      EXIT("Event Step ID")
    END;

    PROCEDURE PopulateTableFromEvent@6(WorkflowCode@1000 : Code[20];WorkflowEventID@1001 : Integer);
    VAR
      OrderVar@1002 : Integer;
    BEGIN
      SETRANGE("Workflow Code",WorkflowCode);
      SETRANGE("Parent Event Step ID",WorkflowEventID);
      OrderVar := 10000;
      CreateResponseTree(WorkflowCode,OrderVar,WorkflowEventID);
      IF FINDSET THEN;
    END;

    LOCAL PROCEDURE CreateResponseTree@5(WorkflowCode@1003 : Code[20];VAR OrderVar@1004 : Integer;NodeId@1000 : Integer) : Integer;
    VAR
      WorkflowStep@1001 : Record 1502;
      ParentEventStepID@1002 : Integer;
    BEGIN
      ParentEventStepID := NodeId;

      REPEAT
        WorkflowStep.SETRANGE("Workflow Code",WorkflowCode);
        WorkflowStep.SETRANGE("Previous Workflow Step ID",NodeId);

        IF NOT WorkflowStep.FINDFIRST THEN
          EXIT(NodeId);

        IF WorkflowStep.Type <> WorkflowStep.Type::Response THEN
          EXIT(NodeId);

        CreateResponseNode(WorkflowCode,OrderVar,WorkflowStep,ParentEventStepID);

        NodeId := WorkflowStep.ID;
      UNTIL FALSE;
    END;

    LOCAL PROCEDURE CreateResponseNode@4(WorkflowCode@1002 : Code[20];VAR OrderVar@1003 : Integer;WorkflowStep@1000 : Record 1502;ParentEventStepID@1001 : Integer);
    BEGIN
      INIT;
      "Workflow Code" := WorkflowCode;
      Order := OrderVar;
      OrderVar += 10000;
      "Parent Event Step ID" := ParentEventStepID;
      "Response Step ID" := WorkflowStep.ID;
      UpdateRecFromWorkflowStep;
      UpdateNextStepDescription;
      INSERT;
    END;

    PROCEDURE ClearBuffer@9();
    VAR
      TempWorkflowStepBuffer@1000 : TEMPORARY Record 1507;
    BEGIN
      TempWorkflowStepBuffer.COPY(Rec,TRUE);
      TempWorkflowStepBuffer.RESET;
      TempWorkflowStepBuffer.DELETEALL;
    END;

    PROCEDURE PopulateLookupTable@29(WorkflowCode@1000 : Code[20]);
    VAR
      OrderVar@1001 : Integer;
    BEGIN
      OrderVar := 10000;
      CreateTree(WorkflowCode,OrderVar,0,0,TRUE);
      IF FINDSET THEN;
    END;

    LOCAL PROCEDURE CreateWorkflowStep@13(VAR WorkflowStep@1000 : Record 1502;WorkflowCode@1001 : Code[20];PreviousStepID@1002 : Integer);
    BEGIN
      WorkflowStep.INIT;
      WorkflowStep.VALIDATE("Workflow Code",WorkflowCode);
      WorkflowStep.INSERT(TRUE);

      WorkflowStep.VALIDATE("Previous Workflow Step ID",PreviousStepID);
      WorkflowStep.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ChangeChildsPreviousToMe@17(WorkflowCode@1000 : Code[20];CurrentPreviousID@1001 : Integer;NewPreviousID@1002 : Integer);
    VAR
      ChildWorkflowStep@1003 : Record 1502;
    BEGIN
      IF CurrentPreviousID <> 0 THEN BEGIN
        ChildWorkflowStep.SETRANGE("Workflow Code",WorkflowCode);
        ChildWorkflowStep.SETRANGE("Previous Workflow Step ID",CurrentPreviousID);
        ChildWorkflowStep.SETFILTER(ID,STRSUBSTNO('<>%1',NewPreviousID));
        IF ChildWorkflowStep.FINDSET(TRUE) THEN
          REPEAT
            ChildWorkflowStep.VALIDATE("Previous Workflow Step ID",NewPreviousID);
            ChildWorkflowStep.MODIFY(TRUE);
          UNTIL ChildWorkflowStep.NEXT <> 1;
      END;
    END;

    LOCAL PROCEDURE MultipleResponseID@10() : Integer;
    BEGIN
      EXIT(-1);
    END;

    PROCEDURE UpdateResponseDescriptionStyle@15();
    BEGIN
      IF "Response Step ID" = MultipleResponseID THEN
        "Response Description Style" := 'StandardAccent'
      ELSE
        "Response Description Style" := 'Standard';
    END;

    LOCAL PROCEDURE CreateWhen@20(WorkflowCode@1003 : Code[20];VAR OrderVar@1002 : Integer;VAR CurrIndent@1000 : Integer;WorkflowStep@1004 : Record 1502);
    VAR
      WorkflowEvent@1005 : Record 1520;
    BEGIN
      INIT;
      "Workflow Code" := WorkflowCode;
      Order := OrderVar;
      OrderVar += 10000;
      "Event Step ID" := WorkflowStep.ID;
      IF WorkflowEvent.GET(WorkflowStep."Function Name") THEN
        "Event Description" := WorkflowEvent.Description;
      "Previous Workflow Step ID" := WorkflowStep."Previous Workflow Step ID";
      UpdateCondition(WorkflowStep);
      "Entry Point" := WorkflowStep."Entry Point";
      "Sequence No." := WorkflowStep."Sequence No.";
      Indent := CurrIndent;
      CurrIndent += 1;
      INSERT;
    END;

    PROCEDURE CalculateNewKey@11(BelowxRec@1000 : Boolean);
    VAR
      TempWorkflowStepBuffer@1001 : TEMPORARY Record 1507;
    BEGIN
      TempWorkflowStepBuffer.COPY(Rec,TRUE);
      IF BelowxRec THEN BEGIN
        IF TempWorkflowStepBuffer.FINDLAST THEN;
        Order := TempWorkflowStepBuffer.Order + 10000;
      END ELSE BEGIN
        TempWorkflowStepBuffer.SETFILTER(Order,'<%1',xRec.Order);
        IF TempWorkflowStepBuffer.FINDLAST THEN;
        Order := ROUND((xRec.Order - TempWorkflowStepBuffer.Order) / 2,1) + TempWorkflowStepBuffer.Order;
      END;
    END;

    PROCEDURE CreateNewWhenThenLine@14(WorkflowCode@1001 : Code[20];BelowxRec@1000 : Boolean);
    BEGIN
      IF xRec.FIND THEN BEGIN
        "Previous Workflow Step ID" := xRec."Previous Workflow Step ID";
        Indent := xRec.Indent;
        "Sequence No." := xRec."Sequence No.";
      END;

      "Workflow Code" := WorkflowCode;

      CalculateNewKey(BelowxRec);
    END;

    LOCAL PROCEDURE UpdateCondition@18(WorkflowStep@1000 : Record 1502);
    VAR
      RuleAsText@1001 : Text;
    BEGIN
      WorkflowStep.FIND;
      Condition := COPYSTR(WorkflowStep.GetConditionAsDisplayText,1,MAXSTRLEN(Condition));
      RuleAsText := WorkflowStep.GetRuleAsDisplayText;
      IF RuleAsText <> '' THEN
        IF Condition = '' THEN
          Condition := COPYSTR(RuleAsText,1,MAXSTRLEN(Condition))
        ELSE
          Condition := COPYSTR(STRSUBSTNO(CombinedConditionTxt,Condition,RuleAsText),1,MAXSTRLEN(Condition));

      IF Condition = '' THEN
        Condition := AlwaysTxt;
    END;

    PROCEDURE SetxRec@16(TempWorkflowStepBuffer@1000 : TEMPORARY Record 1507);
    BEGIN
      xRec := TempWorkflowStepBuffer;
    END;

    LOCAL PROCEDURE UpdateSequenceNo@19();
    VAR
      TempWorkflowStepBuffer@1002 : TEMPORARY Record 1507;
      WorkflowStep@1001 : Record 1502;
      i@1000 : Integer;
    BEGIN
      TempWorkflowStepBuffer.COPY(Rec,TRUE);
      TempWorkflowStepBuffer.SETRANGE("Previous Workflow Step ID","Previous Workflow Step ID");
      TempWorkflowStepBuffer.SETFILTER("Sequence No.",'>=%1',"Sequence No.");

      IF NOT TempWorkflowStepBuffer.FINDSET THEN
        EXIT;

      i := "Sequence No.";
      REPEAT
        i += 1;
        WorkflowStep.GET(TempWorkflowStepBuffer."Workflow Code",TempWorkflowStepBuffer."Event Step ID");
        WorkflowStep.VALIDATE("Sequence No.",i);
        WorkflowStep.MODIFY(TRUE);
      UNTIL TempWorkflowStepBuffer.NEXT = 0;
    END;

    PROCEDURE MoveLeft@22();
    VAR
      TempSiblingWorkflowStepBuffer@1001 : TEMPORARY Record 1507;
      ParentEventWorkflowStep@1005 : Record 1502;
      CurrentWorkflowStep@1006 : Record 1502;
      NewParentWorkflowStep@1008 : Record 1502;
      ChildEventWorkflowStep@1000 : Record 1502;
    BEGIN
      CurrentWorkflowStep.GET("Workflow Code","Event Step ID");
      IF CurrentWorkflowStep.HasEventsInSubtree(ChildEventWorkflowStep) THEN
        EXIT;

      IF NOT FindParentEvent(CurrentWorkflowStep,ParentEventWorkflowStep) THEN
        EXIT;

      FindSiblingEvents(TempSiblingWorkflowStepBuffer);
      TempSiblingWorkflowStepBuffer.SETFILTER(Order,'>%1',Order);
      IF FindLastResponseDescendant(CurrentWorkflowStep,NewParentWorkflowStep) THEN
        TempSiblingWorkflowStepBuffer.MODIFYALL("Previous Workflow Step ID",NewParentWorkflowStep.ID,TRUE)
      ELSE
        TempSiblingWorkflowStepBuffer.MODIFYALL("Previous Workflow Step ID",CurrentWorkflowStep.ID,TRUE);

      CurrentWorkflowStep.VALIDATE("Previous Workflow Step ID",ParentEventWorkflowStep."Previous Workflow Step ID");
      CurrentWorkflowStep.MODIFY(TRUE);

      "Previous Workflow Step ID" := CurrentWorkflowStep."Previous Workflow Step ID";
      Indent -= 1;
      MODIFY;

      UpdateSequenceNo;
    END;

    PROCEDURE MoveRight@23();
    VAR
      TempSiblingWorkflowStepBuffer@1001 : TEMPORARY Record 1507;
      ParentEventWorkflowStep@1007 : Record 1502;
      NewParentWorkflowStep@1006 : Record 1502;
      CurrentWorkflowStep@1005 : Record 1502;
    BEGIN
      CurrentWorkflowStep.GET("Workflow Code","Event Step ID");

      IF UpdateSubtree(CurrentWorkflowStep) THEN
        EXIT;

      FindSiblingEvents(TempSiblingWorkflowStepBuffer);
      TempSiblingWorkflowStepBuffer.SETFILTER(Order,'<%1',Order);
      IF NOT TempSiblingWorkflowStepBuffer.FINDLAST THEN
        EXIT;

      ParentEventWorkflowStep.GET(TempSiblingWorkflowStepBuffer."Workflow Code",TempSiblingWorkflowStepBuffer."Event Step ID");
      IF FindLastResponseDescendant(ParentEventWorkflowStep,NewParentWorkflowStep) THEN
        CurrentWorkflowStep.VALIDATE("Previous Workflow Step ID",NewParentWorkflowStep.ID)
      ELSE
        CurrentWorkflowStep.VALIDATE("Previous Workflow Step ID",ParentEventWorkflowStep.ID);
      CurrentWorkflowStep.MODIFY(TRUE);

      "Previous Workflow Step ID" := CurrentWorkflowStep."Previous Workflow Step ID";
      Indent := TempSiblingWorkflowStepBuffer.Indent + 1;
      MODIFY;

      UpdateSequenceNo;
    END;

    LOCAL PROCEDURE UpdateSubtree@36(VAR CurrentWorkflowStep@1000 : Record 1502) : Boolean;
    VAR
      ChildEventWorkflowStep@1001 : Record 1502;
      ParentEventWorkflowStep@1004 : Record 1502;
      NewParentWorkflowStep@1003 : Record 1502;
      NewParentStepID@1002 : Integer;
    BEGIN
      IF NOT CurrentWorkflowStep.HasEventsInSubtree(ChildEventWorkflowStep) THEN
        EXIT(FALSE);

      IF FindParentEvent(CurrentWorkflowStep,ParentEventWorkflowStep) THEN
        EXIT(FALSE);

      IF NOT FindPreviousRootEvent(Rec,ParentEventWorkflowStep) THEN
        EXIT(FALSE);

      IF FindLastResponseDescendant(ParentEventWorkflowStep,NewParentWorkflowStep) THEN
        NewParentStepID := NewParentWorkflowStep.ID
      ELSE
        NewParentStepID := ParentEventWorkflowStep.ID;

      REPEAT
        ChildEventWorkflowStep.VALIDATE("Previous Workflow Step ID",NewParentStepID);
        ChildEventWorkflowStep.MODIFY(TRUE);
      UNTIL NOT CurrentWorkflowStep.HasEventsInSubtree(ChildEventWorkflowStep);

      Indent += 1;
      MODIFY;

      CurrentWorkflowStep.VALIDATE("Previous Workflow Step ID",NewParentStepID);
      CurrentWorkflowStep.MODIFY(TRUE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE FindLastResponseDescendant@25(ParentWorkflowStep@1000 : Record 1502;VAR WorkflowStep@1001 : Record 1502) : Boolean;
    VAR
      ChildWorkflowStep@1003 : Record 1502;
    BEGIN
      WorkflowStep.SETCURRENTKEY("Sequence No.");
      WorkflowStep.SETRANGE("Workflow Code",ParentWorkflowStep."Workflow Code");
      WorkflowStep.SETRANGE("Previous Workflow Step ID",ParentWorkflowStep.ID);
      WorkflowStep.SETRANGE(Type,ParentWorkflowStep.Type::Response);
      IF WorkflowStep.FINDLAST THEN BEGIN
        ChildWorkflowStep.INIT;
        IF FindLastResponseDescendant(WorkflowStep,ChildWorkflowStep) THEN
          WorkflowStep := ChildWorkflowStep;
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE FindParentEvent@30(WorkflowStep@1000 : Record 1502;VAR ParentEventWorkflowStep@1001 : Record 1502) : Boolean;
    VAR
      PreviousWorkflowStep@1002 : Record 1502;
    BEGIN
      IF NOT PreviousWorkflowStep.GET(WorkflowStep."Workflow Code",WorkflowStep."Previous Workflow Step ID") THEN
        EXIT(FALSE);

      CASE PreviousWorkflowStep.Type OF
        PreviousWorkflowStep.Type::"Event":
          BEGIN
            ParentEventWorkflowStep := PreviousWorkflowStep;
            EXIT(TRUE);
          END;
        PreviousWorkflowStep.Type::Response:
          EXIT(FindParentEvent(PreviousWorkflowStep,ParentEventWorkflowStep));
      END;
    END;

    LOCAL PROCEDURE FindSiblingEvents@31(VAR TempWorkflowStepBuffer@1000 : TEMPORARY Record 1507);
    BEGIN
      TempWorkflowStepBuffer.COPY(Rec,TRUE);
      CLEAR(TempWorkflowStepBuffer);
      TempWorkflowStepBuffer.SETCURRENTKEY("Sequence No.");
      TempWorkflowStepBuffer.SETRANGE("Workflow Code","Workflow Code");
      TempWorkflowStepBuffer.SETRANGE("Previous Workflow Step ID","Previous Workflow Step ID");
      TempWorkflowStepBuffer.SETRANGE(Indent,Indent);
    END;

    LOCAL PROCEDURE FindPreviousRootEvent@32(WorkflowStepBuffer@1000 : Record 1507;VAR RootWorkflowStep@1001 : Record 1502) : Boolean;
    VAR
      TempWorkflowStepBuffer@1002 : TEMPORARY Record 1507;
    BEGIN
      FindSiblingEvents(TempWorkflowStepBuffer);
      TempWorkflowStepBuffer.SETRANGE("Previous Workflow Step ID",0);
      TempWorkflowStepBuffer.SETFILTER(Order,'<%1',WorkflowStepBuffer.Order);
      IF TempWorkflowStepBuffer.FINDLAST THEN
        EXIT(RootWorkflowStep.GET(TempWorkflowStepBuffer."Workflow Code",TempWorkflowStepBuffer."Event Step ID"));
    END;

    PROCEDURE UpdateNextStepDescription@27();
    VAR
      NextStepWorkflowStep@1000 : Record 1502;
      WorkflowStep@1001 : Record 1502;
    BEGIN
      GetWorkflowStep(WorkflowStep);

      IF NextStepWorkflowStep.GET(WorkflowStep."Workflow Code",WorkflowStep."Next Workflow Step ID") THEN
        CASE NextStepWorkflowStep.Type OF
          NextStepWorkflowStep.Type::"Event":
            "Next Step Description" := STRSUBSTNO(WhenNextStepDescTxt,NextStepWorkflowStep.GetDescription);
          NextStepWorkflowStep.Type::Response:
            "Next Step Description" := STRSUBSTNO(ThenNextStepDescTxt,NextStepWorkflowStep.GetDescription);
        END
      ELSE
        "Next Step Description" := '';
    END;

    PROCEDURE GetWorkflowStep@28(VAR WorkflowStep@1000 : Record 1502) : Boolean;
    BEGIN
      EXIT(WorkflowStep.GET("Workflow Code","Event Step ID" + "Response Step ID"));
    END;

    PROCEDURE NextStepLookup@26() : Boolean;
    VAR
      WorkflowStep@1000 : Record 1502;
    BEGIN
      IF GetWorkflowStep(WorkflowStep) THEN
        IF WorkflowStep.LookupOtherWorkflowStepID(WorkflowStep."Next Workflow Step ID") THEN BEGIN
          WorkflowStep.VALIDATE("Next Workflow Step ID");
          WorkflowStep.MODIFY(TRUE);
          UpdateNextStepDescription;
          EXIT(TRUE);
        END;

      EXIT(FALSE);
    END;

    PROCEDURE ResponseDescriptionLookup@21(ResponseFilter@1002 : Text;VAR WorkflowResponse@1003 : Record 1521) : Boolean;
    VAR
      WorkflowStep@1001 : Record 1502;
      TempWorkflowResponse@1000 : TEMPORARY Record 1521;
    BEGIN
      WorkflowStep.GET("Workflow Code","Parent Event Step ID");
      FindSupportedResponses(WorkflowStep."Function Name",TempWorkflowResponse);
      FindIndependentResponses(TempWorkflowResponse);

      TempWorkflowResponse.SETVIEW(ResponseFilter);
      IF PAGE.RUNMODAL(PAGE::"Workflow Responses",TempWorkflowResponse) = ACTION::LookupOK THEN BEGIN
        IF NOT WorkflowStep.GET("Workflow Code","Response Step ID") THEN BEGIN
          INSERT(TRUE);
          WorkflowStep.GET("Workflow Code","Response Step ID");
        END;

        WorkflowStep.VALIDATE("Function Name",TempWorkflowResponse."Function Name");
        WorkflowStep.MODIFY(TRUE);

        "Response Description" := TempWorkflowResponse.Description;
        WorkflowResponse.GET(TempWorkflowResponse."Function Name");

        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE UpdateRecFromWorkflowStep@33();
    VAR
      WorkflowStep@1000 : Record 1502;
    BEGIN
      IF NOT GetWorkflowStep(WorkflowStep) THEN
        EXIT;

      "Response Description" := WorkflowStep.GetDescription;
      "Previous Workflow Step ID" := WorkflowStep."Previous Workflow Step ID";
      Argument := WorkflowStep.Argument;
    END;

    LOCAL PROCEDURE LookupEvents@39(EventFilter@1001 : Text;VAR WorkflowEvent@1004 : Record 1520) : Boolean;
    VAR
      WorkflowStep@1002 : Record 1502;
      ParentEventWorkflowStep@1005 : Record 1502;
      TempWorkflowStepBuffer@1000 : TEMPORARY Record 1507;
      TempWorkflowEvent@1003 : TEMPORARY Record 1520;
    BEGIN
      IF WorkflowStep.GET("Workflow Code","Event Step ID") THEN
        FindParentEvent(WorkflowStep,ParentEventWorkflowStep)
      ELSE BEGIN
        TempWorkflowStepBuffer.COPY(Rec,TRUE);
        TempWorkflowStepBuffer.SETRANGE("Workflow Code","Workflow Code");
        TempWorkflowStepBuffer.SETFILTER(Order,'<%1',Order);
        IF TempWorkflowStepBuffer.FINDLAST THEN
          ParentEventWorkflowStep.GET(TempWorkflowStepBuffer."Workflow Code",TempWorkflowStepBuffer."Event Step ID");
      END;

      FindSupportedEvents(ParentEventWorkflowStep."Function Name",TempWorkflowEvent);

      FindIndependentEvents(TempWorkflowEvent);

      TempWorkflowEvent.SETVIEW(EventFilter);
      IF PAGE.RUNMODAL(0,TempWorkflowEvent) = ACTION::LookupOK THEN BEGIN
        VALIDATE("Event Description",TempWorkflowEvent.Description);
        WorkflowEvent.GET(TempWorkflowEvent."Function Name");
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE FindSupportedEvents@35(PredecessorFunctionName@1000 : Code[128];VAR TempWorkflowEvent@1002 : TEMPORARY Record 1520);
    VAR
      WFEventResponseCombination@1001 : Record 1509;
      WorkflowEvent@1003 : Record 1520;
    BEGIN
      WFEventResponseCombination.SETRANGE(Type,WFEventResponseCombination.Type::"Event");
      WFEventResponseCombination.SETRANGE("Predecessor Type",WFEventResponseCombination."Predecessor Type"::"Event");
      WFEventResponseCombination.SETRANGE("Predecessor Function Name",PredecessorFunctionName);
      IF WFEventResponseCombination.FINDSET THEN
        REPEAT
          IF WorkflowEvent.GET(WFEventResponseCombination."Function Name") THEN BEGIN
            TempWorkflowEvent := WorkflowEvent;
            TempWorkflowEvent.Independent := FALSE;
            IF TempWorkflowEvent.INSERT THEN;
          END;
        UNTIL WFEventResponseCombination.NEXT = 0;
    END;

    LOCAL PROCEDURE FindSupportedResponses@34(PredecessorFunctionName@1000 : Code[128];VAR TempWorkflowResponse@1002 : TEMPORARY Record 1521);
    VAR
      WFEventResponseCombination@1001 : Record 1509;
      WorkflowResponse@1003 : Record 1521;
    BEGIN
      WFEventResponseCombination.SETRANGE(Type,WFEventResponseCombination.Type::Response);
      WFEventResponseCombination.SETRANGE("Predecessor Type",WFEventResponseCombination."Predecessor Type"::"Event");
      WFEventResponseCombination.SETRANGE("Predecessor Function Name",PredecessorFunctionName);
      IF WFEventResponseCombination.FINDSET THEN
        REPEAT
          IF WorkflowResponse.GET(WFEventResponseCombination."Function Name") THEN BEGIN
            TempWorkflowResponse := WorkflowResponse;
            TempWorkflowResponse.Independent := FALSE;
            IF TempWorkflowResponse.INSERT THEN;
          END;
        UNTIL WFEventResponseCombination.NEXT = 0;
    END;

    LOCAL PROCEDURE FindIndependentEvents@41(VAR TempWorkflowEvent@1000 : TEMPORARY Record 1520);
    VAR
      WorkflowEvent@1001 : Record 1520;
    BEGIN
      IF WorkflowEvent.FINDSET THEN
        REPEAT
          IF NOT WorkflowEvent.HasPredecessors THEN BEGIN
            TempWorkflowEvent := WorkflowEvent;
            TempWorkflowEvent.Independent := TRUE;
            IF TempWorkflowEvent.INSERT THEN;
          END;
        UNTIL WorkflowEvent.NEXT = 0;
    END;

    LOCAL PROCEDURE FindIndependentResponses@38(VAR TempWorkflowResponse@1000 : TEMPORARY Record 1521);
    VAR
      WorkflowResponse@1001 : Record 1521;
    BEGIN
      IF WorkflowResponse.FINDSET THEN
        REPEAT
          IF NOT WorkflowResponse.HasPredecessors THEN BEGIN
            TempWorkflowResponse := WorkflowResponse;
            TempWorkflowResponse.Independent := TRUE;
            IF TempWorkflowResponse.INSERT THEN;
          END;
        UNTIL WorkflowResponse.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

