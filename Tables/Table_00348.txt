OBJECT Table 348 Dimension
{
  OBJECT-PROPERTIES
  {
    Date=01/29/16;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.44974;
  }
  PROPERTIES
  {
    DataCaptionFields=Code,Name;
    OnDelete=VAR
               GLSetup@1000 : Record 98;
             BEGIN
               DimVal.SETRANGE("Dimension Code",xRec.Code);
               IF CheckIfDimUsed(xRec.Code,0,'','',0) THEN BEGIN
                 IF DimVal.FINDSET THEN
                   REPEAT
                     IF DimVal.CheckIfDimValueUsed THEN
                       ERROR(Text000,
                         GetCheckDimErr);
                   UNTIL DimVal.NEXT = 0;
                 ERROR(Text001,GetCheckDimErr);
               END;
               IF DimVal.FINDSET THEN
                 REPEAT
                   IF DimVal.CheckIfDimValueUsed THEN
                     ERROR(Text002);
                 UNTIL DimVal.NEXT = 0;

               DefaultDim.SETRANGE("Dimension Code",Code);
               DefaultDim.DELETEALL(TRUE);

               DimVal.SETRANGE("Dimension Code",Code);
               DimVal.DELETEALL(TRUE);

               DimComb.SETRANGE("Dimension 1 Code",Code);
               DimComb.DELETEALL;

               DimComb.RESET;
               DimComb.SETRANGE("Dimension 2 Code",Code);
               DimComb.DELETEALL;

               SelectedDim.SETRANGE("Dimension Code",Code);
               SelectedDim.DELETEALL;

               AnalysisSelectedDim.SETRANGE("Dimension Code",Code);
               AnalysisSelectedDim.DELETEALL;

               DimTrans.SETRANGE(Code,Code);
               DimTrans.DELETEALL;

               GLSetup.GET;
               CASE Code OF
                 GLSetup."Shortcut Dimension 3 Code":
                   BEGIN
                     GLSetup."Shortcut Dimension 3 Code" := '';
                     GLSetup.MODIFY;
                   END;
                 GLSetup."Shortcut Dimension 4 Code":
                   BEGIN
                     GLSetup."Shortcut Dimension 4 Code" := '';
                     GLSetup.MODIFY;
                   END;
                 GLSetup."Shortcut Dimension 5 Code":
                   BEGIN
                     GLSetup."Shortcut Dimension 5 Code" := '';
                     GLSetup.MODIFY;
                   END;
                 GLSetup."Shortcut Dimension 6 Code":
                   BEGIN
                     GLSetup."Shortcut Dimension 6 Code" := '';
                     GLSetup.MODIFY;
                   END;
                 GLSetup."Shortcut Dimension 7 Code":
                   BEGIN
                     GLSetup."Shortcut Dimension 7 Code" := '';
                     GLSetup.MODIFY;
                   END;
                 GLSetup."Shortcut Dimension 8 Code":
                   BEGIN
                     GLSetup."Shortcut Dimension 8 Code" := '';
                     GLSetup.MODIFY;
                   END;
               END;
             END;

    CaptionML=[ENU=Dimension;
               ESM=Dimensi¢n;
               FRC=Dimension;
               ENC=Dimension];
    LookupPageID=Page548;
    DrillDownPageID=Page548;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;OnValidate=VAR
                                                                GLAcc@1000 : Record 15;
                                                                BusUnit@1001 : Record 220;
                                                                Item@1002 : Record 27;
                                                                Location@1003 : Record 14;
                                                              BEGIN
                                                                IF (UPPERCASE(Code) = UPPERCASE(GLAcc.TABLECAPTION)) OR
                                                                   (UPPERCASE(Code) = UPPERCASE(BusUnit.TABLECAPTION)) OR
                                                                   (UPPERCASE(Code) = UPPERCASE(Item.TABLECAPTION)) OR
                                                                   (UPPERCASE(Code) = UPPERCASE(Location.TABLECAPTION)) OR
                                                                   (UPPERCASE(Code) = UPPERCASE(Text006))
                                                                THEN
                                                                  ERROR(Text007,FIELDCAPTION(Code),GLAcc.TABLECAPTION,BusUnit.TABLECAPTION,Item.TABLECAPTION,Location.TABLECAPTION);

                                                                UpdateText(Code,'',Name);
                                                                UpdateText(Code,Text008,"Code Caption");
                                                                UpdateText(Code,Text009,"Filter Caption");
                                                              END;

                                                   CaptionML=[ENU=Code;
                                                              ESM=C¢digo;
                                                              FRC=Code;
                                                              ENC=Code];
                                                   NotBlank=Yes }
    { 2   ;   ;Name                ;Text30        ;CaptionML=[ENU=Name;
                                                              ESM=Nombre;
                                                              FRC=Nom;
                                                              ENC=Name] }
    { 3   ;   ;Code Caption        ;Text80        ;CaptionML=[ENU=Code Caption;
                                                              ESM=T¡tulo c¢digo;
                                                              FRC=Libell‚ code;
                                                              ENC=Code Caption] }
    { 4   ;   ;Filter Caption      ;Text80        ;CaptionML=[ENU=Filter Caption;
                                                              ESM=T¡tulo filtro;
                                                              FRC=Libell‚ filtre;
                                                              ENC=Filter Caption] }
    { 5   ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ESM=Descripci¢n;
                                                              FRC=Description;
                                                              ENC=Description] }
    { 6   ;   ;Blocked             ;Boolean       ;CaptionML=[ENU=Blocked;
                                                              ESM=Bloqueado;
                                                              FRC=Bloqu‚;
                                                              ENC=Blocked] }
    { 7   ;   ;Consolidation Code  ;Code20        ;AccessByPermission=TableData 220=R;
                                                   CaptionML=[ENU=Consolidation Code;
                                                              ESM=C¢d. consolidaci¢n;
                                                              FRC=Code consolidation;
                                                              ENC=Consolidation Code] }
    { 8   ;   ;Map-to IC Dimension Code;Code20    ;TableRelation="IC Dimension";
                                                   OnValidate=VAR
                                                                DimensionValue@1000 : Record 349;
                                                              BEGIN
                                                                IF "Map-to IC Dimension Code" <> xRec."Map-to IC Dimension Code" THEN BEGIN
                                                                  DimensionValue.SETRANGE("Dimension Code",Code);
                                                                  DimensionValue.MODIFYALL("Map-to IC Dimension Code","Map-to IC Dimension Code");
                                                                  DimensionValue.MODIFYALL("Map-to IC Dimension Value Code",'');
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Map-to IC Dimension Code;
                                                              ESM=C¢digo dimensi¢n IC de asig.;
                                                              FRC=Code dimension correspond. IC;
                                                              ENC=Map-to IC Dimension Code] }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;Code,Name,Blocked                        }
    { 2   ;Brick               ;Code,Name                                }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=%1\This dimension is also used in posted or budget entries.\You cannot delete it.;ESM=%1\Esta dimensi¢n se usa tambi‚n al registrar ¢ presup. movs.\No puede borrarla.;FRC=%1\Cette dimension est aussi utilis‚e dans des ‚critures budget ou report‚es.\Vous ne pouvez pas la supprimer.;ENC=%1\This dimension is also used in posted or budget entries.\You cannot delete it.';
      Text001@1001 : TextConst 'ENU=%1\You cannot delete it.;ESM=%1\No puede borrarla.;FRC=%1\Vous ne pouvez pas le supprimer.;ENC=%1\You cannot delete it.';
      Text002@1002 : TextConst 'ENU=You cannot delete this dimension value, because it has been used in one or more documents or budget entries.;ESM=No puede eliminar este valor de dimensi¢n, porque se ha usado en uno o varios documentos o mov. de presupuestos.;FRC=Vous ne pouvez pas supprimer la valeur de cette dimension car elle est utilis‚e dans un ou plusieurs documents ou ‚critures budget.;ENC=You cannot delete this dimension value, because it has been used in one or more documents or budget entries.';
      Text006@1006 : TextConst 'ENU=Period;ESM=Periodo;FRC=P‚riode;ENC=Period';
      Text007@1007 : TextConst 'ENU=%1 can not be %2, %3, %4, %5 or Period. These names are used internally by the system.;ESM=%1 no puede ser %2, %3, %4, %5 ni periodo. Son nombres internos del sistema.;FRC=%1 ne peut pas ˆtre %2, %3, %4, %5 ou P‚riode. Ces noms sont utilis‚s en interne par le systŠme.;ENC=%1 can not be %2, %3, %4, %5 or Period. These names are used internally by the system.';
      Text008@1008 : TextConst 'ENU=Code;ESM=C¢digo;FRC=Code;ENC=Code';
      Text009@1009 : TextConst 'ENU=Filter;ESM=Filtro;FRC=Filtre;ENC=Filter';
      Text010@1010 : TextConst 'ENU="This dimension is used in the following setup: ";ESM="Esta dimensi¢n se usa en la siguiente config.: ";FRC="Cette dimension est utilis‚ dans la configuration suivante : ";ENC="This dimension is used in the following setup: "';
      Text011@1011 : TextConst 'ENU="General Ledger Setup, ";ESM="Config. contabilidad, ";FRC="Configuration du grand livre, ";ENC="General Ledger Setup, "';
      Text012@1012 : TextConst 'ENU="G/L Budget Names, ";ESM="Nombres ppto., ";FRC="Noms des budgets GL, ";ENC="G/L Budget Names, "';
      Text013@1013 : TextConst 'ENU="Analysis View Card, ";ESM="Ficha vista an lisis, ";FRC="Fiche vue d''analyse, ";ENC="Analysis View Card, "';
      DimVal@1014 : Record 349;
      DimComb@1015 : Record 350;
      SelectedDim@1016 : Record 369;
      AnalysisSelectedDim@1024 : Record 7159;
      DimTrans@1022 : Record 388;
      UsedAsGlobalDim@1017 : Boolean;
      UsedAsShortcutDim@1018 : Boolean;
      UsedAsBudgetDim@1019 : Boolean;
      UsedAsAnalysisViewDim@1020 : Boolean;
      UsedAsItemBudgetDim@1028 : Boolean;
      UsedAsItemAnalysisViewDim@1027 : Boolean;
      CheckDimErr@1021 : Text[250];
      DefaultDim@1023 : Record 352;
      Text014@1026 : TextConst 'ENU="Item Budget Names, ";ESM="Nombres ppto. pdto., ";FRC="Noms de budget d''articles, ";ENC="Item Budget Names, "';
      Text015@1025 : TextConst 'ENU="Item Analysis View Card, ";ESM="Ficha vista an lisis pdto., ";FRC="Fiche de vue d''analyse d''article, ";ENC="Item Analysis View Card, "';

    LOCAL PROCEDURE UpdateText@1(Code@1000 : Code[20];AddText@1001 : Text[30];VAR Text@1002 : Text[80]);
    BEGIN
      IF Text = '' THEN BEGIN
        Text := LOWERCASE(Code);
        Text[1] := Code[1];
        IF AddText <> '' THEN
          Text := STRSUBSTNO('%1 %2',Text,AddText);
      END;
    END;

    PROCEDURE CheckIfDimUsed@73(DimChecked@1000 : Code[20];DimTypeChecked@1001 : ' ,Global1,Global2,Shortcut3,Shortcut4,Shortcut5,Shortcut6,Shortcut7,Shortcut8,Budget1,Budget2,Budget3,Budget4,Analysis1,Analysis2,Analysis3,Analysis4,ItemBudget1,ItemBudget2,ItemBudget3,ItemAnalysis1,ItemAnalysis2,ItemAnalysis3';BudgetNameChecked@1002 : Code[10];AnalysisViewChecked@1003 : Code[10];AnalysisAreaChecked@1016 : Integer) : Boolean;
    VAR
      GLSetup@1004 : Record 98;
      GLBudgetName@1005 : Record 95;
      AnalysisView@1006 : Record 363;
      ItemBudgetName@1015 : Record 7132;
      ItemAnalysisView@1014 : Record 7152;
      CheckAllDim@1007 : Boolean;
      CheckGlobalDim@1008 : Boolean;
      CheckShortcutDim@1009 : Boolean;
      CheckBudgetDim@1010 : Boolean;
      CheckAnalysisViewDim@1011 : Boolean;
      CheckItemBudgetDim@1013 : Boolean;
      CheckItemAnalysisViewDim@1012 : Boolean;
    BEGIN
      IF DimChecked = '' THEN
        EXIT;

      CheckAllDim := DimTypeChecked IN [DimTypeChecked::" "];
      CheckGlobalDim := DimTypeChecked IN [DimTypeChecked::Global1,DimTypeChecked::Global2];
      CheckShortcutDim := DimTypeChecked IN [DimTypeChecked::Shortcut3,DimTypeChecked::Shortcut4,DimTypeChecked::Shortcut5,
                                             DimTypeChecked::Shortcut6,DimTypeChecked::Shortcut7,DimTypeChecked::Shortcut8];
      CheckBudgetDim := DimTypeChecked IN [DimTypeChecked::Budget1,DimTypeChecked::Budget2,DimTypeChecked::Budget3,
                                           DimTypeChecked::Budget4];
      CheckAnalysisViewDim := DimTypeChecked IN [DimTypeChecked::Analysis1,DimTypeChecked::Analysis2,DimTypeChecked::Analysis3,
                                                 DimTypeChecked::Analysis4];
      CheckItemBudgetDim :=
        DimTypeChecked IN [DimTypeChecked::ItemBudget1,DimTypeChecked::ItemBudget2,DimTypeChecked::ItemBudget3];
      CheckItemAnalysisViewDim :=
        DimTypeChecked IN [DimTypeChecked::ItemAnalysis1,DimTypeChecked::ItemAnalysis2,DimTypeChecked::ItemAnalysis3];

      UsedAsGlobalDim := FALSE;
      UsedAsShortcutDim := FALSE;
      UsedAsBudgetDim := FALSE;
      UsedAsAnalysisViewDim := FALSE;
      UsedAsItemBudgetDim := FALSE;
      UsedAsItemAnalysisViewDim := FALSE;

      IF CheckAllDim OR CheckGlobalDim OR CheckShortcutDim OR CheckBudgetDim OR CheckItemBudgetDim THEN BEGIN
        GLSetup.GET;
        IF (DimTypeChecked <> DimTypeChecked::Global1) AND
           (DimChecked = GLSetup."Global Dimension 1 Code")
        THEN
          UsedAsGlobalDim := TRUE;
        IF (DimTypeChecked <> DimTypeChecked::Global2) AND
           (DimChecked = GLSetup."Global Dimension 2 Code")
        THEN
          UsedAsGlobalDim := TRUE;
      END;

      IF CheckGlobalDim OR CheckShortcutDim THEN BEGIN
        IF (DimTypeChecked <> DimTypeChecked::Shortcut3) AND
           (DimChecked = GLSetup."Shortcut Dimension 3 Code")
        THEN
          UsedAsShortcutDim := TRUE;
        IF (DimTypeChecked <> DimTypeChecked::Shortcut4) AND
           (DimChecked = GLSetup."Shortcut Dimension 4 Code")
        THEN
          UsedAsShortcutDim := TRUE;
        IF (DimTypeChecked <> DimTypeChecked::Shortcut5) AND
           (DimChecked = GLSetup."Shortcut Dimension 5 Code")
        THEN
          UsedAsShortcutDim := TRUE;
        IF (DimTypeChecked <> DimTypeChecked::Shortcut6) AND
           (DimChecked = GLSetup."Shortcut Dimension 6 Code")
        THEN
          UsedAsShortcutDim := TRUE;
        IF (DimTypeChecked <> DimTypeChecked::Shortcut7) AND
           (DimChecked = GLSetup."Shortcut Dimension 7 Code")
        THEN
          UsedAsShortcutDim := TRUE;
        IF (DimTypeChecked <> DimTypeChecked::Shortcut8) AND
           (DimChecked = GLSetup."Shortcut Dimension 8 Code")
        THEN
          UsedAsShortcutDim := TRUE;
      END;

      IF CheckAllDim OR CheckGlobalDim OR CheckBudgetDim THEN BEGIN
        IF BudgetNameChecked <> '' THEN
          GLBudgetName.SETRANGE(Name,BudgetNameChecked);
        IF GLBudgetName.FINDSET THEN
          REPEAT
            IF (DimTypeChecked <> DimTypeChecked::Budget1) AND
               (DimChecked = GLBudgetName."Budget Dimension 1 Code")
            THEN
              UsedAsBudgetDim := TRUE;
            IF (DimTypeChecked <> DimTypeChecked::Budget2) AND
               (DimChecked = GLBudgetName."Budget Dimension 2 Code")
            THEN
              UsedAsBudgetDim := TRUE;
            IF (DimTypeChecked <> DimTypeChecked::Budget3) AND
               (DimChecked = GLBudgetName."Budget Dimension 3 Code")
            THEN
              UsedAsBudgetDim := TRUE;
            IF (DimTypeChecked <> DimTypeChecked::Budget4) AND
               (DimChecked = GLBudgetName."Budget Dimension 4 Code")
            THEN
              UsedAsBudgetDim := TRUE;
          UNTIL GLBudgetName.NEXT = 0;
      END;

      IF CheckAllDim OR CheckGlobalDim OR CheckItemBudgetDim THEN BEGIN
        IF BudgetNameChecked <> '' THEN BEGIN
          ItemBudgetName.SETRANGE("Analysis Area",AnalysisAreaChecked);
          ItemBudgetName.SETRANGE(Name,BudgetNameChecked);
        END;
        IF ItemBudgetName.FINDSET THEN
          REPEAT
            IF (DimTypeChecked <> DimTypeChecked::ItemBudget1) AND
               (DimChecked = ItemBudgetName."Budget Dimension 1 Code")
            THEN
              UsedAsItemBudgetDim := TRUE;
            IF (DimTypeChecked <> DimTypeChecked::ItemBudget2) AND
               (DimChecked = ItemBudgetName."Budget Dimension 2 Code")
            THEN
              UsedAsItemBudgetDim := TRUE;
            IF (DimTypeChecked <> DimTypeChecked::ItemBudget3) AND
               (DimChecked = ItemBudgetName."Budget Dimension 3 Code")
            THEN
              UsedAsItemBudgetDim := TRUE;
          UNTIL ItemBudgetName.NEXT = 0;
      END;

      IF CheckAllDim OR CheckAnalysisViewDim THEN BEGIN
        IF AnalysisViewChecked <> '' THEN
          AnalysisView.SETRANGE(Code,AnalysisViewChecked);
        IF AnalysisView.FINDSET THEN
          REPEAT
            IF (DimTypeChecked <> DimTypeChecked::Analysis1) AND
               (DimChecked = AnalysisView."Dimension 1 Code")
            THEN
              UsedAsAnalysisViewDim := TRUE;
            IF (DimTypeChecked <> DimTypeChecked::Analysis2) AND
               (DimChecked = AnalysisView."Dimension 2 Code")
            THEN
              UsedAsAnalysisViewDim := TRUE;
            IF (DimTypeChecked <> DimTypeChecked::Analysis3) AND
               (DimChecked = AnalysisView."Dimension 3 Code")
            THEN
              UsedAsAnalysisViewDim := TRUE;
            IF (DimTypeChecked <> DimTypeChecked::Analysis4) AND
               (DimChecked = AnalysisView."Dimension 4 Code")
            THEN
              UsedAsAnalysisViewDim := TRUE;
          UNTIL AnalysisView.NEXT = 0;
      END;

      IF CheckAllDim OR CheckItemAnalysisViewDim THEN BEGIN
        IF AnalysisViewChecked <> '' THEN BEGIN
          ItemAnalysisView.SETRANGE("Analysis Area",AnalysisAreaChecked);
          ItemAnalysisView.SETRANGE(Code,AnalysisViewChecked);
        END;
        IF ItemAnalysisView.FINDSET THEN
          REPEAT
            IF (DimTypeChecked <> DimTypeChecked::ItemAnalysis1) AND
               (DimChecked = ItemAnalysisView."Dimension 1 Code")
            THEN
              UsedAsItemAnalysisViewDim := TRUE;
            IF (DimTypeChecked <> DimTypeChecked::ItemAnalysis2) AND
               (DimChecked = ItemAnalysisView."Dimension 2 Code")
            THEN
              UsedAsItemAnalysisViewDim := TRUE;
            IF (DimTypeChecked <> DimTypeChecked::ItemAnalysis3) AND
               (DimChecked = ItemAnalysisView."Dimension 3 Code")
            THEN
              UsedAsItemAnalysisViewDim := TRUE;
          UNTIL ItemAnalysisView.NEXT = 0;
      END;

      IF UsedAsGlobalDim OR
         UsedAsShortcutDim OR
         UsedAsBudgetDim OR
         UsedAsAnalysisViewDim OR
         UsedAsItemBudgetDim OR
         UsedAsItemAnalysisViewDim
      THEN BEGIN
        MakeCheckDimErr;
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE MakeCheckDimErr@6();
    BEGIN
      CheckDimErr := Text010;
      IF UsedAsGlobalDim OR UsedAsShortcutDim THEN
        CheckDimErr := CheckDimErr + Text011;
      IF UsedAsBudgetDim THEN
        CheckDimErr := CheckDimErr + Text012;
      IF UsedAsAnalysisViewDim THEN
        CheckDimErr := CheckDimErr + Text013;
      IF UsedAsItemBudgetDim THEN
        CheckDimErr := CheckDimErr + Text014;
      IF UsedAsItemAnalysisViewDim THEN
        CheckDimErr := CheckDimErr + Text015;
      CheckDimErr := COPYSTR(CheckDimErr,1,STRLEN(CheckDimErr) - 2) + '.';
    END;

    PROCEDURE GetCheckDimErr@13() : Text[250];
    BEGIN
      EXIT(CheckDimErr);
    END;

    LOCAL PROCEDURE SelectMLFields@15(LanguageID@1000 : Integer);
    BEGIN
      Name := GetMLName(LanguageID);
      "Code Caption" := GetMLCodeCaption(LanguageID);
      "Filter Caption" := GetMLFilterCaption(LanguageID);
      Description := GetMLDescription(LanguageID);
    END;

    PROCEDURE GetMLName@3(LanguageID@1001 : Integer) : Text[30];
    BEGIN
      GetDimTrans(LanguageID);
      EXIT(DimTrans.Name);
    END;

    PROCEDURE GetMLCodeCaption@4(LanguageID@1000 : Integer) : Text[30];
    BEGIN
      GetDimTrans(LanguageID);
      EXIT(DimTrans."Code Caption");
    END;

    PROCEDURE GetMLFilterCaption@5(LanguageID@1000 : Integer) : Text[30];
    BEGIN
      GetDimTrans(LanguageID);
      EXIT(DimTrans."Filter Caption");
    END;

    LOCAL PROCEDURE GetMLDescription@7(LanguageID@1000 : Integer) : Text[50];
    BEGIN
      GetDimTrans(LanguageID);
      DimTrans.CALCFIELDS("Language Name");
      EXIT(DimTrans."Language Name");
    END;

    PROCEDURE SetMLName@11(NewMLName@1000 : Text[30];LanguageID@1001 : Integer);
    BEGIN
      IF IsApplicationLanguage(LanguageID) THEN BEGIN
        IF Name <> NewMLName THEN BEGIN
          Name := NewMLName;
          MODIFY;
        END;
      END ELSE BEGIN
        InsertDimTrans(LanguageID);
        IF DimTrans.Name <> NewMLName THEN BEGIN
          DimTrans.Name := NewMLName;
          DimTrans.MODIFY;
        END;
      END;
    END;

    PROCEDURE SetMLCodeCaption@10(NewMLCodeCaption@1000 : Text[30];LanguageID@1001 : Integer);
    BEGIN
      IF IsApplicationLanguage(LanguageID) THEN BEGIN
        IF "Code Caption" <> NewMLCodeCaption THEN BEGIN
          "Code Caption" := NewMLCodeCaption;
          MODIFY;
        END;
      END ELSE BEGIN
        InsertDimTrans(LanguageID);
        IF DimTrans."Code Caption" <> NewMLCodeCaption THEN BEGIN
          DimTrans."Code Caption" := NewMLCodeCaption;
          DimTrans.MODIFY;
        END;
      END;
    END;

    PROCEDURE SetMLFilterCaption@9(NewMLFilterCaption@1000 : Text[30];LanguageID@1001 : Integer);
    BEGIN
      IF IsApplicationLanguage(LanguageID) THEN BEGIN
        IF "Filter Caption" <> NewMLFilterCaption THEN BEGIN
          "Filter Caption" := NewMLFilterCaption;
          MODIFY;
        END;
      END ELSE BEGIN
        InsertDimTrans(LanguageID);
        IF DimTrans."Filter Caption" <> NewMLFilterCaption THEN BEGIN
          DimTrans."Filter Caption" := NewMLFilterCaption;
          DimTrans.MODIFY;
        END;
      END;
    END;

    PROCEDURE SetMLDescription@8(NewMLDescription@1000 : Text[50];LanguageID@1001 : Integer);
    BEGIN
      IF IsApplicationLanguage(LanguageID) THEN BEGIN
        IF Description <> NewMLDescription THEN BEGIN
          Description := NewMLDescription;
          MODIFY;
        END;
      END ELSE
        InsertDimTrans(LanguageID);
    END;

    LOCAL PROCEDURE GetDimTrans@19(LanguageID@1001 : Integer);
    BEGIN
      IF (DimTrans.Code <> Code) OR (DimTrans."Language ID" <> LanguageID) THEN
        IF NOT DimTrans.GET(Code,LanguageID) THEN BEGIN
          DimTrans.INIT;
          DimTrans.Code := Code;
          DimTrans."Language ID" := LanguageID;
          DimTrans.Name := Name;
          DimTrans."Code Caption" := "Code Caption";
          DimTrans."Filter Caption" := "Filter Caption";
        END;
    END;

    LOCAL PROCEDURE InsertDimTrans@2(LanguageID@1000 : Integer);
    BEGIN
      IF NOT DimTrans.GET(Code,LanguageID) THEN BEGIN
        DimTrans.INIT;
        DimTrans.Code := Code;
        DimTrans."Language ID" := LanguageID;
        DimTrans.INSERT;
      END;
    END;

    LOCAL PROCEDURE IsApplicationLanguage@14(LanguageID@1000 : Integer) : Boolean;
    VAR
      ApplicationManagement@1003 : Codeunit 1;
    BEGIN
      EXIT(LanguageID = ApplicationManagement.ApplicationLanguage);
    END;

    BEGIN
    END.
  }
}

