OBJECT Table 1234 CSV Buffer
{
  OBJECT-PROPERTIES
  {
    Date=10/23/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.43402;
  }
  PROPERTIES
  {
    CaptionML=[ENU=CSV Buffer;
               ESM=B£fer CSV;
               FRC=Tampon CSV;
               ENC=CSV Buffer];
  }
  FIELDS
  {
    { 1   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ESM=N.§ de l¡nea;
                                                              FRC=Nø ligne;
                                                              ENC=Line No.] }
    { 2   ;   ;Field No.           ;Integer       ;CaptionML=[ENU=Field No.;
                                                              ESM=N.§ de campo;
                                                              FRC=Nø champ;
                                                              ENC=Field No.] }
    { 3   ;   ;Value               ;Text250       ;CaptionML=[ENU=Value;
                                                              ESM=Valor;
                                                              FRC=Valeur;
                                                              ENC=Value] }
  }
  KEYS
  {
    {    ;Line No.,Field No.                      ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      IndexDoesNotExistErr@1000 : TextConst '@@@="%1 = line no, %2 = index of the field";ENU=The field in line %1 with index %2 does not exist. The data could not be retrieved.;ESM=El campo de la l¡nea %1 con el ¡ndice %2 no existe. No se pueden recuperar los datos.;FRC=Le champ dans la ligne %1 avec l''index %2 n''existe pas. Les donn‚es n''ont pas pu ˆtre r‚cup‚r‚es.;ENC=The field in line %1 with index %2 does not exist. The data could not be retrieved.';
      LengthExceededErr@1001 : TextConst 'ENU=The maximum length of a value in the CSV file was exceeded. The maximum supported length is 250.;ESM=Se super¢ la longitud m xima de un valor en el archivo CSV. La longitud m xima permitida es 250.;FRC=La longueur maximale d''une valeur dans le fichier CSV a ‚t‚ d‚pass‚e. La longueur maximale prise en charge est 250.;ENC=The maximum length of a value in the CSV file was exceeded. The maximum supported length is 250.';
      CSVFile@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.File";
      StreamReader@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StreamReader";
      Separator@1004 : Text[1];

    PROCEDURE LoadData@1(CSVFileName@1000 : Text;CSVFieldSeparator@1001 : Text[1]);
    BEGIN
      InitializeReader(CSVFileName,CSVFieldSeparator);
      ReadLines(0);
    END;

    PROCEDURE InitializeReader@2(CSVFileName@1000 : Text;CSVFieldSeparator@1001 : Text[1]);
    VAR
      Encoding@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
    BEGIN
      StreamReader := StreamReader.StreamReader(CSVFile.OpenRead(CSVFileName),Encoding.Default);
      Separator := CSVFieldSeparator;
    END;

    PROCEDURE ReadLines@3(NumberOfLines@1000 : Integer) : Boolean;
    VAR
      Line@1001 : Text;
      CurrentLineNo@1002 : Integer;
      CurrentFieldNo@1003 : Integer;
    BEGIN
      IF StreamReader.EndOfStream THEN
        EXIT(FALSE);
      REPEAT
        Line := StreamReader.ReadLine;
        CurrentLineNo += 1;
        REPEAT
          CurrentFieldNo += 1;
          INIT;
          "Line No." := CurrentLineNo;
          "Field No." := CurrentFieldNo;
          Value := CutUntilSeparator(Line,Separator);
          INSERT;
        UNTIL Line = '';
        CurrentFieldNo := 0;
      UNTIL StreamReader.EndOfStream OR (CurrentLineNo = NumberOfLines);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CutUntilSeparator@4(VAR Text@1000 : Text;Separator@1001 : Text[1]) CutValue : Text[250];
    VAR
      Position@1002 : Integer;
    BEGIN
      Position := STRPOS(Text,Separator);
      IF Position > 0 THEN BEGIN
        CutValue := COPYSTR(Text,1,Position - 1);
        IF STRLEN(CutValue) > 250 THEN
          ERROR(LengthExceededErr);
        Text := COPYSTR(Text,Position + 1);
      END ELSE BEGIN
        IF STRLEN(Text) > 250 THEN
          ERROR(LengthExceededErr);
        CutValue := COPYSTR(Text,1,250);
        Text := '';
      END;
    END;

    PROCEDURE ResetFilters@5();
    BEGIN
      SETRANGE("Line No.");
      SETRANGE("Field No.");
      SETRANGE(Value);
    END;

    PROCEDURE GetValue@6(LineNo@1000 : Integer;FieldNo@1001 : Integer) : Text;
    VAR
      TempCSVBuffer@1002 : TEMPORARY Record 1234;
    BEGIN
      TempCSVBuffer.COPY(Rec,TRUE);
      IF NOT TempCSVBuffer.GET(LineNo,FieldNo) THEN
        ERROR(IndexDoesNotExistErr,LineNo,FieldNo);
      EXIT(TempCSVBuffer.Value);
    END;

    PROCEDURE GetCSVLinesWhere@7(FilterFieldNo@1000 : Integer;FilterValue@1001 : Text;VAR TempResultCSVBuffer@1002 : TEMPORARY Record 1234);
    VAR
      TempCSVBuffer@1004 : TEMPORARY Record 1234;
    BEGIN
      TempResultCSVBuffer.RESET;
      TempResultCSVBuffer.DELETEALL;
      TempCSVBuffer.COPY(Rec,TRUE);
      SETRANGE("Field No.",FilterFieldNo);
      SETRANGE(Value,FilterValue);
      IF FINDSET THEN
        REPEAT
          TempCSVBuffer.SETRANGE("Line No.","Line No.");
          TempCSVBuffer.FINDSET;
          REPEAT
            TempResultCSVBuffer := TempCSVBuffer;
            TempResultCSVBuffer.INSERT;
          UNTIL TempCSVBuffer.NEXT = 0;
        UNTIL NEXT = 0;
      TempResultCSVBuffer.SETRANGE("Field No.",1);
    END;

    PROCEDURE GetValueOfLineAt@8(FieldNo@1000 : Integer) : Text;
    VAR
      TempCSVBuffer@1001 : TEMPORARY Record 1234;
    BEGIN
      TempCSVBuffer.COPY(Rec,TRUE);
      IF NOT TempCSVBuffer.GET("Line No.",FieldNo) THEN
        ERROR(IndexDoesNotExistErr,"Line No.",FieldNo);
      EXIT(TempCSVBuffer.Value);
    END;

    BEGIN
    END.
  }
}

