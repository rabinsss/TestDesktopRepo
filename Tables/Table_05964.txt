OBJECT Table 5964 Service Contract Line
{
  OBJECT-PROPERTIES
  {
    Date=10/23/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.43402;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               TESTFIELD(Description);
               GetServContractHeader;
               ServContractHeader.TESTFIELD("Customer No.");
               ServContractHeader.TESTFIELD("Contract No.");
               ServContractHeader.TESTFIELD("Starting Date");
               IF "Service Item No." <> '' THEN BEGIN
                 ServContractHeader.TESTFIELD("Service Period");
                 ServContractHeader.TESTFIELD("First Service Date");
               END;

               ServMgtSetup.GET;

               UpdateContractAnnualAmount(FALSE);

               IF ("Service Item No." = '') AND ("Response Time (Hours)" = 0) THEN
                 "Response Time (Hours)" := ServContractHeader."Response Time (Hours)";

               IF "Contract Type" = "Contract Type"::Contract THEN BEGIN
                 IF "Service Item No." <> '' THEN BEGIN
                   IF ServMgtSetup."Register Contract Changes" THEN
                     ContractChangeLog.LogContractChange(
                       "Contract No.",1,FIELDCAPTION("Service Item No."),1,'',
                       FORMAT("Service Item No."),"Service Item No.","Line No.");
                   ServLogMgt.ServItemAddToContract(Rec);
                 END ELSE
                   IF ServMgtSetup."Register Contract Changes" THEN
                     ContractChangeLog.LogContractChange(
                       "Contract No.",1,FIELDCAPTION(Description),1,'',Description,'',"Line No.");
               END;
             END;

    OnModify=BEGIN
               IF UseServContractLineAsxRec THEN BEGIN
                 xRec := ServContractLine;
                 UseServContractLineAsxRec := FALSE;
               END;

               IF ("Service Item No." = '') AND
                  ("Item No." = '') AND
                  (Description = '')
               THEN
                 ERROR(Text016,FIELDCAPTION(Description));

               ServMgtSetup.GET;
               IF ServMgtSetup."Register Contract Changes" THEN
                 IF "Contract Type" = "Contract Type"::Contract THEN
                   LogContractLineChanges(xRec);

               IF "Line Amount" <> xRec."Line Amount" THEN
                 UpdateContractAnnualAmount(FALSE);

               IF "Service Item No." <> xRec."Service Item No." THEN BEGIN
                 ServLogMgt.ServItemAddToContract(Rec);
                 ServLogMgt.ServItemRemovedFromContract(xRec);
               END;
             END;

    OnDelete=BEGIN
               TestStatusOpen;
               IF "Contract Type" = "Contract Type"::Contract THEN BEGIN
                 GetServContractHeader;
                 IF ServContractHeader.Status = ServContractHeader.Status::Canceled THEN
                   ERROR(Text015,ServContractHeader.Status);
                 IF (ServContractHeader.Status = ServContractHeader.Status::Signed) AND
                    (NOT "New Line") AND
                    ServContractHeader."Automatic Credit Memos"
                 THEN BEGIN
                   TESTFIELD("Contract Expiration Date");
                   CODEUNIT.RUN(CODEUNIT::CreateCreditfromContractLines,Rec);
                 END;

                 IF (ServContractHeader.Status = ServContractHeader.Status::Signed) AND
                    (NOT "New Line") AND
                    (NOT ServContractHeader."Automatic Credit Memos")
                 THEN
                   IF CreditMemoBaseExists AND
                      (NOT StatusCheckSuspended)
                   THEN
                     IF NOT CONFIRM(Text022,FALSE) THEN
                       ERROR(Text023);
                 ServMgtSetup.GET;
                 IF "Service Item No." <> '' THEN BEGIN
                   IF ServMgtSetup."Register Contract Changes" THEN
                     ContractChangeLog.LogContractChange(
                       "Contract No.",1,FIELDCAPTION("Service Item No."),2,
                       FORMAT("Service Item No."),'',"Service Item No.","Line No.");
                   ServLogMgt.ServItemRemovedFromContract(Rec);
                 END ELSE
                   IF ServMgtSetup."Register Contract Changes" THEN
                     ContractChangeLog.LogContractChange(
                       "Contract No.",1,FIELDCAPTION(Description),2,Description,'','',"Line No.");

                 GetServContractHeader;
                 IF (NOT ServContractHeader."Allow Unbalanced Amounts") AND
                    (ServContractHeader.Status = ServContractHeader.Status::Signed)
                 THEN
                   ContractGainLossEntry.AddEntry(1,"Contract Type","Contract No.",-"Line Amount",'');
               END;

               ServCommentLine.SETRANGE("Table Name",ServCommentLine."Table Name"::"Service Contract");
               ServCommentLine.SETRANGE("Table Subtype","Contract Type");
               ServCommentLine.SETRANGE("No.","Contract No.");
               ServCommentLine.SETRANGE(Type,ServCommentLine.Type::General);
               ServCommentLine.SETRANGE("Table Line No.","Line No.");
               ServCommentLine.DELETEALL;

               UpdateContractAnnualAmount(TRUE);
             END;

    CaptionML=[ENU=Service Contract Line;
               ESM=L°nea Contrato de Servicio;
               FRC=Ligne contrat service;
               ENC=Service Contract Line];
    PasteIsValid=No;
    LookupPageID=Page6075;
    DrillDownPageID=Page6075;
  }
  FIELDS
  {
    { 1   ;   ;Contract Type       ;Option        ;CaptionML=[ENU=Contract Type;
                                                              ESM=Tipo contrato;
                                                              FRC=Type de contrat;
                                                              ENC=Contract Type];
                                                   OptionCaptionML=[ENU=Quote,Contract;
                                                                    ESM=Cotizaci¢n,Contrato;
                                                                    FRC=Devis,Contrat;
                                                                    ENC=Quote,Contract];
                                                   OptionString=Quote,Contract }
    { 2   ;   ;Contract No.        ;Code20        ;TableRelation="Service Contract Header"."Contract No." WHERE (Contract Type=FIELD(Contract Type));
                                                   CaptionML=[ENU=Contract No.;
                                                              ESM=Nß contrato;
                                                              FRC=N¯ de contrat;
                                                              ENC=Contract No.] }
    { 3   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ESM=Nß l°nea;
                                                              FRC=N¯ ligne;
                                                              ENC=Line No.] }
    { 4   ;   ;Contract Status     ;Option        ;CaptionML=[ENU=Contract Status;
                                                              ESM=Estado contrato;
                                                              FRC=êtat de contrat;
                                                              ENC=Contract Status];
                                                   OptionCaptionML=[ENU=" ,Signed,Canceled";
                                                                    ESM=" ,Firmado,Cancelado";
                                                                    FRC=" ,SignÇ,AnnulÇ";
                                                                    ENC=" ,Signed,Cancelled"];
                                                   OptionString=[ ,Signed,Cancelled] }
    { 5   ;   ;Service Item No.    ;Code20        ;TableRelation="Service Item";
                                                   OnValidate=VAR
                                                                ServiceItemLine@1003 : Record 5901;
                                                                ServContractMgt@1004 : Codeunit 5940;
                                                                LastInvoiceDate@1000 : Date;
                                                                NewLastInvoiceDate@1001 : Date;
                                                                InvoicePeriod@1002 : DateFormula;
                                                              BEGIN
                                                                TestStatusOpen;
                                                                GetServContractHeader;
                                                                IF ServContractHeader."Last Invoice Date" <> 0D THEN BEGIN
                                                                  LastInvoiceDate := ServContractHeader."Last Invoice Date";
                                                                  EVALUATE(InvoicePeriod,ServContractMgt.GetInvoicePeriodText(ServContractHeader."Invoice Period"));
                                                                  NewLastInvoiceDate := CALCDATE(InvoicePeriod,LastInvoiceDate);
                                                                  IF (ServContractHeader."Expiration Date" <> 0D) AND
                                                                     (NewLastInvoiceDate > ServContractHeader."Expiration Date")
                                                                  THEN
                                                                    ERROR(Text025,ServiceItemLine.TABLECAPTION,ServContractHeader.FIELDCAPTION("Expiration Date"));
                                                                END;
                                                                IF (ServContractHeader.Status = ServContractHeader.Status::Signed) AND
                                                                   (NOT "New Line")
                                                                THEN
                                                                  ERROR(Text013,FIELDCAPTION("Service Item No."));

                                                                IF "Service Item No." <> '' THEN BEGIN
                                                                  GetServItem;
                                                                  TESTFIELD("Customer No.");
                                                                  IF ServItem."Customer No." <> ServContractHeader."Customer No." THEN
                                                                    ERROR(Text000,"Customer No.");

                                                                  ServContractLine.RESET;
                                                                  ServContractLine.SETRANGE("Contract No.","Contract No.");
                                                                  ServContractLine.SETRANGE("Contract Type","Contract Type");
                                                                  ServContractLine.SETRANGE("Service Item No.","Service Item No.");
                                                                  ServContractLine.SETFILTER("Line No.",'<>%1',"Line No.");
                                                                  IF ServContractLine.FINDFIRST THEN
                                                                    ERROR(Text003);

                                                                  IF NOT HideDialog THEN BEGIN
                                                                    ServContractLine.RESET;
                                                                    ServContractLine.SETCURRENTKEY("Service Item No.","Contract Status");
                                                                    ServContractLine.SETRANGE("Service Item No.","Service Item No.");
                                                                    ServContractLine.SETFILTER("Contract Status",'<>%1',ServContractLine."Contract Status"::Cancelled);
                                                                    ServContractLine.SETRANGE("Contract Type",ServContractLine."Contract Type"::Contract);
                                                                    ServContractLine.SETFILTER("Contract No.",'<>%1',"Contract No.");
                                                                    IF ServContractLine.FINDFIRST THEN BEGIN
                                                                      IF NOT CONFIRM(Text019,TRUE,"Service Item No.") THEN BEGIN
                                                                        "Service Item No." := xRec."Service Item No.";
                                                                        EXIT
                                                                      END;
                                                                    END ELSE BEGIN
                                                                      ServContractLine.RESET;
                                                                      ServContractLine.SETCURRENTKEY("Service Item No.");
                                                                      ServContractLine.SETRANGE("Service Item No.","Service Item No.");
                                                                      ServContractLine.SETRANGE("Contract Type",ServContractLine."Contract Type"::Quote);
                                                                      ServContractLine.SETFILTER("Contract No.",'<>%1',"Contract No.");
                                                                      IF ServContractLine.FINDFIRST THEN
                                                                        IF NOT CONFIRM(Text019,TRUE,"Service Item No.") THEN BEGIN
                                                                          "Service Item No." := xRec."Service Item No.";
                                                                          EXIT
                                                                        END;
                                                                    END;
                                                                  END;

                                                                  IF (ServItem."Ship-to Code" <> ServContractHeader."Ship-to Code") AND
                                                                     NOT HideDialog
                                                                  THEN
                                                                    IF NOT CONFIRM(
                                                                         Text001,FALSE,"Service Item No.")
                                                                    THEN BEGIN
                                                                      "Service Item No." := xRec."Service Item No.";
                                                                      EXIT;
                                                                    END;
                                                                  "Ship-to Code" := ServItem."Ship-to Code";
                                                                END;
                                                                ServContractLine := Rec;
                                                                INIT;
                                                                "Starting Date" := ServContractLine."Starting Date";
                                                                "Contract Expiration Date" := ServContractLine."Contract Expiration Date";
                                                                "Credit Memo Date" := ServContractLine."Credit Memo Date";
                                                                "Next Planned Service Date" := ServContractLine."Next Planned Service Date";
                                                                "Service Period" := ServContractLine."Service Period";
                                                                "Customer No." := ServContractLine."Customer No.";
                                                                IF ServContractLine."Service Item No." <> '' THEN
                                                                  "Ship-to Code" := ServContractLine."Ship-to Code"
                                                                ELSE
                                                                  "Ship-to Code" := ServContractHeader."Ship-to Code";
                                                                "Contract Status" := ServContractLine."Contract Status";
                                                                "Service Item No." := ServContractLine."Service Item No.";
                                                                IF "Service Item No." = '' THEN
                                                                  EXIT;
                                                                Description := ServItem.Description;
                                                                "Serial No." := ServItem."Serial No.";
                                                                "Service Item Group Code" := ServItem."Service Item Group Code";
                                                                "Item No." := ServItem."Item No.";
                                                                "Variant Code" := ServItem."Variant Code";
                                                                "Unit of Measure Code" := ServItem."Unit of Measure Code";
                                                                IF (ServContractHeader."Response Time (Hours)" < ServItem."Response Time (Hours)") AND
                                                                   (ServContractHeader."Response Time (Hours)" <> 0)
                                                                THEN
                                                                  "Response Time (Hours)" := ServContractHeader."Response Time (Hours)"
                                                                ELSE
                                                                  IF ServItem."Response Time (Hours)" <> 0 THEN
                                                                    "Response Time (Hours)" := ServItem."Response Time (Hours)"
                                                                  ELSE
                                                                    "Response Time (Hours)" := ServContractHeader."Response Time (Hours)";
                                                                ServMgtSetup.GET;
                                                                VALIDATE("Line Cost",ServItem."Default Contract Cost");
                                                                VALIDATE("Line Value",ServItem."Default Contract Value");
                                                                VALIDATE("Line Discount %",ServItem."Default Contract Discount %");

                                                                IF ServContractLine.GET("Contract Type","Contract No.","Line No.") THEN BEGIN
                                                                  UseServContractLineAsxRec := TRUE;
                                                                  MODIFY(TRUE);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Service Item No.;
                                                              ESM=Nß prod. servicio;
                                                              FRC=N¯ article de service;
                                                              ENC=Service Item No.] }
    { 6   ;   ;Description         ;Text50        ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=[ENU=Description;
                                                              ESM=Descripci¢n;
                                                              FRC=Description;
                                                              ENC=Description] }
    { 7   ;   ;Serial No.          ;Code20        ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                TESTFIELD("Item No.");
                                                              END;

                                                   CaptionML=[ENU=Serial No.;
                                                              ESM=Nß serie;
                                                              FRC=N¯ de sÇrie;
                                                              ENC=Serial No.] }
    { 8   ;   ;Service Item Group Code;Code10     ;TableRelation="Service Item Group";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                TESTFIELD("Service Item No.");
                                                              END;

                                                   CaptionML=[ENU=Service Item Group Code;
                                                              ESM=C¢d. grupo prod. servicio;
                                                              FRC=Code groupe articles service;
                                                              ENC=Service Item Group Code] }
    { 9   ;   ;Customer No.        ;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Customer No.;
                                                              ESM=Nß cliente;
                                                              FRC=N¯ client;
                                                              ENC=Customer No.] }
    { 10  ;   ;Ship-to Code        ;Code10        ;TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD(Customer No.));
                                                   CaptionML=[ENU=Ship-to Code;
                                                              ESM=C¢d. direcci¢n env°o cliente;
                                                              FRC=Code de livraison;
                                                              ENC=Ship-to Code];
                                                   Editable=No }
    { 11  ;   ;Item No.            ;Code20        ;TableRelation=Item WHERE (Type=CONST(Inventory));
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Item No." <> xRec."Item No." THEN
                                                                  TESTFIELD("Service Item No.",'');

                                                                IF "Item No." <> '' THEN BEGIN
                                                                  Item.GET("Item No.");
                                                                  Currency.InitRoundingPrecision;
                                                                  Description := Item.Description;
                                                                  "Unit of Measure Code" := Item."Sales Unit of Measure";
                                                                  GetServContractHeader;
                                                                  "Response Time (Hours)" := ServContractHeader."Response Time (Hours)";
                                                                  ServMgtSetup.GET;
                                                                  "Line Cost" :=
                                                                    ROUND(Item."Unit Cost" * ServMgtSetup."Contract Value %" / 100,
                                                                      Currency."Amount Rounding Precision");
                                                                  "Line Discount %" := 0;
                                                                  CASE ServMgtSetup."Contract Value Calc. Method" OF
                                                                    ServMgtSetup."Contract Value Calc. Method"::"Based on Unit Price":
                                                                      "Line Value" :=
                                                                        ROUND(Item."Unit Price" * ServMgtSetup."Contract Value %" / 100,
                                                                          Currency."Amount Rounding Precision");
                                                                    ServMgtSetup."Contract Value Calc. Method"::"Based on Unit Cost":
                                                                      "Line Value" :=
                                                                        ROUND(Item."Unit Cost" * ServMgtSetup."Contract Value %" / 100,
                                                                          Currency."Amount Rounding Precision");
                                                                  END;
                                                                  VALIDATE("Line Value","Line Value");
                                                                END ELSE BEGIN
                                                                  "Unit of Measure Code" := '';
                                                                  "Variant Code" := '';
                                                                  "Serial No." := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Item No.;
                                                              ESM=Nß producto;
                                                              FRC=N¯ d'article;
                                                              ENC=Item No.] }
    { 12  ;   ;Unit of Measure Code;Code10        ;TableRelation=IF (Item No.=FILTER(<>'')) "Item Unit of Measure".Code WHERE (Item No.=FIELD(Item No.))
                                                                 ELSE "Unit of Measure";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Unit of Measure Code" <> xRec."Unit of Measure Code" THEN BEGIN
                                                                  TESTFIELD("Service Item No.",'');
                                                                  TESTFIELD("Item No.");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Unit of Measure Code;
                                                              ESM=C¢d. unidad medida;
                                                              FRC=Code unitÇ de mesure;
                                                              ENC=Unit of Measure Code] }
    { 13  ;   ;Response Time (Hours);Decimal      ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=[ENU=Response Time (Hours);
                                                              ESM=Tiempo respuesta (Horas);
                                                              FRC=Temps de rÇponse (heures);
                                                              ENC=Response Time (Hours)];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   BlankZero=Yes }
    { 14  ;   ;Last Planned Service Date;Date     ;CaptionML=[ENU=Last Planned Service Date;
                                                              ESM=Èlt. fecha serv. planificada;
                                                              FRC=Derniäre date service prÇvue;
                                                              ENC=Last Planned Service Date];
                                                   Editable=No }
    { 15  ;   ;Next Planned Service Date;Date     ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF ("Next Planned Service Date" <> 0D) AND
                                                                   ("Next Planned Service Date" < "Starting Date")
                                                                THEN
                                                                  ERROR(Text009,FIELDCAPTION("Next Planned Service Date"),FIELDCAPTION("Starting Date"));
                                                              END;

                                                   CaptionML=[ENU=Next Planned Service Date;
                                                              ESM=Siguiente fecha serv. planif.;
                                                              FRC=Prochaine date service prÇvue;
                                                              ENC=Next Planned Service Date] }
    { 16  ;   ;Last Service Date   ;Date          ;CaptionML=[ENU=Last Service Date;
                                                              ESM=Èlt. fecha servicio;
                                                              FRC=Derniäre date de service;
                                                              ENC=Last Service Date] }
    { 17  ;   ;Last Preventive Maint. Date;Date   ;CaptionML=[ENU=Last Preventive Maint. Date;
                                                              ESM=Èlt. fecha manten. preventivo;
                                                              FRC=Dern. date entretien prÇventif;
                                                              ENC=Last Preventive Maint. Date];
                                                   Editable=No }
    { 18  ;   ;Invoiced to Date    ;Date          ;CaptionML=[ENU=Invoiced to Date;
                                                              ESM=Facturado hasta fecha;
                                                              FRC=FacturÇ Ö ce jour;
                                                              ENC=Invoiced to Date];
                                                   Editable=No }
    { 19  ;   ;Credit Memo Date    ;Date          ;OnValidate=BEGIN
                                                                TestStatusOpen;

                                                                TESTFIELD(Credited,FALSE);

                                                                IF "Credit Memo Date" <> 0D THEN BEGIN
                                                                  IF "Credit Memo Date" > "Contract Expiration Date" THEN
                                                                    ERROR(
                                                                      Text008,
                                                                      FIELDCAPTION("Credit Memo Date"),FIELDCAPTION("Contract Expiration Date"));
                                                                END;

                                                                IF "Credit Memo Date" <> xRec."Credit Memo Date" THEN
                                                                  IF "Credit Memo Date" = 0D THEN
                                                                    ERROR(Text018,FIELDCAPTION("Credit Memo Date"));
                                                              END;

                                                   CaptionML=[ENU=Credit Memo Date;
                                                              ESM=Fecha nota crÇdito;
                                                              FRC=Date de la note de crÇdit;
                                                              ENC=Credit Memo Date] }
    { 20  ;   ;Contract Expiration Date;Date      ;OnValidate=BEGIN
                                                                TestStatusOpen;

                                                                TESTFIELD(Credited,FALSE);

                                                                ServContractHeader.GET("Contract Type","Contract No.");

                                                                IF (NOT ServContractHeader.Prepaid) AND
                                                                   (xRec."Contract Expiration Date" <= "Invoiced to Date") AND
                                                                   (xRec."Contract Expiration Date" <> 0D)
                                                                THEN
                                                                  IF ("Contract Expiration Date" > "Invoiced to Date") OR
                                                                     ("Contract Expiration Date" = 0D)
                                                                  THEN
                                                                    ERROR(
                                                                      Text024,
                                                                      FIELDCAPTION("Contract Expiration Date"));

                                                                IF "Contract Expiration Date" = 0D THEN BEGIN
                                                                  "Credit Memo Date" := 0D;
                                                                  EXIT;
                                                                END;

                                                                IF "Contract Expiration Date" < "Starting Date" THEN
                                                                  ERROR(
                                                                    Text009,
                                                                    FIELDCAPTION("Contract Expiration Date"),
                                                                    FIELDCAPTION("Starting Date"));

                                                                IF ServContractHeader."Expiration Date" <> 0D THEN
                                                                  IF "Contract Expiration Date" > ServContractHeader."Expiration Date" THEN
                                                                    ERROR(
                                                                      Text017,
                                                                      FIELDCAPTION("Contract Expiration Date"),
                                                                      ServContractHeader.FIELDCAPTION("Expiration Date"));

                                                                IF "Contract Expiration Date" < "Credit Memo Date" THEN
                                                                  ERROR(
                                                                    Text009,
                                                                    FIELDCAPTION("Contract Expiration Date"),
                                                                    FIELDCAPTION("Credit Memo Date"));

                                                                IF "Credit Memo Date" = 0D THEN
                                                                  "Credit Memo Date" := "Contract Expiration Date";

                                                                IF NOT ServContractHeader."Automatic Credit Memos" THEN BEGIN
                                                                  ServLedgEntry.RESET;
                                                                  ServLedgEntry.SETCURRENTKEY(Type,"No.","Entry Type","Moved from Prepaid Acc.","Posting Date",Open);
                                                                  ServLedgEntry.SETRANGE(Type,ServLedgEntry.Type::"Service Contract");
                                                                  ServLedgEntry.SETRANGE("No.","Contract No.");
                                                                  ServLedgEntry.SETRANGE("Moved from Prepaid Acc.",FALSE);
                                                                  ServLedgEntry.SETRANGE(Open,FALSE);
                                                                  ServLedgEntry.CALCSUMS("Amount (LCY)");
                                                                  IF ServLedgEntry."Amount (LCY)" <> 0 THEN
                                                                    MESSAGE(Text011,"Contract No.");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Contract Expiration Date;
                                                              ESM=Fecha fin contrato;
                                                              FRC=Date d'expiration du contrat;
                                                              ENC=Contract Expiration Date] }
    { 21  ;   ;Service Period      ;DateFormula   ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=[ENU=Service Period;
                                                              ESM=Periodo servicio;
                                                              FRC=PÇriode de service;
                                                              ENC=Service Period] }
    { 22  ;   ;Line Value          ;Decimal       ;OnValidate=BEGIN
                                                                IF "Line Value" < 0 THEN
                                                                  FIELDERROR("Line Value");

                                                                VALIDATE("Line Discount %");
                                                              END;

                                                   CaptionML=[ENU=Line Value;
                                                              ESM=Valor l°nea;
                                                              FRC=Valeur de ligne;
                                                              ENC=Line Value];
                                                   BlankZero=Yes;
                                                   AutoFormatType=1 }
    { 23  ;   ;Line Discount %     ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                Currency.InitRoundingPrecision;
                                                                "Line Value" := ROUND("Line Value",Currency."Amount Rounding Precision");
                                                                "Line Amount" :=
                                                                  ROUND("Line Value" - "Line Value" * "Line Discount %" / 100,
                                                                    Currency."Amount Rounding Precision");
                                                                "Line Discount Amount" :=
                                                                  ROUND("Line Value" - "Line Amount",Currency."Amount Rounding Precision");
                                                                Profit := ROUND("Line Amount" - "Line Cost",Currency."Amount Rounding Precision");
                                                              END;

                                                   CaptionML=[ENU=Line Discount %;
                                                              ESM=% Descuento l°nea;
                                                              FRC="Ligne % escompte ";
                                                              ENC=Line Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   BlankZero=Yes }
    { 24  ;   ;Line Amount         ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                TESTFIELD("Line Value");
                                                                Currency.InitRoundingPrecision;
                                                                "Line Discount Amount" := ROUND("Line Value" - "Line Amount",Currency."Amount Rounding Precision");
                                                                "Line Discount %" := "Line Discount Amount" / "Line Value" * 100;
                                                                Profit := ROUND("Line Amount" - "Line Cost",Currency."Amount Rounding Precision");
                                                              END;

                                                   CaptionML=[ENU=Line Amount;
                                                              ESM=Importe l°nea;
                                                              FRC=Montant ligne;
                                                              ENC=Line Amount];
                                                   BlankZero=Yes;
                                                   AutoFormatType=1 }
    { 28  ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=[ENU=Variant Code;
                                                              ESM=C¢d. variante;
                                                              FRC=Code variante;
                                                              ENC=Variant Code] }
    { 29  ;   ;Starting Date       ;Date          ;CaptionML=[ENU=Starting Date;
                                                              ESM=Fecha inicial;
                                                              FRC=Date dÇbut;
                                                              ENC=Starting Date];
                                                   Editable=No }
    { 30  ;   ;New Line            ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=New Line;
                                                              ESM=Nueva l°nea;
                                                              FRC=Nouvelle ligne;
                                                              ENC=New Line];
                                                   Editable=No }
    { 31  ;   ;Credited            ;Boolean       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                TESTFIELD("Contract Expiration Date");
                                                              END;

                                                   CaptionML=[ENU=Credited;
                                                              ESM=Abonado;
                                                              FRC=CrÇditÇ;
                                                              ENC=Credited] }
    { 32  ;   ;Line Cost           ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                Currency.InitRoundingPrecision;
                                                                Profit := ROUND("Line Amount" - "Line Cost",Currency."Amount Rounding Precision");
                                                              END;

                                                   CaptionML=[ENU=Line Cost;
                                                              ESM=Costo l°nea;
                                                              FRC=Ligne Coñt;
                                                              ENC=Line Cost];
                                                   BlankZero=Yes;
                                                   AutoFormatType=1 }
    { 33  ;   ;Line Discount Amount;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                Currency.InitRoundingPrecision;
                                                                IF "Line Value" <> 0 THEN
                                                                  "Line Discount %" := "Line Discount Amount" / "Line Value" * 100
                                                                ELSE
                                                                  "Line Discount %" := 0;
                                                                "Line Amount" :=
                                                                  ROUND("Line Value" - "Line Value" * "Line Discount %" / 100,Currency."Amount Rounding Precision");
                                                                Profit := ROUND("Line Amount" - "Line Cost",Currency."Amount Rounding Precision");
                                                              END;

                                                   CaptionML=[ENU=Line Discount Amount;
                                                              ESM=Importe dto. l°nea;
                                                              FRC=Ligne Montant d'escompte;
                                                              ENC=Line Discount Amount];
                                                   BlankZero=Yes;
                                                   AutoFormatType=1 }
    { 34  ;   ;Profit              ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                Currency.InitRoundingPrecision;
                                                                "Line Amount" := ROUND(Profit + "Line Cost",Currency."Amount Rounding Precision");
                                                                "Line Discount Amount" := ROUND("Line Value" - "Line Amount",Currency."Amount Rounding Precision");
                                                                IF "Line Value" <> 0 THEN
                                                                  "Line Discount %" := "Line Discount Amount" / "Line Value" * 100;
                                                              END;

                                                   CaptionML=[ENU=Profit;
                                                              ESM=Bfß bruto;
                                                              FRC=BÇnÇfice;
                                                              ENC=Profit];
                                                   BlankZero=Yes;
                                                   AutoFormatType=1 }
  }
  KEYS
  {
    {    ;Contract Type,Contract No.,Line No.     ;SumIndexFields=Line Amount,Profit;
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Contract No.,Line No.,Contract Type      }
    {    ;Service Item No.,Contract Status         }
    {    ;Contract Type,Contract No.,Credited,New Line;
                                                   SumIndexFields=Line Amount,Profit;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Customer No.,Ship-to Code                }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Currency@1036 : Record 4;
      Item@1028 : Record 27;
      ServMgtSetup@1004 : Record 5911;
      ServLedgEntry@1023 : Record 5907;
      ServContractHeader@1003 : Record 5965;
      ServContractLine@1019 : Record 5964;
      ServItem@1001 : Record 5940;
      Text000@1011 : TextConst 'ENU=This service item does not belong to customer no. %1.;ESM=Este producto de servicio no pertenece al cliente n.ß %1.;FRC=Cet article de service n''appartient pas au client n¯ %1.;ENC=This service item does not belong to customer no. %1.';
      Text001@1012 : TextConst 'ENU=Service item %1 has a different ship-to code for this customer.\\Do you want to continue?;ESM=El producto de servicio %1 tiene un c¢digo de direcci¢n de env°o diferente para este cliente.\\®Desea continuar?;FRC=L''article de service %1 a un code de livraison diffÇrent pour ce client.\\Souhaitez-vous continuer ?;ENC=Service item %1 has a different ship-to code for this customer.\\Do you want to continue?';
      Text003@1018 : TextConst 'ENU=This service item already exists in this service contract.;ESM=Ya existe este producto de servicio en este contrato de servicio.;FRC=Cet article de service existe dÇjÖ dans ce contrat de service.;ENC=This service item already exists in this service contract.';
      Text008@1005 : TextConst 'ENU=%1 field value cannot be later than the %2 field value on the contract line.;ESM=El valor del campo %1 no puede ser posterior que el del campo %2 en la l°nea de contrato.;FRC=%1 doit àtre antÇrieure Ö %2.;ENC=%1 field value cannot be later than the %2 field value on the contract line.';
      Text009@1009 : TextConst 'ENU=The %1 cannot be less than the %2.;ESM=El %1 no puede ser menor que el %2.;FRC=Le %1 ne peut pas àtre infÇrieur au %2.;ENC=The %1 cannot be less than the %2.';
      Text011@1007 : TextConst 'ENU=Service ledger entry exists for service contract line %1.\\You may need to create a credit memo.;ESM=Existe un movimiento de servicio para la l°nea de contrato %1.\\Es posible que tenga que crear una nota de crÇdito.;FRC=Il existe une Çcriture service pour la ligne contrat service %1.\\Vous pouvez cependant avoir besoin de crÇer un avoir.;ENC=Service ledger entry exists for service contract line %1.\\You may need to create a credit memo.';
      ContractChangeLog@1015 : Record 5967;
      ContractGainLossEntry@1016 : Record 5969;
      ServCommentLine@1027 : Record 5906;
      ServLogMgt@1030 : Codeunit 5906;
      HideDialog@1020 : Boolean;
      StatusCheckSuspended@1021 : Boolean;
      Text013@1022 : TextConst 'ENU=You cannot change the %1 field on signed service contracts.;ESM=No puede cambiar el campo %1 en Contratos de Servicio firmados.;FRC=Vous ne pouvez pas modifier le champ %1 des contrats de service signÇs.;ENC=You cannot change the %1 field on signed service contracts.';
      Text015@1026 : TextConst 'ENU=You cannot delete service contract lines on %1 service contracts.;ESM=No puede eliminar l°ns. Contrato de Servicio en %1 Contratos de Servicio.;FRC=Vous ne pouvez pas supprimer les lignes contrat de service des contrats de service ayant l''Çtat %1.;ENC=You cannot delete service contract lines on %1 service contracts.';
      Text016@1010 : TextConst 'ENU=Service contract lines must have at least a %1 filled in.;ESM=Las l°ns. Contrato de Servicio deben tener al menos un %1 rellenado.;FRC=Les lignes de contrat de service doivent indiquer au moins une %1.;ENC=Service contract lines must have at least a %1 filled in.';
      Text017@1029 : TextConst 'ENU=The %1 cannot be later than the %2.;ESM=El %1 no puede ser posterior que el %2.;FRC=%1 doit àtre antÇrieure Ö %2.;ENC=The %1 cannot be later than the %2.';
      Text018@1032 : TextConst 'ENU=You cannot reset %1 manually.;ESM=No puede especificar %1 manualmente.;FRC=Vous ne pouvez pas supprimer %1 manuellement.;ENC=You cannot reset %1 manually.';
      Text019@1006 : TextConst 'ENU=Service item %1 already belongs to one or more service contracts/quotes.\\Do you want to continue?;ESM=El producto de servicio %1 ya pertenece a una o m†s cotizaciones o contratos.\\®Desea continuar?;FRC=L''article de service %1 appartient dÇjÖ Ö un ou plusieurs contrats/devis service.\\Souhaitez-vous continuer ?;ENC=Service item %1 already belongs to one or more service contracts/quotes.\\Do you want to continue?';
      Text020@1014 : TextConst 'ENU=The service period for service item %1 under contract %2 has not yet started.;ESM=El periodo servicio para el prod. servicio %1 bajo el contrato %2 todav°a no ha comenzado.;FRC=La pÇriode de service de l''article de service %1 du contrat %2 n''est pas encore commencÇe.;ENC=The service period for service item %1 under contract %2 has not yet started.';
      Text021@1008 : TextConst 'ENU=The service period for service item %1 under contract %2 has expired.;ESM=El periodo servicio para prod. servicio %1 bajo el contrato %2 ha vencido.;FRC=La pÇriode de service de l''article de service %1 du contrat %2 est expirÇe.;ENC=The service period for service item %1 under contract %2 has expired.';
      Text022@1033 : TextConst 'ENU=If you delete this contract line while the Automatic Credit Memos check box is not selected, a credit memo will not be created.\Do you want to continue?;ESM=Si elimina esta l°nea contrato y no est† seleccionada la casilla de verificaci¢n de Notas de CrÇdito autom†ticas, no se crear† una nota de crÇdito.\®Dese continuar?;FRC=Si vous supprimez cette ligne de contrat alors que la case Notes de crÇdits automatiques n''est pas cochÇe, une note de crÇdit ne sera pas crÇÇe.\Voulez-vous continuer?;ENC=If you delete this contract line while the Automatic Credit Memos check box is not selected, a credit memo will not be created.\Do you want to continue?';
      Text023@1034 : TextConst 'ENU=The update has been interrupted to respect the warning.;ESM=Se ha interrumpido la actualizaci¢n para respetar la advertencia.;FRC=La mise Ö jour a ÇtÇ interrompue pour respecter l''avertissement.;ENC=The update has been interrupted to respect the warning.';
      UseServContractLineAsxRec@1031 : Boolean;
      Text024@1035 : TextConst 'ENU=You cannot enter a later date in or clear the %1 field on the contract line that has been invoiced for the period containing that date.;ESM=No puede introducir una fecha posterior a la existente ni borrar la fecha en el campo %1 de una l°nea de contrato facturada para el periodo al que corresponde la fecha.;FRC=Vous ne pouvez pas entrer une date ultÇrieure dans le champ %1, ni vider ce champ, sur la ligne de contrat qui a ÇtÇ facturÇe pour la pÇriode contenant cette date.;ENC=You cannot enter a later date in or clear the %1 field on the contract line that has been invoiced for the period containing that date.';
      Text025@1024 : TextConst '@@@=You cannot add a new Service Item Line because the service contract has expired. Renew the Expiration Date on the service contract.;ENU=You cannot add a new %1 because the service contract has expired. Renew the %2 on the service contract.;ESM=No puede agregar un %1 nuevo porque el contrato de servicio ha vencido. Renueve la %2 del contrato de servicio.;FRC=Vous ne pouvez pas ajouter un nouveau %1 car le contrat de service a expirÇ. Renouvelez le %2 sur le contrat de service.;ENC=You cannot add a new %1 because the service contract has expired. Renew the %2 on the service contract.';

    PROCEDURE SetupNewLine@1();
    BEGIN
      IF NOT ServContractHeader.GET("Contract Type","Contract No.") THEN
        EXIT;
      "Customer No." := ServContractHeader."Customer No.";
      "Ship-to Code" := ServContractHeader."Ship-to Code";
      "Contract Status" := ServContractHeader.Status;
      "Contract Expiration Date" := ServContractHeader."Expiration Date";
      "Credit Memo Date" := "Contract Expiration Date";
      "Service Period" := ServContractHeader."Service Period";
      IF ("Contract Type" = "Contract Type"::Contract) AND
         ("Contract Status" = "Contract Status"::Signed)
      THEN
        "Starting Date" := WORKDATE
      ELSE
        "Starting Date" := ServContractHeader."Starting Date";

      IF "Starting Date" > ServContractHeader."First Service Date" THEN
        "Next Planned Service Date" := "Starting Date"
      ELSE
        "Next Planned Service Date" := ServContractHeader."First Service Date";
    END;

    LOCAL PROCEDURE GetServItem@9();
    BEGIN
      TESTFIELD("Service Item No.");
      IF "Service Item No." <> ServItem."No." THEN
        ServItem.GET("Service Item No.");
    END;

    PROCEDURE CalculateNextServiceVisit@5();
    BEGIN
      ServMgtSetup.GET;
      IF (FORMAT("Service Period") <> '') AND
         ("Next Planned Service Date" <> 0D)
      THEN BEGIN
        GetServContractHeader;
        CASE ServMgtSetup."Next Service Calc. Method" OF
          ServMgtSetup."Next Service Calc. Method"::Planned:
            "Next Planned Service Date" := CALCDATE("Service Period","Last Planned Service Date");
          ServMgtSetup."Next Service Calc. Method"::Actual:
            "Next Planned Service Date" := CALCDATE("Service Period","Last Service Date");
        END;
      END ELSE
        "Next Planned Service Date" := 0D;
    END;

    PROCEDURE UpdateContractAnnualAmount@4(Deleting@1000 : Boolean);
    VAR
      OldServContractHeader@1002 : Record 5965;
      ServContractLine2@1003 : Record 5964;
    BEGIN
      GetServContractHeader;
      IF NOT ServContractHeader."Allow Unbalanced Amounts" THEN BEGIN
        ServContractLine.RESET;
        ServContractLine.SETRANGE("Contract Type","Contract Type");
        ServContractLine.SETRANGE("Contract No.","Contract No.");
        ServContractLine.SETFILTER("Line No.",'<>%1',"Line No.");
        ServContractLine.CALCSUMS("Line Amount");
        OldServContractHeader := ServContractHeader;
        IF Deleting THEN
          ServContractHeader."Annual Amount" := ServContractLine."Line Amount"
        ELSE BEGIN
          ServContractHeader."Annual Amount" := ServContractLine."Line Amount" + "Line Amount";
          IF NOT "New Line" THEN
            ContractGainLossEntry.AddEntry(4,"Contract Type","Contract No.","Line Amount" - xRec."Line Amount",'')
          ELSE
            IF ServContractHeader.Status = ServContractHeader.Status::Signed THEN BEGIN
              IF ServContractLine2.GET("Contract Type","Contract No.","Line No.") THEN
                ContractGainLossEntry.AddEntry(4,"Contract Type","Contract No.","Line Amount" - ServContractLine2."Line Amount",'')
              ELSE
                ContractGainLossEntry.AddEntry(0,"Contract Type","Contract No.","Line Amount",'')
            END;
        END;
        ServContractHeader.ValidateNextInvoicePeriod;
        ServContractHeader.SuspendStatusCheck(StatusCheckSuspended);
        ServContractHeader.MODIFY(TRUE);
        IF ServContractHeader."Contract Type" = ServContractHeader."Contract Type"::Contract THEN
          IF ServMgtSetup."Register Contract Changes" THEN
            ServContractHeader.UpdContractChangeLog(OldServContractHeader);
      END;
    END;

    PROCEDURE HideDialogBox@2(Hide@1000 : Boolean);
    BEGIN
      HideDialog := Hide;
    END;

    LOCAL PROCEDURE TestStatusOpen@33();
    BEGIN
      IF StatusCheckSuspended THEN
        EXIT;
      GetServContractHeader;
      ServContractHeader.TESTFIELD("Change Status",ServContractHeader."Change Status"::Open);
    END;

    PROCEDURE SuspendStatusCheck@39(Suspend@1000 : Boolean);
    BEGIN
      StatusCheckSuspended := Suspend;
    END;

    LOCAL PROCEDURE GetServContractHeader@3();
    BEGIN
      TESTFIELD("Contract No.");
      IF ("Contract Type" <> ServContractHeader."Contract Type") OR
         ("Contract No." <> ServContractHeader."Contract No.")
      THEN
        ServContractHeader.GET("Contract Type","Contract No.");
    END;

    PROCEDURE ShowComments@11();
    BEGIN
      ServContractHeader.GET("Contract Type","Contract No.");
      ServContractHeader.TESTFIELD("Customer No.");
      TESTFIELD("Line No.");
      ServCommentLine.RESET;
      ServCommentLine.SETRANGE("Table Name",ServCommentLine."Table Name"::"Service Contract");
      ServCommentLine.SETRANGE("Table Subtype","Contract Type");
      ServCommentLine.SETRANGE("No.","Contract No.");
      ServCommentLine.SETRANGE(Type,ServCommentLine.Type::General);
      ServCommentLine.SETRANGE("Table Line No.","Line No.");
      PAGE.RUNMODAL(PAGE::"Service Comment Sheet",ServCommentLine);
    END;

    PROCEDURE ValidateServicePeriod@6(CurrentDate@1000 : Date);
    BEGIN
      IF "Starting Date" > CurrentDate THEN
        ERROR(Text020,"Service Item No.","Contract No.");
      IF "Contract Expiration Date" = 0D THEN BEGIN
        ServContractHeader.GET(ServContractHeader."Contract Type"::Contract,"Contract No.");
        IF (ServContractHeader."Expiration Date" <> 0D) AND
           (ServContractHeader."Expiration Date" <= CurrentDate)
        THEN
          ERROR(Text021,"Service Item No.","Contract No.");
      END ELSE
        IF "Contract Expiration Date" < CurrentDate THEN
          ERROR(Text021,"Service Item No.","Contract No.");
    END;

    PROCEDURE CreditMemoBaseExists@7() : Boolean;
    VAR
      ServContractMgt@1008 : Codeunit 5940;
      CreditAmount@1003 : Decimal;
      FirstPrepaidPostingDate@1002 : Date;
      LastIncomePostingDate@1001 : Date;
    BEGIN
      IF "Line Amount" > 0 THEN BEGIN
        TESTFIELD("Contract Expiration Date");
        IF "Invoiced to Date" >= "Contract Expiration Date" THEN BEGIN
          Currency.InitRoundingPrecision;
          IF ServContractHeader.Prepaid THEN
            FirstPrepaidPostingDate := ServContractMgt.FindFirstPrepaidTransaction("Contract No.")
          ELSE
            FirstPrepaidPostingDate := 0D;
          LastIncomePostingDate := "Invoiced to Date";
          IF FirstPrepaidPostingDate <> 0D THEN
            LastIncomePostingDate := FirstPrepaidPostingDate - 1;
          CreditAmount :=
            ROUND(
              ServContractMgt.CalcContractLineAmount("Line Amount",
                "Contract Expiration Date",LastIncomePostingDate),
              Currency."Amount Rounding Precision");
          IF FirstPrepaidPostingDate <> 0D THEN BEGIN
            IF "Contract Expiration Date" < FirstPrepaidPostingDate THEN BEGIN
              CreditAmount :=
                ROUND(
                  ServContractMgt.CalcContractLineAmount("Line Amount",
                    FirstPrepaidPostingDate,"Invoiced to Date"),
                  Currency."Amount Rounding Precision");
            END ELSE
              CreditAmount :=
                ROUND(
                  ServContractMgt.CalcContractLineAmount("Line Amount",
                    "Contract Expiration Date","Invoiced to Date"),
                  Currency."Amount Rounding Precision");
          END;
        END;
        EXIT((CreditAmount > 0) AND (NOT Credited));
      END;

      EXIT(FALSE);
    END;

    PROCEDURE LogContractLineChanges@8(ServContractLine2@1000 : Record 5964);
    BEGIN
      IF "Item No." <> ServContractLine2."Item No." THEN
        ContractChangeLog.LogContractChange(
          "Contract No.",1,FIELDCAPTION("Item No."),0,
          FORMAT(ServContractLine2."Item No."),FORMAT("Item No."),
          ServContractLine2."Service Item No.","Line No.");

      IF "Line Value" <> ServContractLine2."Line Value" THEN
        ContractChangeLog.LogContractChange(
          "Contract No.",1,FIELDCAPTION("Line Value"),0,
          FORMAT(ServContractLine2."Line Value"),FORMAT("Line Value"),
          ServContractLine2."Service Item No.","Line No.");

      IF "Line Discount %" <> ServContractLine2."Line Discount %" THEN
        ContractChangeLog.LogContractChange(
          "Contract No.",1,FIELDCAPTION("Line Discount %"),0,
          FORMAT(ServContractLine2."Line Discount %"),FORMAT("Line Discount %"),
          ServContractLine2."Service Item No.","Line No.");

      IF "Line Amount" <> ServContractLine2."Line Amount" THEN
        ContractChangeLog.LogContractChange(
          "Contract No.",1,FIELDCAPTION("Line Amount"),0,
          FORMAT(ServContractLine2."Line Amount"),FORMAT("Line Amount"),
          ServContractLine2."Service Item No.","Line No.");

      IF "Contract Expiration Date" <> ServContractLine2."Contract Expiration Date" THEN
        ContractChangeLog.LogContractChange(
          "Contract No.",1,FIELDCAPTION("Contract Expiration Date"),0,
          FORMAT(ServContractLine2."Contract Expiration Date"),FORMAT("Contract Expiration Date"),
          ServContractLine2."Service Item No.","Line No.");

      IF "Service Item No." <> ServContractLine2."Service Item No." THEN
        ContractChangeLog.LogContractChange(
          "Contract No.",1,FIELDCAPTION("Service Item No."),0,
          FORMAT(ServContractLine2."Service Item No."),FORMAT("Service Item No."),
          ServContractLine2."Service Item No.","Line No.");
    END;

    BEGIN
    END.
  }
}

