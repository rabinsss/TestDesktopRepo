OBJECT Table 904 Assemble-to-Order Link
{
  OBJECT-PROPERTIES
  {
    Date=09/15/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Assemble-to-Order Link;
               ESM=V¡nculo ensamblar para pedido;
               FRC=Lien Assembler pour commande;
               ENC=Assemble-to-Order Link];
  }
  FIELDS
  {
    { 1   ;   ;Assembly Document Type;Option      ;CaptionML=[ENU=Assembly Document Type;
                                                              ESM=Tipo documento de ensamblado;
                                                              FRC=Type document d'assemblage;
                                                              ENC=Assembly Document Type];
                                                   OptionCaptionML=[ENU=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order;
                                                                    ESM=Cotizaci¢n,Pedido,Factura,Nota cr‚dito,Pedido abierto,Devoluci¢n;
                                                                    FRC=Devis,Commande,Facture,Note de cr‚dit,Commande permanente,Retour;
                                                                    ENC=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order];
                                                   OptionString=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order }
    { 2   ;   ;Assembly Document No.;Code20       ;TableRelation="Assembly Header" WHERE (Document Type=FIELD(Assembly Document Type),
                                                                                          No.=FIELD(Assembly Document No.));
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Assembly Document No.;
                                                              ESM=N§ documento de ensamblado;
                                                              FRC=Nø document d'assemblage;
                                                              ENC=Assembly Document No.] }
    { 11  ;   ;Type                ;Option        ;CaptionML=[ENU=Type;
                                                              ESM=Tipo;
                                                              FRC=Type;
                                                              ENC=Type];
                                                   OptionCaptionML=[ENU=" ,Sale";
                                                                    ESM=" ,Venta";
                                                                    FRC=" ,Vente";
                                                                    ENC=" ,Sale"];
                                                   OptionString=[ ,Sale] }
    { 12  ;   ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              ESM=Tipo documento;
                                                              FRC=Type de document;
                                                              ENC=Document Type];
                                                   OptionCaptionML=[ENU=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order;
                                                                    ESM=Cotizaci¢n,Pedido,Factura,Nota cr‚dito,Pedido abierto,Devoluci¢n;
                                                                    FRC=Devis,Commande,Facture,Note de cr‚dit,Commande permanente,Retour;
                                                                    ENC=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order];
                                                   OptionString=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order }
    { 13  ;   ;Document No.        ;Code20        ;TableRelation=IF (Type=CONST(Sale)) "Sales Line"."Document No." WHERE (Document Type=FIELD(Document Type),
                                                                                                                          Document No.=FIELD(Document No.),
                                                                                                                          Line No.=FIELD(Document Line No.));
                                                   CaptionML=[ENU=Document No.;
                                                              ESM=N§ documento;
                                                              FRC=Nø de document;
                                                              ENC=Document No.] }
    { 14  ;   ;Document Line No.   ;Integer       ;CaptionML=[ENU=Document Line No.;
                                                              ESM=N§ l¡n. documento;
                                                              FRC=N§ ligne document;
                                                              ENC=Document Line No.] }
    { 20  ;   ;Assembled Quantity  ;Decimal       ;CaptionML=[ENU=Assembled Quantity;
                                                              ESM=Cantidad ensamblada;
                                                              FRC=Quantit‚ assembl‚e;
                                                              ENC=Assembled Quantity];
                                                   DecimalPlaces=0:5 }
  }
  KEYS
  {
    {    ;Assembly Document Type,Assembly Document No.;
                                                   Clustered=Yes }
    {    ;Type,Document Type,Document No.,Document Line No. }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      AsmHeader@1000 : Record 900;
      Text000@1001 : TextConst '@@@="%1 = Table caption of SalesLine or WhseShptLine or InvtPickLine, %2 = Key text of SalesLine or WhseShptLine or InvtPickLine, %3 = Table caption of Assembly header, %4 = Key text of assembly header";ENU=Synchronizing...\  from: %1 with %2\  to: %3 with %4.;ESM=Sincronizando...\  desde: %1 con %2\  hasta: %3 con %4.;FRC=Synchronisation de ...\ … partir deÿ: %1 avec %2\ versÿ: %3 avec %4.;ENC=Synchronizing...\  from: %1 with %2\  to: %3 with %4.';
      Text001@1002 : TextConst 'ENU=Do you want to roll up the price from the assembly components?;ESM=¨Desea distribuir el precio de los componentes del ensamblado?;FRC=Souhaitez-vous calculer le prix … partir des composantes d''assemblageÿ?;ENC=Do you want to roll up the price from the assembly components?';
      Text002@1003 : TextConst 'ENU=Do you want to roll up the cost from the assembly components?;ESM=¨Desea distribuir el costo de los componentes del ensamblado?;FRC=Souhaitez-vous calculer le co–t … partir des composantes d''assemblageÿ?;ENC=Do you want to roll up the cost from the assembly components?';

      Text003@1004 : TextConst
        '@@@="%1 = Document Type, %2 = No."',
        'ENU=The item tracking defined on Assembly Header with Document Type %1, No. %2 exceeds %3 on Sales Line with Document Type %4, Document No. %5, Line No. %6.\\ You must adjust the existing item tracking before you can reenter the new quantity.',
        'ESM=El seguimiento de productos definido en la cabecera de ensamblado con el tipo de documento %1, N§ %2 excede %3 en la l¡nea de ventas con el tipo de documento %4, N§ documento %5, N§ l¡nea %6.\\ Debe ajustar el seguim. prod. actual antes de volver a introducir la nueva cantidad.',
        'FRC=La tra‡abilit‚ d‚finie sur l''en-tˆte d''assemblage avec le type document %1 et le nø %2 d‚passe %3 sur la ligne vente avec le type document %4, le nø document %5 et le nø ligne %6.\\ Vous devez ajuster cette tra‡abilit‚ avant de pouvoir entrer de nouveau la nouvelle quantit‚.',
        'ENC=The item tracking defined on Assembly Header with Document Type %1, No. %2 exceeds %3 on Sales Line with Document Type %4, Document No. %5, Line No. %6.\\ You must adjust the existing item tracking before you can reenter the new quantity.';
      Text004@1005 : TextConst 'ENU=%1 cannot be lower than %2 or higher than %3.\These limits may be defined by constraints calculated from the %4 field on the related %5. Refer to the field help for more information.;ESM=%1 no puede ser inferior a %2 ni superior a %3.\Estos l¡mites pueden definirse por restricciones calculadas a partir del campo %4 del %5 relacionado. Consulte la ayuda del campo para obtener m s informaci¢n.;FRC=%1 ne peut pas ˆtre inf‚rieur(e) … %2 ou sup‚rieur(e) … %3.\Ces limites peuvent ˆtre d‚finies par rapport aux contraintes calcul‚es … partir du champ %4 sur la %5 associ‚e. Reportez-vous … l''aide sur les champs pour plus d''informations.;ENC=%1 cannot be lower than %2 or higher than %3.\These limits may be defined by constraints calculated from the %4 field on the related %5. Refer to the field help for more information.';
      Text005@1006 : TextConst 'ENU=One or more %1 lines exist for the %2.;ESM=Existen una o m s l¡neas %1 para %2.;FRC=Il existe une ou plusieurs lignes %1 pour le %2.;ENC=One or more %1 lines exist for the %2.';
      Text006@1007 : TextConst 'ENU=The status of the linked assembly order will be changed to %1. Do you want to continue?;ESM=El estado del pedido de ensamblado vinculado se cambiar  a %1. ¨Desea continuar?;FRC=L''‚tat de l''ordre d''assemblage li‚ sera chang‚ en %1. Òtes-vous certain de vouloir continuerÿ?;ENC=The status of the linked assembly order will be changed to %1. Do you want to continue?';
      Text007@1008 : TextConst 'ENU=A %1 exists for the %2. \\If you want to record and post a different %3, then you must do this in the %4 field on the related %1.;ESM=Existe un %1 para el %2. \\Si desea registrar un %3 distinto, debe hacerlo en el campo %4 del %1 relacionado.;FRC=Il existe une %1 pour la %2. \\Si vous souhaitez enregistrer et reporter une %3 diff‚rente, alors vous devez le faire dans le champ %4 de la %1 associ‚e.;ENC=A %1 exists for the %2. \\If you want to record and post a different %3, then you must do this in the %4 field on the related %1.';
      Text008@1009 : TextConst '@@@="Key Value, say: %1=Line No. %2=10000";ENU=%1 %2;ESM=%1 %2;FRC=%1 %2;ENC=%1 %2';

    PROCEDURE UpdateAsmFromSalesLine@1(VAR NewSalesLine@1001 : Record 37);
    VAR
      SalesLine2@1000 : Record 37;
    BEGIN
      IF AsmExistsForSalesLine(NewSalesLine) THEN BEGIN
        IF NOT NewSalesLine.IsAsmToOrderAllowed THEN BEGIN
          DeleteAsmFromSalesLine(NewSalesLine);
          EXIT;
        END;
        IF NewSalesLine."Qty. to Assemble to Order" = 0 THEN BEGIN
          DeleteAsmFromSalesLine(NewSalesLine);
          INSERT;
          EXIT;
        END;
        IF NOT GetAsmHeader THEN BEGIN
          DELETE;
          InsertAsmHeader(AsmHeader,"Assembly Document Type","Assembly Document No.");
        END ELSE BEGIN
          IF NOT NeedsSynchronization(NewSalesLine) THEN
            EXIT;
          AsmReopenIfReleased;
          DELETE;
        END;
      END ELSE BEGIN
        IF NewSalesLine."Qty. to Assemble to Order" = 0 THEN
          EXIT;
        IF NOT SalesLine2.GET(NewSalesLine."Document Type",NewSalesLine."Document No.",NewSalesLine."Line No.") THEN
          EXIT;

        InsertAsmHeader(AsmHeader,NewSalesLine."Document Type",'');

        "Assembly Document Type" := AsmHeader."Document Type";
        "Assembly Document No." := AsmHeader."No.";
        Type := Type::Sale;
        "Document Type" := NewSalesLine."Document Type";
        "Document No." := NewSalesLine."Document No.";
        "Document Line No." := NewSalesLine."Line No.";
      END;

      SynchronizeAsmFromSalesLine(NewSalesLine);
      INSERT;
      AsmHeader."Shortcut Dimension 1 Code" := NewSalesLine."Shortcut Dimension 1 Code";
      AsmHeader."Shortcut Dimension 2 Code" := NewSalesLine."Shortcut Dimension 2 Code";
      AsmHeader.MODIFY(TRUE);
    END;

    PROCEDURE UpdateAsmDimFromSalesLine@25(SalesLine@1001 : Record 37);
    VAR
      Window@1000 : Dialog;
    BEGIN
      IF AsmExistsForSalesLine(SalesLine) THEN
        IF GetAsmHeader THEN BEGIN
          Window.OPEN(GetWindowOpenTextSale(SalesLine));
          IF ChangeDim(SalesLine."Dimension Set ID") THEN BEGIN
            AsmHeader."Shortcut Dimension 1 Code" := SalesLine."Shortcut Dimension 1 Code";
            AsmHeader."Shortcut Dimension 2 Code" := SalesLine."Shortcut Dimension 2 Code";
            AsmHeader.MODIFY(TRUE);
          END;
          Window.CLOSE;
        END;
    END;

    PROCEDURE UpdateQtyToAsmFromSalesLine@36(SalesLine@1000 : Record 37);
    VAR
      Window@1001 : Dialog;
    BEGIN
      IF AsmExistsForSalesLine(SalesLine) THEN
        IF GetAsmHeader THEN BEGIN
          Window.OPEN(GetWindowOpenTextSale(SalesLine));
          UpdateQtyToAsm(MaxQtyToAsm(SalesLine,AsmHeader));
          Window.CLOSE;
        END;
    END;

    PROCEDURE UpdateQtyToAsmFromWhseShptLine@51(WhseShptLine@1000 : Record 7321);
    VAR
      Window@1001 : Dialog;
    BEGIN
      IF AsmExistsForWhseShptLine(WhseShptLine) THEN
        IF GetAsmHeader THEN BEGIN
          Window.OPEN(GetWindowOpenTextWhseShpt(WhseShptLine));
          UpdateQtyToAsm(WhseShptLine."Qty. to Ship");
          Window.CLOSE;
        END;
    END;

    PROCEDURE UpdateQtyToAsmFromInvtPickLine@57(InvtPickWhseActivityLine@1000 : Record 5767);
    VAR
      WhseActivityLine@1003 : Record 5767;
      Window@1001 : Dialog;
      TotalQtyToAsm@1004 : Decimal;
    BEGIN
      WhseActivityLine.SETRANGE("Activity Type",InvtPickWhseActivityLine."Activity Type");
      WhseActivityLine.SETRANGE("Source Type",InvtPickWhseActivityLine."Source Type");
      WhseActivityLine.SETRANGE("Source Subtype",InvtPickWhseActivityLine."Source Subtype");
      WhseActivityLine.SETRANGE("Source No.",InvtPickWhseActivityLine."Source No.");
      WhseActivityLine.SETRANGE("Source Line No.",InvtPickWhseActivityLine."Source Line No.");
      WhseActivityLine.SETRANGE("Assemble to Order",TRUE);
      IF WhseActivityLine.FINDSET THEN
        REPEAT
          TotalQtyToAsm += WhseActivityLine."Qty. to Handle";
        UNTIL WhseActivityLine.NEXT = 0;
      IF AsmExistsForInvtPickLine(InvtPickWhseActivityLine) THEN
        IF GetAsmHeader THEN BEGIN
          Window.OPEN(GetWindowOpenTextInvtPick(InvtPickWhseActivityLine));
          UpdateQtyToAsm(TotalQtyToAsm);
          Window.CLOSE;
        END;
    END;

    LOCAL PROCEDURE UpdateQtyToAsm@53(NewQtyToAsm@1000 : Decimal);
    BEGIN
      DELETE;
      IF ChangeQtyToAsm(NewQtyToAsm) THEN
        AsmHeader.MODIFY(TRUE);
      INSERT;
    END;

    PROCEDURE UpdateAsmBinCodeFromSalesLine@41(SalesLine@1001 : Record 37);
    VAR
      Window@1000 : Dialog;
    BEGIN
      IF AsmExistsForSalesLine(SalesLine) THEN
        IF GetAsmHeader THEN BEGIN
          Window.OPEN(GetWindowOpenTextSale(SalesLine));
          UpdateAsmBinCode(SalesLine."Bin Code");
          Window.CLOSE;
        END;
    END;

    PROCEDURE UpdateAsmBinCodeFromWhseShptLine@55(WhseShptLine@1000 : Record 7321);
    VAR
      Window@1001 : Dialog;
    BEGIN
      IF AsmExistsForWhseShptLine(WhseShptLine) THEN
        IF GetAsmHeader THEN BEGIN
          Window.OPEN(GetWindowOpenTextWhseShpt(WhseShptLine));
          UpdateAsmBinCode(WhseShptLine."Bin Code");
          Window.CLOSE;
        END;
    END;

    PROCEDURE UpdateAsmBinCodeFromInvtPickLine@60(InvtPickWhseActivityLine@1000 : Record 5767);
    VAR
      Window@1001 : Dialog;
    BEGIN
      IF AsmExistsForInvtPickLine(InvtPickWhseActivityLine) THEN
        IF GetAsmHeader THEN BEGIN
          Window.OPEN(GetWindowOpenTextInvtPick(InvtPickWhseActivityLine));
          UpdateAsmBinCode(InvtPickWhseActivityLine."Bin Code");
          Window.CLOSE;
        END;
    END;

    LOCAL PROCEDURE UpdateAsmBinCode@56(NewBinCode@1000 : Code[20]);
    BEGIN
      AsmHeader.SuspendStatusCheck(TRUE);
      IF ChangeBinCode(NewBinCode) THEN
        AsmHeader.MODIFY(TRUE);
      AsmHeader.SuspendStatusCheck(FALSE);
    END;

    PROCEDURE DeleteAsmFromSalesLine@2(SalesLine@1000 : Record 37);
    BEGIN
      IF AsmExistsForSalesLine(SalesLine) THEN BEGIN
        DELETE;
        IF "Document Type" = "Document Type"::Order THEN
          UnreserveAsm;

        IF GetAsmHeader THEN BEGIN
          AsmHeader.DELETE(TRUE);
          AsmHeader.INIT;
        END;
      END;
    END;

    PROCEDURE InsertAsmHeader@9(VAR AsmHeader@1006 : Record 900;NewDocType@1000 : Option;NewDocNo@1001 : Code[20]);
    BEGIN
      AsmHeader.INIT;
      AsmHeader.VALIDATE("Document Type",NewDocType);
      AsmHeader.VALIDATE("No.",NewDocNo);
      AsmHeader.INSERT(TRUE);
    END;

    LOCAL PROCEDURE SynchronizeAsmFromSalesLine@15(VAR NewSalesLine@1000 : Record 37);
    VAR
      TempTrackingSpecification@1002 : TEMPORARY Record 336;
      SalesHeader@1005 : Record 36;
      Window@1001 : Dialog;
      QtyTracked@1004 : Decimal;
      QtyTrackedBase@1003 : Decimal;
    BEGIN
      GetAsmHeader;

      Window.OPEN(GetWindowOpenTextSale(NewSalesLine));

      CaptureItemTracking(TempTrackingSpecification,QtyTracked,QtyTrackedBase);

      IF NewSalesLine."Qty. to Asm. to Order (Base)" < QtyTrackedBase THEN
        ERROR(Text003,
          AsmHeader."Document Type",
          AsmHeader."No.",
          NewSalesLine.FIELDCAPTION("Qty. to Assemble to Order"),
          NewSalesLine."Document Type",
          NewSalesLine."Document No.",
          NewSalesLine."Line No.");

      UnreserveAsm;

      SalesHeader.GET(NewSalesLine."Document Type",NewSalesLine."Document No.");
      AsmHeader.SetWarningsOff;
      ChangeItem(NewSalesLine."No.");
      ChangeLocation(NewSalesLine."Location Code");
      ChangeVariant(NewSalesLine."Variant Code");
      ChangeBinCode(NewSalesLine."Bin Code");
      ChangeUOM(NewSalesLine."Unit of Measure Code");
      ChangeDate(NewSalesLine."Shipment Date");
      ChangePostingDate(SalesHeader."Posting Date");
      ChangeDim(NewSalesLine."Dimension Set ID");
      ChangePlanningFlexibility;
      ChangeQty(NewSalesLine."Qty. to Assemble to Order");
      ChangeQtyToAsm(MaxQtyToAsm(NewSalesLine,AsmHeader));

      AsmHeader.MODIFY(TRUE);

      ReserveAsmToSale(NewSalesLine,
        AsmHeader."Remaining Quantity" - QtyTracked,
        AsmHeader."Remaining Quantity (Base)" - QtyTrackedBase);
      RestoreItemTracking(TempTrackingSpecification,NewSalesLine);

      NewSalesLine.CheckAsmToOrder(AsmHeader);
      Window.CLOSE;

      AsmHeader.ShowDueDateBeforeWorkDateMsg;
    END;

    PROCEDURE MakeAsmOrderLinkedToSalesOrderLine@28(FromSalesLine@1000 : Record 37;ToSalesOrderLine@1001 : Record 37);
    VAR
      ToAsmOrderHeader@1002 : Record 900;
    BEGIN
      IF AsmExistsForSalesLine(FromSalesLine) THEN BEGIN
        ToSalesOrderLine.TESTFIELD(Type,ToSalesOrderLine.Type::Item);
        ToSalesOrderLine.TESTFIELD("No.",FromSalesLine."No.");

        IF GetAsmHeader THEN BEGIN
          ToAsmOrderHeader.INIT;
          CopyAsmToNewAsmOrder(AsmHeader,ToAsmOrderHeader,TRUE);

          INIT;
          "Assembly Document Type" := ToAsmOrderHeader."Document Type";
          "Assembly Document No." := ToAsmOrderHeader."No.";
          Type := Type::Sale;
          "Document Type" := ToSalesOrderLine."Document Type";
          "Document No." := ToSalesOrderLine."Document No.";
          "Document Line No." := ToSalesOrderLine."Line No.";

          SynchronizeAsmFromSalesLine(ToSalesOrderLine);
          RecalcAutoReserve(ToAsmOrderHeader);
          INSERT;
        END;
        IF FromSalesLine."Document Type" = FromSalesLine."Document Type"::Quote THEN
          DeleteAsmFromSalesLine(FromSalesLine);
      END;
    END;

    LOCAL PROCEDURE NeedsSynchronization@18(SalesLine@1000 : Record 37) : Boolean;
    BEGIN
      GetAsmHeader;
      AsmHeader.CALCFIELDS("Reserved Qty. (Base)");
      EXIT(
        (SalesLine."No." <> AsmHeader."Item No.") OR
        (SalesLine."Location Code" <> AsmHeader."Location Code") OR
        (SalesLine."Shipment Date" <> AsmHeader."Due Date") OR
        (SalesLine."Variant Code" <> AsmHeader."Variant Code") OR
        (SalesLine."Bin Code" <> AsmHeader."Bin Code") OR
        (SalesLine."Dimension Set ID" <> AsmHeader."Dimension Set ID") OR
        (SalesLine."Qty. to Asm. to Order (Base)" <> AsmHeader."Quantity (Base)") OR
        (SalesLine."Unit of Measure Code" <> AsmHeader."Unit of Measure Code") OR
        (AsmHeader."Planning Flexibility" <> AsmHeader."Planning Flexibility"::None) OR
        ((SalesLine."Document Type" = SalesLine."Document Type"::Order) AND
         (AsmHeader."Remaining Quantity (Base)" <> AsmHeader."Reserved Qty. (Base)")));
    END;

    LOCAL PROCEDURE ChangeItem@3(NewItemNo@1001 : Code[20]);
    BEGIN
      IF AsmHeader."Item No." = NewItemNo THEN
        EXIT;

      AsmHeader.VALIDATE("Item No.",NewItemNo);
    END;

    LOCAL PROCEDURE ChangeQty@4(NewQty@1001 : Decimal);
    BEGIN
      IF AsmHeader.Quantity = NewQty THEN
        EXIT;

      AsmHeader.VALIDATE(Quantity,NewQty);
    END;

    LOCAL PROCEDURE ChangeQtyToAsm@32(NewQtyToAsm@1000 : Decimal) : Boolean;
    BEGIN
      IF AsmHeader."Quantity to Assemble" = NewQtyToAsm THEN
        EXIT(FALSE);

      AsmHeader.VALIDATE("Quantity to Assemble",NewQtyToAsm);
      EXIT(TRUE)
    END;

    LOCAL PROCEDURE ChangeLocation@5(NewLocation@1001 : Code[10]);
    BEGIN
      IF AsmHeader."Location Code" = NewLocation THEN
        EXIT;

      AsmHeader.VALIDATE("Location Code",NewLocation);
    END;

    LOCAL PROCEDURE ChangeVariant@6(NewVariant@1001 : Code[10]);
    BEGIN
      IF AsmHeader."Variant Code" = NewVariant THEN
        EXIT;

      AsmHeader.VALIDATE("Variant Code",NewVariant);
    END;

    LOCAL PROCEDURE ChangeUOM@7(NewUOMCode@1001 : Code[10]);
    BEGIN
      IF AsmHeader."Unit of Measure Code" = NewUOMCode THEN
        EXIT;

      AsmHeader.VALIDATE("Unit of Measure Code",NewUOMCode);
    END;

    LOCAL PROCEDURE ChangeDate@8(NewDate@1001 : Date);
    BEGIN
      IF AsmHeader."Due Date" = NewDate THEN
        EXIT;

      AsmHeader.VALIDATE("Due Date",NewDate);
    END;

    LOCAL PROCEDURE ChangePostingDate@66(NewDate@1000 : Date);
    BEGIN
      IF AsmHeader."Posting Date" = NewDate THEN
        EXIT;

      AsmHeader.VALIDATE("Posting Date",NewDate);
    END;

    LOCAL PROCEDURE ChangeDim@16(NewDimSetID@1000 : Integer) : Boolean;
    BEGIN
      IF AsmHeader."Dimension Set ID" = NewDimSetID THEN
        EXIT(FALSE);

      AsmHeader.VALIDATE("Dimension Set ID",NewDimSetID);
      EXIT(TRUE)
    END;

    LOCAL PROCEDURE ChangeBinCode@40(NewBinCode@1001 : Code[20]) : Boolean;
    BEGIN
      IF AsmHeader."Bin Code" = NewBinCode THEN
        EXIT(FALSE);

      AsmHeader.ValidateBinCode(NewBinCode);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ChangePlanningFlexibility@46();
    BEGIN
      IF AsmHeader."Planning Flexibility" = AsmHeader."Planning Flexibility"::None THEN
        EXIT;

      AsmHeader.VALIDATE("Planning Flexibility",AsmHeader."Planning Flexibility"::None);
    END;

    PROCEDURE ReserveAsmToSale@10(VAR SalesLine@1003 : Record 37;QtyToReserve@1001 : Decimal;QtyToReserveBase@1004 : Decimal);
    VAR
      ReservEntry@1000 : Record 337;
      TrackingSpecification@1006 : Record 336;
      AsmHeaderReserve@1002 : Codeunit 925;
      ReservMgt@1005 : Codeunit 99000845;
    BEGIN
      IF SalesLine."Document Type" <> SalesLine."Document Type"::Order THEN
        EXIT;

      IF Type = Type::Sale THEN BEGIN
        GetAsmHeader;

        AsmHeaderReserve.SetBinding(ReservEntry.Binding::"Order-to-Order");
        AsmHeaderReserve.SetDisallowCancellation(TRUE);
        ReservMgt.CreateTrackingSpecification(TrackingSpecification,
          DATABASE::"Sales Line",SalesLine."Document Type",SalesLine."Document No.",'',0,SalesLine."Line No.",
          AsmHeader."Variant Code",AsmHeader."Location Code",'','',
          AsmHeader."Qty. per Unit of Measure");
        AsmHeaderReserve.CreateReservationSetFrom(TrackingSpecification);
        AsmHeaderReserve.CreateReservation(
          AsmHeader,AsmHeader.Description,AsmHeader."Due Date",QtyToReserve,QtyToReserveBase,'','');

        IF SalesLine.Reserve = SalesLine.Reserve::Never THEN
          SalesLine.Reserve := SalesLine.Reserve::Optional;
      END;
    END;

    LOCAL PROCEDURE UnreserveAsm@12();
    VAR
      ReservEntry@1002 : Record 337;
      AsmHeaderReserve@1001 : Codeunit 925;
    BEGIN
      GetAsmHeader;

      AsmHeaderReserve.FilterReservFor(ReservEntry,AsmHeader);
      AsmHeaderReserve.DeleteLine(AsmHeader);
    END;

    LOCAL PROCEDURE CaptureItemTracking@38(VAR TrackingSpecification@1008 : Record 336;VAR QtyTracked@1003 : Decimal;VAR QtyTrackedBase@1002 : Decimal);
    VAR
      ReservEntry@1001 : Record 337;
      Item@1006 : Record 27;
      AsmHeaderReserve@1000 : Codeunit 925;
    BEGIN
      GetAsmHeader;

      TrackingSpecification.RESET;
      TrackingSpecification.DELETEALL;

      AsmHeaderReserve.FilterReservFor(ReservEntry,AsmHeader);
      IF ReservEntry.FIND('-') THEN BEGIN
        Item.GET(AsmHeader."Item No.");
        REPEAT
          IF ReservEntry.TrackingExists THEN BEGIN
            TrackingSpecification.TRANSFERFIELDS(ReservEntry);
            TrackingSpecification.INSERT;

            QtyTracked += ReservEntry.Quantity;
            QtyTrackedBase += ReservEntry."Quantity (Base)";

            RemoveTrackingFromReservation(ReservEntry,Item."Item Tracking Code");
          END;
        UNTIL ReservEntry.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE RemoveTrackingFromReservation@39(ReservEntry@1000 : Record 337;ItemTrackingCode@1001 : Code[10]);
    VAR
      ItemTrackingCodeRec@1002 : Record 6502;
      TrackingSpecification@1005 : Record 336;
      ReservEngineMgt@1003 : Codeunit 99000831;
      ReservMgt@1004 : Codeunit 99000845;
      QtyToAdd@1006 : Decimal;
    BEGIN
      ReservMgt.SetPointerFilter(ReservEntry);
      ReservEntry.SETRANGE("Serial No.",ReservEntry."Serial No.");
      ReservEntry.SETRANGE("Lot No.",ReservEntry."Lot No.");

      TrackingSpecification.TRANSFERFIELDS(ReservEntry);
      TrackingSpecification."Serial No." := '';
      TrackingSpecification."Lot No." := '';
      TrackingSpecification."Warranty Date" := 0D;
      TrackingSpecification."Expiration Date" := 0D;

      ItemTrackingCodeRec.GET(ItemTrackingCode);
      ReservEngineMgt.AddItemTrackingToTempRecSet(
        ReservEntry,TrackingSpecification,
        TrackingSpecification."Quantity (Base)",QtyToAdd,
        ItemTrackingCodeRec."SN Specific Tracking",
        ItemTrackingCodeRec."Lot Specific Tracking");
    END;

    LOCAL PROCEDURE RestoreItemTracking@37(VAR TrackingSpecification@1003 : Record 336;SalesLine@1001 : Record 37);
    VAR
      ReservEntry@1002 : Record 337;
      CreateReservEntry@1000 : Codeunit 99000830;
    BEGIN
      GetAsmHeader;

      IF TrackingSpecification.FIND('-') THEN
        REPEAT
          CreateReservEntry.SetDates(TrackingSpecification."Warranty Date",TrackingSpecification."Expiration Date");
          CreateReservEntry.SetApplyFromEntryNo(TrackingSpecification."Appl.-from Item Entry");
          CreateReservEntry.SetDisallowCancellation(TRUE);
          CreateReservEntry.SetBinding(ReservEntry.Binding::"Order-to-Order");
          CreateReservEntry.SetQtyToHandleAndInvoice(
            TrackingSpecification."Qty. to Handle (Base)",TrackingSpecification."Qty. to Invoice (Base)");

          CreateReservEntry.CreateReservEntryFor(
            DATABASE::"Assembly Header",AsmHeader."Document Type",AsmHeader."No.",'',0,0,
            AsmHeader."Qty. per Unit of Measure",
            0,
            TrackingSpecification."Quantity (Base)",
            TrackingSpecification."Serial No.",TrackingSpecification."Lot No.");
          CreateReservEntry.CreateReservEntryFrom(
            DATABASE::"Sales Line",SalesLine."Document Type",SalesLine."Document No.",'',0,SalesLine."Line No.",
            AsmHeader."Qty. per Unit of Measure",
            TrackingSpecification."Serial No.",TrackingSpecification."Lot No.");
          CreateReservEntry.CreateEntry(
            AsmHeader."Item No.",
            AsmHeader."Variant Code",
            AsmHeader."Location Code",
            AsmHeader.Description,
            AsmHeader."Due Date",
            AsmHeader."Due Date",0,0);
        UNTIL TrackingSpecification.NEXT = 0;
      TrackingSpecification.DELETEALL;
    END;

    LOCAL PROCEDURE CopyAsmToNewAsmOrder@21(FromAsmHeader@1001 : Record 900;VAR ToAsmOrderHeader@1000 : Record 900;CopyComments@1006 : Boolean);
    VAR
      FromAsmLine@1002 : Record 901;
      ToAsmOrderLine@1003 : Record 901;
      FromAsmCommentLine@1004 : Record 906;
      ToAsmCommentLine@1005 : Record 906;
      AssemblyLineReserve@1007 : Codeunit 926;
      RecordLinkManagement@1008 : Codeunit 447;
    BEGIN
      ToAsmOrderHeader := FromAsmHeader;
      ToAsmOrderHeader."Document Type" := ToAsmOrderHeader."Document Type"::Order;
      ToAsmOrderHeader."No." := '';
      ToAsmOrderHeader.Status := ToAsmOrderHeader.Status::Open;
      ToAsmOrderHeader."Assembled Quantity" := 0;
      ToAsmOrderHeader."Assembled Quantity (Base)" := 0;
      ToAsmOrderHeader.VALIDATE(Quantity,FromAsmHeader."Quantity to Assemble");
      ToAsmOrderHeader.INSERT(TRUE);
      RecordLinkManagement.CopyLinks(FromAsmHeader,ToAsmOrderHeader);

      FromAsmLine.SETRANGE("Document Type",FromAsmHeader."Document Type");
      FromAsmLine.SETRANGE("Document No.",FromAsmHeader."No.");
      IF FromAsmLine.FIND('-') THEN
        REPEAT
          ToAsmOrderLine := FromAsmLine;
          ToAsmOrderLine."Document Type" := ToAsmOrderLine."Document Type"::Order;
          ToAsmOrderLine."Document No." := ToAsmOrderHeader."No.";
          ToAsmOrderLine."Consumed Quantity" := 0;
          ToAsmOrderLine."Consumed Quantity (Base)" := 0;
          ToAsmOrderLine.VALIDATE(Quantity,FromAsmLine."Quantity to Consume");
          ToAsmOrderLine.INSERT(TRUE);
          AssemblyLineReserve.TransferAsmLineToAsmLine(FromAsmLine,ToAsmOrderLine,ToAsmOrderLine."Quantity (Base)");
          AssemblyLineReserve.SetDeleteItemTracking(TRUE);
          AssemblyLineReserve.DeleteLine(FromAsmLine);
        UNTIL FromAsmLine.NEXT = 0;

      IF CopyComments THEN BEGIN
        FromAsmCommentLine.SETRANGE("Document Type",FromAsmHeader."Document Type");
        FromAsmCommentLine.SETRANGE("Document No.",FromAsmHeader."No.");
        IF FromAsmCommentLine.FIND('-') THEN
          REPEAT
            ToAsmCommentLine := FromAsmCommentLine;
            ToAsmCommentLine."Document Type" := ToAsmCommentLine."Document Type"::"Assembly Order";
            ToAsmCommentLine."Document No." := ToAsmOrderHeader."No.";
            ToAsmCommentLine.INSERT(TRUE);
          UNTIL FromAsmCommentLine.NEXT = 0;
      END;
    END;

    PROCEDURE RollUpPrice@22(SalesHeader@1005 : Record 36;VAR SalesLine@1000 : Record 37);
    VAR
      AsmLine@1001 : Record 901;
      CompSalesLine@1002 : Record 37;
      CompItem@1004 : Record 27;
      Res@1008 : Record 156;
      Currency@1007 : Record 4;
      SalesPriceCalcMgt@1003 : Codeunit 7000;
      UnitPrice@1006 : Decimal;
    BEGIN
      SalesLine.TESTFIELD(Quantity);
      SalesLine.TESTFIELD("Qty. to Asm. to Order (Base)");
      IF NOT CONFIRM(Text001) THEN
        EXIT;
      IF NOT AsmExistsForSalesLine(SalesLine) THEN
        EXIT;
      IF NOT GetAsmHeader THEN
        EXIT;

      IF SalesHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE BEGIN
        SalesHeader.TESTFIELD("Currency Factor");
        Currency.GET(SalesHeader."Currency Code");
        Currency.TESTFIELD("Unit-Amount Rounding Precision");
      END;

      AsmLine.SETRANGE("Document Type",AsmHeader."Document Type");
      AsmLine.SETRANGE("Document No.",AsmHeader."No.");
      IF AsmLine.FIND('-') THEN
        REPEAT
          IF AsmLine.Type IN [AsmLine.Type::Item,AsmLine.Type::Resource] THEN BEGIN
            CompSalesLine := SalesLine;
            CompSalesLine."Line No." := 0;
            CompSalesLine.Quantity := 0;
            CompSalesLine."Quantity (Base)" := 0;

            CompSalesLine."No." := AsmLine."No.";
            CompSalesLine."Variant Code" := AsmLine."Variant Code";
            CompSalesLine."Qty. per Unit of Measure" := AsmLine."Qty. per Unit of Measure";

            CASE AsmLine.Type OF
              AsmLine.Type::Item:
                BEGIN
                  CompItem.GET(CompSalesLine."No.");
                  CompSalesLine.Type := CompSalesLine.Type::Item;
                  CompSalesLine."Gen. Prod. Posting Group" := CompItem."Gen. Prod. Posting Group";
                  CompSalesLine."Tax Group Code" := CompItem."Tax Group Code";
                  CompSalesLine.VALIDATE("VAT Prod. Posting Group",CompItem."VAT Prod. Posting Group");
                END;
              AsmLine.Type::Resource:
                BEGIN
                  Res.GET(CompSalesLine."No.");
                  CompSalesLine.Type := CompSalesLine.Type::Resource;
                  CompSalesLine."Gen. Prod. Posting Group" := Res."Gen. Prod. Posting Group";
                  CompSalesLine."Tax Group Code" := Res."Tax Group Code";
                  CompSalesLine.VALIDATE("VAT Prod. Posting Group",Res."VAT Prod. Posting Group");
                END;
            END;

            CompSalesLine.Quantity := AsmLine.Quantity;
            CompSalesLine."Quantity (Base)" := AsmLine."Quantity (Base)";
            CompSalesLine."Unit of Measure Code" := AsmLine."Unit of Measure Code";
            CompSalesLine."Unit Price" := 0;
            CompSalesLine."Allow Line Disc." := FALSE;

            SalesPriceCalcMgt.FindSalesLinePrice(SalesHeader,CompSalesLine,SalesLine.FIELDNO("No."));

            UnitPrice += CompSalesLine."Unit Price" * AsmLine.Quantity;
          END;
        UNTIL AsmLine.NEXT = 0;

      UnitPrice := ROUND(UnitPrice / SalesLine.Quantity,Currency."Unit-Amount Rounding Precision");
      SalesLine.VALIDATE("Unit Price",UnitPrice);
      SalesLine.MODIFY(TRUE);
    END;

    PROCEDURE RollUpCost@23(VAR SalesLine@1000 : Record 37);
    VAR
      AsmLine@1006 : Record 901;
      UnitCost@1002 : Decimal;
    BEGIN
      SalesLine.TESTFIELD(Quantity);
      SalesLine.TESTFIELD("Qty. to Asm. to Order (Base)");
      IF NOT CONFIRM(Text002) THEN
        EXIT;
      IF NOT AsmExistsForSalesLine(SalesLine) THEN
        EXIT;
      IF NOT GetAsmHeader THEN
        EXIT;

      AsmLine.SETRANGE("Document Type",AsmHeader."Document Type");
      AsmLine.SETRANGE("Document No.",AsmHeader."No.");
      IF AsmLine.FIND('-') THEN
        REPEAT
          UnitCost += AsmLine."Cost Amount";
        UNTIL AsmLine.NEXT = 0;

      SalesLine.VALIDATE("Unit Cost (LCY)",ROUND(UnitCost / SalesLine.Quantity,0.00001));
      SalesLine.MODIFY(TRUE);
    END;

    PROCEDURE ShowAsm@11(SalesLine@1000 : Record 37);
    BEGIN
      SalesLine.TESTFIELD("Qty. to Asm. to Order (Base)");
      IF AsmExistsForSalesLine(SalesLine) THEN BEGIN
        GetAsmHeader;
        CASE "Document Type" OF
          "Document Type"::Quote:
            PAGE.RUNMODAL(PAGE::"Assembly Quote",AsmHeader);
          "Document Type"::"Blanket Order":
            PAGE.RUNMODAL(PAGE::"Blanket Assembly Order",AsmHeader);
          "Document Type"::Order:
            PAGE.RUNMODAL(PAGE::"Assembly Order",AsmHeader);
        END;
      END;
    END;

    PROCEDURE ShowAsmToOrderLines@17(SalesLine@1000 : Record 37);
    VAR
      AsmLine@1001 : Record 901;
    BEGIN
      SalesLine.TESTFIELD("Qty. to Asm. to Order (Base)");
      IF AsmExistsForSalesLine(SalesLine) THEN BEGIN
        AsmLine.FILTERGROUP := 2;
        AsmLine.SETRANGE("Document Type","Assembly Document Type");
        AsmLine.SETRANGE("Document No.","Assembly Document No.");
        AsmLine.FILTERGROUP := 0;
        PAGE.RUNMODAL(PAGE::"Assemble-to-Order Lines",AsmLine);
      END;
    END;

    PROCEDURE ShowSales@13(AssemblyHeader@1000 : Record 900);
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      IF GetATOLink(AssemblyHeader) THEN BEGIN
        SalesHeader.GET("Document Type","Document No.");
        CASE "Document Type" OF
          "Document Type"::Quote:
            PAGE.RUNMODAL(PAGE::"Sales Quote",SalesHeader);
          "Document Type"::"Blanket Order":
            PAGE.RUNMODAL(PAGE::"Blanket Sales Order",SalesHeader);
          "Document Type"::Order:
            PAGE.RUNMODAL(PAGE::"Sales Order",SalesHeader);
        END;
      END;
    END;

    PROCEDURE SalesLineCheckAvailShowWarning@24(SalesLine@1000 : Record 37;VAR TempAsmHeader@1004 : TEMPORARY Record 900;VAR TempAsmLine@1001 : TEMPORARY Record 901) : Boolean;
    VAR
      AsmLine@1003 : Record 901;
      SalesSetup@1005 : Record 311;
    BEGIN
      IF SalesLine."Qty. to Assemble to Order" = 0 THEN
        EXIT(FALSE);

      SalesSetup.GET;
      IF NOT SalesSetup."Stockout Warning" THEN
        EXIT(FALSE);

      TempAsmHeader.INIT;
      TempAsmHeader."Document Type" := SalesLine."Document Type";
      IF SalesLine.AsmToOrderExists(AsmHeader) THEN
        TempAsmHeader := AsmHeader;
      TransAvailSalesLineToAsmHeader(TempAsmHeader,SalesLine);
      TempAsmHeader.INSERT;

      AsmLine.SETRANGE("Document Type",AsmHeader."Document Type");
      AsmLine.SETRANGE("Document No.",AsmHeader."No.");
      IF SalesLine.AsmToOrderExists(AsmHeader) AND NOT AsmLine.ISEMPTY THEN
        EXIT(TransAvailAsmLinesToAsmLines(AsmHeader,TempAsmHeader,TempAsmLine,FALSE));
      EXIT(TransAvailBOMCompToAsmLines(TempAsmHeader,TempAsmLine));
    END;

    PROCEDURE ATOCopyCheckAvailShowWarning@29(FromAsmHeader@1001 : Record 900;SalesLine@1005 : Record 37;VAR TempAsmHeader@1000 : TEMPORARY Record 900;VAR TempAsmLine@1003 : TEMPORARY Record 901;Recalculate@1004 : Boolean) : Boolean;
    VAR
      SalesSetup@1009 : Record 311;
    BEGIN
      IF SalesLine."Qty. to Assemble to Order" = 0 THEN
        EXIT(FALSE);

      SalesSetup.GET;
      IF NOT SalesSetup."Stockout Warning" THEN
        EXIT(FALSE);

      TempAsmHeader.INIT;
      TempAsmHeader."Document Type" := SalesLine."Document Type";
      TransAvailSalesLineToAsmHeader(TempAsmHeader,SalesLine);
      TempAsmHeader.INSERT;

      IF NOT Recalculate THEN
        EXIT(TransAvailAsmLinesToAsmLines(FromAsmHeader,TempAsmHeader,TempAsmLine,TRUE));
      EXIT(TransAvailBOMCompToAsmLines(TempAsmHeader,TempAsmLine));
    END;

    PROCEDURE PstdATOCopyCheckAvailShowWarn@42(FromPostedAsmHeader@1001 : Record 910;SalesLine@1005 : Record 37;VAR TempAsmHeader@1000 : TEMPORARY Record 900;VAR TempAsmLine@1003 : TEMPORARY Record 901;Recalculate@1004 : Boolean) : Boolean;
    VAR
      SalesSetup@1009 : Record 311;
    BEGIN
      IF SalesLine."Qty. to Assemble to Order" = 0 THEN
        EXIT(FALSE);

      SalesSetup.GET;
      IF NOT SalesSetup."Stockout Warning" THEN
        EXIT(FALSE);

      TempAsmHeader.INIT;
      TempAsmHeader."Document Type" := SalesLine."Document Type";
      TransAvailSalesLineToAsmHeader(TempAsmHeader,SalesLine);
      TempAsmHeader.INSERT;

      IF NOT Recalculate THEN
        EXIT(TransAvailPstdAsmLnsToAsmLns(FromPostedAsmHeader,TempAsmHeader,TempAsmLine));
      EXIT(TransAvailBOMCompToAsmLines(TempAsmHeader,TempAsmLine));
    END;

    LOCAL PROCEDURE TransAvailSalesLineToAsmHeader@27(VAR NewAsmHeader@1006 : Record 900;SalesLine@1010 : Record 37);
    BEGIN
      NewAsmHeader."Item No." := SalesLine."No.";
      NewAsmHeader."Variant Code" := SalesLine."Variant Code";
      NewAsmHeader."Location Code" := SalesLine."Location Code";
      NewAsmHeader."Bin Code" := SalesLine."Bin Code";
      NewAsmHeader."Due Date" := SalesLine."Shipment Date";
      NewAsmHeader.ValidateDates(NewAsmHeader.FIELDNO("Due Date"),TRUE);
      NewAsmHeader."Unit of Measure Code" := SalesLine."Unit of Measure Code";
      NewAsmHeader."Qty. per Unit of Measure" := SalesLine."Qty. per Unit of Measure";
      NewAsmHeader.Quantity := SalesLine."Qty. to Assemble to Order" - AsmHeader."Assembled Quantity";
      NewAsmHeader."Quantity (Base)" := SalesLine."Qty. to Asm. to Order (Base)" - AsmHeader."Assembled Quantity (Base)";

      NewAsmHeader.InitRemainingQty;
    END;

    LOCAL PROCEDURE TransAvailAsmLinesToAsmLines@33(FromAsmHeader@1002 : Record 900;VAR ToAsmHeader@1001 : Record 900;VAR ToAsmLine@1000 : Record 901;InitQtyConsumed@1006 : Boolean) : Boolean;
    VAR
      FromAsmLine@1003 : Record 901;
      ShowAsmWarning@1005 : Boolean;
    BEGIN
      FromAsmLine.SETRANGE("Document Type",FromAsmHeader."Document Type");
      FromAsmLine.SETRANGE("Document No.",FromAsmHeader."No.");
      FromAsmLine.SETRANGE(Type,FromAsmLine.Type::Item);
      IF FromAsmLine.FIND('-') THEN
        REPEAT
          ToAsmLine := FromAsmLine;
          IF InitQtyConsumed THEN BEGIN
            ToAsmLine."Consumed Quantity" := 0;
            ToAsmLine."Consumed Quantity (Base)" := 0;
          END;
          TransAvailAsmHeaderToAsmLine(ToAsmLine,ToAsmHeader);
          UpdateAsmLineQty(ToAsmLine,ToAsmHeader."Qty. per Unit of Measure" * ToAsmHeader."Remaining Quantity");

          IF ToAsmLine.UpdateAvailWarning THEN
            ShowAsmWarning := TRUE;
          ToAsmLine.INSERT;
        UNTIL FromAsmLine.NEXT = 0;

      EXIT(ShowAsmWarning);
    END;

    LOCAL PROCEDURE TransAvailBOMCompToAsmLines@34(VAR ToAsmHeader@1001 : Record 900;VAR ToAsmLine@1000 : Record 901) : Boolean;
    VAR
      BOMComponent@1004 : Record 90;
      ShowAsmWarning@1002 : Boolean;
    BEGIN
      BOMComponent.SETRANGE("Parent Item No.",ToAsmHeader."Item No.");
      BOMComponent.SETRANGE(Type,BOMComponent.Type::Item);
      IF BOMComponent.FIND('-') THEN
        REPEAT
          ToAsmLine.INIT;
          ToAsmLine."Line No." += 10000;
          TransAvailAsmHeaderToAsmLine(ToAsmLine,ToAsmHeader);
          TransAvailBOMCompToAsmLine(ToAsmLine,BOMComponent);
          UpdateAsmLineQty(ToAsmLine,ToAsmHeader."Qty. per Unit of Measure" * ToAsmHeader."Remaining Quantity");

          IF ToAsmLine.UpdateAvailWarning THEN
            ShowAsmWarning := TRUE;
          ToAsmLine.INSERT;
        UNTIL BOMComponent.NEXT = 0;

      EXIT(ShowAsmWarning);
    END;

    LOCAL PROCEDURE TransAvailPstdAsmLnsToAsmLns@35(FromPostedAsmHeader@1003 : Record 910;VAR ToAsmHeader@1002 : Record 900;VAR ToAsmLine@1001 : Record 901) : Boolean;
    VAR
      FromPostedAsmLine@1004 : Record 911;
      ShowAsmWarning@1000 : Boolean;
    BEGIN
      FromPostedAsmLine.SETRANGE("Document No.",FromPostedAsmHeader."No.");
      FromPostedAsmLine.SETRANGE(Type,FromPostedAsmLine.Type::Item);
      IF FromPostedAsmLine.FIND('-') THEN
        REPEAT
          ToAsmLine.TRANSFERFIELDS(FromPostedAsmLine);
          TransAvailAsmHeaderToAsmLine(ToAsmLine,ToAsmHeader);
          UpdateAsmLineQty(ToAsmLine,ToAsmHeader."Qty. per Unit of Measure" * ToAsmHeader."Remaining Quantity");

          IF ToAsmLine.UpdateAvailWarning THEN
            ShowAsmWarning := TRUE;
          ToAsmLine.INSERT;
        UNTIL FromPostedAsmLine.NEXT = 0;

      EXIT(ShowAsmWarning);
    END;

    LOCAL PROCEDURE TransAvailAsmHeaderToAsmLine@26(VAR AsmLine@1000 : Record 901;VAR NewAsmHeader@1001 : Record 900);
    BEGIN
      AsmLine."Document Type" := NewAsmHeader."Document Type";
      AsmLine."Document No." := NewAsmHeader."No.";

      IF NewAsmHeader."Location Code" <> AsmHeader."Location Code" THEN BEGIN
        AsmLine."Location Code" := NewAsmHeader."Location Code";
        IF AsmLine.Type = AsmLine.Type::Item THEN
          AsmLine."Bin Code" := AsmLine.FindBin;
      END;
      IF NewAsmHeader."Due Date" <> AsmHeader."Due Date" THEN
        AsmLine."Due Date" := NewAsmHeader."Starting Date";
    END;

    LOCAL PROCEDURE TransAvailBOMCompToAsmLine@30(VAR AsmLine@1002 : Record 901;BOMComponent@1003 : Record 90);
    VAR
      ItemUOM@1000 : Record 5404;
    BEGIN
      AsmLine.Type := AsmLine.Type::Item;
      AsmLine."No." := BOMComponent."No.";
      AsmLine."Variant Code" := BOMComponent."Variant Code";
      AsmLine."Quantity per" := BOMComponent."Quantity per";
      AsmLine."Unit of Measure Code" := BOMComponent."Unit of Measure Code";
      IF NOT ItemUOM.GET(BOMComponent."No.",BOMComponent."Unit of Measure Code") THEN
        ItemUOM.INIT;
      AsmLine."Qty. per Unit of Measure" := ItemUOM."Qty. per Unit of Measure";
    END;

    LOCAL PROCEDURE UpdateAsmLineQty@31(VAR AsmLine@1000 : Record 901;QtyFactor@1001 : Decimal);
    BEGIN
      AsmLine.Quantity := AsmLine."Quantity per" * QtyFactor;
      AsmHeader.RoundQty(AsmLine.Quantity);
      AsmLine."Quantity (Base)" := ROUND(AsmLine.Quantity * AsmLine."Qty. per Unit of Measure",0.00001);
      AsmLine.InitRemainingQty;
    END;

    PROCEDURE AsmExistsForSalesLine@14(SalesLine@1000 : Record 37) : Boolean;
    BEGIN
      RESET;
      SETCURRENTKEY(Type,"Document Type","Document No.","Document Line No.");
      SETRANGE(Type,Type::Sale);
      SETRANGE("Document Type",SalesLine."Document Type");
      SETRANGE("Document No.",SalesLine."Document No.");
      SETRANGE("Document Line No.",SalesLine."Line No.");
      EXIT(FINDFIRST);
    END;

    PROCEDURE AsmExistsForWhseShptLine@58(WhseShptLine@1000 : Record 7321) : Boolean;
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      WhseShptLine.TESTFIELD("Assemble to Order",TRUE);
      WhseShptLine.TESTFIELD("Source Type",DATABASE::"Sales Line");
      SalesLine.GET(WhseShptLine."Source Subtype",WhseShptLine."Source No.",WhseShptLine."Source Line No.");
      EXIT(AsmExistsForSalesLine(SalesLine));
    END;

    LOCAL PROCEDURE AsmExistsForInvtPickLine@70(InvtPickWhseActivityLine@1000 : Record 5767) : Boolean;
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      InvtPickWhseActivityLine.TESTFIELD("Assemble to Order",TRUE);
      InvtPickWhseActivityLine.TESTFIELD("Source Type",DATABASE::"Sales Line");
      InvtPickWhseActivityLine.TESTFIELD("Activity Type",InvtPickWhseActivityLine."Activity Type"::"Invt. Pick");
      SalesLine.GET(
        InvtPickWhseActivityLine."Source Subtype",InvtPickWhseActivityLine."Source No.",InvtPickWhseActivityLine."Source Line No.");
      EXIT(AsmExistsForSalesLine(SalesLine));
    END;

    LOCAL PROCEDURE GetAsmHeader@19() : Boolean;
    BEGIN
      IF (AsmHeader."Document Type" = "Assembly Document Type") AND
         (AsmHeader."No." = "Assembly Document No.")
      THEN
        EXIT(TRUE);
      EXIT(AsmHeader.GET("Assembly Document Type","Assembly Document No."));
    END;

    LOCAL PROCEDURE GetATOLink@43(AssemblyHeader@1000 : Record 900) LinkFound : Boolean;
    BEGIN
      LinkFound := GET(AssemblyHeader."Document Type",AssemblyHeader."No.");
      IF LinkFound THEN
        TESTFIELD(Type,Type::Sale);
    END;

    LOCAL PROCEDURE GetMin@52(a@1000 : Decimal;b@1001 : Decimal) : Decimal;
    BEGIN
      IF a < b THEN
        EXIT(a);
      EXIT(b);
    END;

    LOCAL PROCEDURE GetMax@49(a@1001 : Decimal;b@1000 : Decimal) : Decimal;
    BEGIN
      IF a > b THEN
        EXIT(a);
      EXIT(b);
    END;

    LOCAL PROCEDURE MaxQtyToAsm@44(SalesLine@1000 : Record 37;AssemblyHeader@1001 : Record 900) : Decimal;
    BEGIN
      EXIT(GetMin(SalesLine."Qty. to Ship",AssemblyHeader."Remaining Quantity"));
    END;

    LOCAL PROCEDURE MaxQtyToAsmBase@50(SalesLine@1000 : Record 37;AssemblyHeader@1001 : Record 900) : Decimal;
    BEGIN
      EXIT(GetMin(SalesLine."Qty. to Ship (Base)",AssemblyHeader."Remaining Quantity (Base)"));
    END;

    LOCAL PROCEDURE MinQtyToAsm@45(SalesLine@1002 : Record 37;AssemblyHeader@1001 : Record 900) : Decimal;
    VAR
      UnshippedNonATOQty@1003 : Decimal;
    BEGIN
      UnshippedNonATOQty := SalesLine."Outstanding Quantity" - AssemblyHeader."Remaining Quantity";
      EXIT(GetMax(SalesLine."Qty. to Ship" - UnshippedNonATOQty,0));
    END;

    PROCEDURE CheckQtyToAsm@47(AssemblyHeader@1000 : Record 900);
    VAR
      SalesLine@1001 : Record 37;
      Location@1007 : Record 14;
      WhseActivityLine@1009 : Record 5767;
      WhseShptLine@1004 : Record 7321;
      WMSMgt@1006 : Codeunit 7302;
      MaxQty@1002 : Decimal;
      MinQty@1003 : Decimal;
    BEGIN
      IF GetATOLink(AssemblyHeader) THEN BEGIN
        SalesLine.GET("Document Type","Document No.","Document Line No.");

        IF Location.GET(AssemblyHeader."Location Code") THEN
          IF Location."Require Shipment" THEN BEGIN
            AssemblyHeader.CALCFIELDS("Assemble to Order");
            IF WMSMgt.ATOWhseShptExists(SalesLine) THEN
              ERROR(
                Text007,WhseShptLine.TABLECAPTION,AssemblyHeader."Document Type",AssemblyHeader.FIELDCAPTION("Quantity to Assemble"),
                WhseShptLine.FIELDCAPTION("Qty. to Ship"));
          END ELSE BEGIN
            IF Location."Require Pick" THEN
              IF WMSMgt.ATOInvtPickExists(SalesLine) THEN
                ERROR(Text005,WhseActivityLine."Activity Type"::"Invt. Pick",AssemblyHeader."Document Type");
          END;

        MinQty := MinQtyToAsm(SalesLine,AssemblyHeader);
        MaxQty := MaxQtyToAsm(SalesLine,AssemblyHeader);
        IF (AssemblyHeader."Quantity to Assemble" < MinQty) OR (AssemblyHeader."Quantity to Assemble" > MaxQty) THEN
          ERROR(
            Text004,AssemblyHeader.FIELDCAPTION("Quantity to Assemble"),MinQty,MaxQty,SalesLine.FIELDCAPTION("Qty. to Ship"),
            SalesLine.TABLECAPTION);
      END;
    END;

    PROCEDURE InitQtyToAsm@48(AssemblyHeader@1000 : Record 900;VAR QtyToAsm@1002 : Decimal;VAR QtyToAsmBase@1003 : Decimal);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      IF GetATOLink(AssemblyHeader) THEN BEGIN
        SalesLine.GET("Document Type","Document No.","Document Line No.");
        QtyToAsm := MaxQtyToAsm(SalesLine,AssemblyHeader);
        QtyToAsmBase := MaxQtyToAsmBase(SalesLine,AssemblyHeader);
      END;
    END;

    LOCAL PROCEDURE AsmReopenIfReleased@54();
    VAR
      ItemCheckAvail@1000 : Codeunit 311;
      ReleaseAssemblyDoc@1001 : Codeunit 903;
    BEGIN
      IF AsmHeader.Status <> AsmHeader.Status::Released THEN
        EXIT;
      IF NOT CONFIRM(Text006,FALSE,AsmHeader.Status::Open) THEN
        ItemCheckAvail.RaiseUpdateInterruptedError;
      ReleaseAssemblyDoc.Reopen(AsmHeader);
    END;

    LOCAL PROCEDURE GetWindowOpenTextSale@59(SalesLine@1000 : Record 37) : Text;
    BEGIN
      EXIT(STRSUBSTNO(Text000,
          SalesLine.TABLECAPTION,
          ConstructKeyTextSalesLine(SalesLine),
          AsmHeader.TABLECAPTION,
          ConstructKeyTextAsmHeader));
    END;

    LOCAL PROCEDURE GetWindowOpenTextWhseShpt@62(WhseShptLine@1000 : Record 7321) : Text;
    BEGIN
      EXIT(STRSUBSTNO(Text000,
          WhseShptLine.TABLECAPTION,
          ConstructKeyTextWhseShptLine(WhseShptLine),
          AsmHeader.TABLECAPTION,
          ConstructKeyTextAsmHeader));
    END;

    LOCAL PROCEDURE GetWindowOpenTextInvtPick@68(InvtPickWhseActivityLine@1000 : Record 5767) : Text;
    BEGIN
      EXIT(STRSUBSTNO(Text000,
          InvtPickWhseActivityLine.TABLECAPTION,
          ConstructKeyTextInvtPickLine(InvtPickWhseActivityLine),
          AsmHeader.TABLECAPTION,
          ConstructKeyTextAsmHeader));
    END;

    LOCAL PROCEDURE ConstructKeyTextAsmHeader@63() : Text;
    VAR
      DocTypeText@1000 : Text;
      DocNoText@1001 : Text;
    BEGIN
      DocTypeText := STRSUBSTNO(Text008,AsmHeader.FIELDCAPTION("Document Type"),AsmHeader."Document Type");
      DocNoText := STRSUBSTNO(Text008,AsmHeader.FIELDCAPTION("No."),AsmHeader."No.");
      EXIT(STRSUBSTNO(Text008,DocTypeText,DocNoText));
    END;

    LOCAL PROCEDURE ConstructKeyTextSalesLine@64(SalesLine@1000 : Record 37) : Text;
    VAR
      DocTypeText@1002 : Text;
      DocNoText@1001 : Text;
      LineNoText@1003 : Text;
    BEGIN
      DocTypeText := STRSUBSTNO(Text008,SalesLine.FIELDCAPTION("Document Type"),SalesLine."Document Type");
      DocNoText := STRSUBSTNO(Text008,SalesLine.FIELDCAPTION("Document No."),SalesLine."Document No.");
      LineNoText := STRSUBSTNO(Text008,SalesLine.FIELDCAPTION("Line No."),SalesLine."Line No.");
      EXIT(STRSUBSTNO(Text008,STRSUBSTNO(Text008,DocTypeText,DocNoText),LineNoText));
    END;

    LOCAL PROCEDURE ConstructKeyTextWhseShptLine@65(WhseShptLine@1000 : Record 7321) : Text;
    VAR
      NoText@1001 : Text;
      LineNoText@1002 : Text;
    BEGIN
      NoText := STRSUBSTNO(Text008,WhseShptLine.FIELDCAPTION("No."),WhseShptLine."No.");
      LineNoText := STRSUBSTNO(Text008,WhseShptLine.FIELDCAPTION("Line No."),WhseShptLine."Line No.");
      EXIT(STRSUBSTNO(Text008,NoText,LineNoText));
    END;

    LOCAL PROCEDURE ConstructKeyTextInvtPickLine@69(InvtPickWhseActivityLine@1000 : Record 5767) : Text;
    VAR
      ActTypeText@1001 : Text;
      NoText@1002 : Text;
      LineNoText@1003 : Text;
    BEGIN
      ActTypeText :=
        STRSUBSTNO(Text008,InvtPickWhseActivityLine.FIELDCAPTION("Activity Type"),InvtPickWhseActivityLine."Activity Type");
      NoText := STRSUBSTNO(Text008,InvtPickWhseActivityLine.FIELDCAPTION("No."),InvtPickWhseActivityLine."No.");
      LineNoText := STRSUBSTNO(Text008,InvtPickWhseActivityLine.FIELDCAPTION("Line No."),InvtPickWhseActivityLine."Line No.");
      EXIT(STRSUBSTNO(Text008,STRSUBSTNO(Text008,ActTypeText,NoText),LineNoText));
    END;

    PROCEDURE ShowAsmOrders@61(SalesHeader@1000 : Record 36);
    VAR
      AssembleToOrderLink@1002 : Record 904;
      AssemblyHeader@1003 : Record 900;
      TempAssemblyHeader@1001 : TEMPORARY Record 900;
    BEGIN
      TempAssemblyHeader.DELETEALL;
      WITH AssembleToOrderLink DO BEGIN
        SETCURRENTKEY(Type,"Document Type","Document No.","Document Line No.");
        SETRANGE(Type,Type::Sale);
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        IF FINDSET THEN
          REPEAT
            IF NOT TempAssemblyHeader.GET("Assembly Document Type","Assembly Document No.") THEN
              IF AssemblyHeader.GET("Assembly Document Type","Assembly Document No.") THEN BEGIN
                TempAssemblyHeader := AssemblyHeader;
                TempAssemblyHeader.INSERT;
              END;
          UNTIL NEXT = 0;
      END;
      PAGE.RUN(PAGE::"Assembly Orders",TempAssemblyHeader);
    END;

    LOCAL PROCEDURE RecalcAutoReserve@67(AsmHeader@1000 : Record 900);
    VAR
      AssemblyLine@1001 : Record 901;
    BEGIN
      AssemblyLine.SETRANGE("Document Type",AsmHeader."Document Type");
      AssemblyLine.SETRANGE("Document No.",AsmHeader."No.");
      IF AssemblyLine.FINDSET THEN
        REPEAT
          AsmHeader.AutoReserveAsmLine(AssemblyLine);
        UNTIL AssemblyLine.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

