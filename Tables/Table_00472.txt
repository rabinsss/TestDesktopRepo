OBJECT Table 472 Job Queue Entry
{
  OBJECT-PROPERTIES
  {
    Date=01/29/16;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.44974;
  }
  PROPERTIES
  {
    DataCaptionFields=Object Type to Run,Object ID to Run,Object Caption to Run;
    OnInsert=BEGIN
               SetDefaultValues;
             END;

    OnModify=BEGIN
               SetDefaultValues;
             END;

    OnDelete=BEGIN
               IF Status = Status::"In Process" THEN
                 ERROR(Text002,Status);
             END;

    CaptionML=[ENU=Job Queue Entry;
               ESM=Mov. cola proyecto;
               FRC=êcriture file d'attente des travaux;
               ENC=Job Queue Entry];
    LookupPageID=Page672;
    DrillDownPageID=Page672;
  }
  FIELDS
  {
    { 1   ;   ;ID                  ;GUID          ;CaptionML=[ENU=ID;
                                                              ESM=Id.;
                                                              FRC=Code;
                                                              ENC=ID] }
    { 2   ;   ;User ID             ;Text65        ;TableRelation=User."User Name";
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=User ID;
                                                              ESM=Id. usuario;
                                                              FRC=Code utilisateur;
                                                              ENC=User ID];
                                                   Editable=No }
    { 3   ;   ;XML                 ;BLOB          ;CaptionML=[ENU=XML;
                                                              ESM=XML;
                                                              FRC=XML;
                                                              ENC=XML] }
    { 4   ;   ;Last Ready State    ;DateTime      ;CaptionML=[ENU=Last Ready State;
                                                              ESM=Èltimo estado Preparado;
                                                              FRC=Dernier Çtat pràt;
                                                              ENC=Last Ready Province/State];
                                                   Editable=No }
    { 5   ;   ;Expiration Date/Time;DateTime      ;OnValidate=BEGIN
                                                                CheckStartAndExpirationDateTime;
                                                              END;

                                                   OnLookup=BEGIN
                                                              VALIDATE("Expiration Date/Time",LookupDateTime("Expiration Date/Time","Earliest Start Date/Time",0DT));
                                                            END;

                                                   CaptionML=[ENU=Expiration Date/Time;
                                                              ESM=Fecha/hora caducidad;
                                                              FRC=Date/heure d'expiration;
                                                              ENC=Expiration Date/Time] }
    { 6   ;   ;Earliest Start Date/Time;DateTime  ;OnValidate=BEGIN
                                                                CheckStartAndExpirationDateTime;
                                                              END;

                                                   OnLookup=BEGIN
                                                              VALIDATE("Earliest Start Date/Time",LookupDateTime("Earliest Start Date/Time",0DT,"Expiration Date/Time"));
                                                            END;

                                                   CaptionML=[ENU=Earliest Start Date/Time;
                                                              ESM=Primera fecha/hora inicio;
                                                              FRC=Premiäre date/heure de dÇbut;
                                                              ENC=Earliest Start Date/Time] }
    { 7   ;   ;Object Type to Run  ;Option        ;InitValue=Report;
                                                   OnValidate=BEGIN
                                                                IF "Object Type to Run" <> xRec."Object Type to Run" THEN
                                                                  VALIDATE("Object ID to Run",0);
                                                              END;

                                                   CaptionML=[ENU=Object Type to Run;
                                                              ESM=Tipo objeto para ejecutar;
                                                              FRC=Type d'objet Ö exÇcuter;
                                                              ENC=Object Type to Run];
                                                   OptionCaptionML=[ENU=,,,Report,,Codeunit;
                                                                    ESM=,,,Informe,,M¢dulo;
                                                                    FRC=,,,Rapport,,Codeunit;
                                                                    ENC=,,,Report,,Codeunit];
                                                   OptionString=,,,Report,,Codeunit }
    { 8   ;   ;Object ID to Run    ;Integer       ;TableRelation=AllObjWithCaption."Object ID" WHERE (Object Type=FIELD(Object Type to Run));
                                                   OnValidate=VAR
                                                                Object@1000 : Record 2000000001;
                                                              BEGIN
                                                                IF "Object ID to Run" <> xRec."Object ID to Run" THEN BEGIN
                                                                  CLEAR(XML);
                                                                  CLEAR(Description);
                                                                  CLEAR("Parameter String");
                                                                  CLEAR("Report Request Page Options");
                                                                END;
                                                                IF "Object ID to Run" = 0 THEN
                                                                  EXIT;
                                                                IF Object.GET("Object Type to Run",'',"Object ID to Run") THEN
                                                                  Object.TESTFIELD(Compiled);

                                                                CALCFIELDS("Object Caption to Run");
                                                                IF Description = '' THEN
                                                                  Description := COPYSTR("Object Caption to Run",1,MAXSTRLEN(Description));

                                                                IF "Object Type to Run" <> "Object Type to Run"::Report THEN
                                                                  EXIT;
                                                                IF REPORT.DEFAULTLAYOUT("Object ID to Run") = DEFAULTLAYOUT::None THEN // Processing-only
                                                                  "Report Output Type" := "Report Output Type"::"None (Processing only)"
                                                                ELSE BEGIN
                                                                  "Report Output Type" := "Report Output Type"::PDF;
                                                                  IF REPORT.DEFAULTLAYOUT("Object ID to Run") = DEFAULTLAYOUT::Word THEN
                                                                    "Report Output Type" := "Report Output Type"::Word;
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              NewObjectID@1000 : Integer;
                                                            BEGIN
                                                              IF LookupObjectID(NewObjectID) THEN
                                                                VALIDATE("Object ID to Run",NewObjectID);
                                                            END;

                                                   CaptionML=[ENU=Object ID to Run;
                                                              ESM=Id. objeto para ejecutar;
                                                              FRC=Code d'objet Ö exÇcuter;
                                                              ENC=Object ID to Run] }
    { 9   ;   ;Object Caption to Run;Text250      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObjWithCaption."Object Caption" WHERE (Object Type=FIELD(Object Type to Run),
                                                                                                                Object ID=FIELD(Object ID to Run)));
                                                   CaptionML=[ENU=Object Caption to Run;
                                                              ESM=T°tulo objeto para ejecutar;
                                                              FRC=LÇgende de l'objet Ö exÇcuter;
                                                              ENC=Object Caption to Run];
                                                   Editable=No }
    { 10  ;   ;Report Output Type  ;Option        ;OnValidate=VAR
                                                                ReportLayoutSelection@1000 : Record 9651;
                                                                InitServerPrinterTable@1001 : Codeunit 9655;
                                                              BEGIN
                                                                TESTFIELD("Object Type to Run","Object Type to Run"::Report);

                                                                IF REPORT.DEFAULTLAYOUT("Object ID to Run") = DEFAULTLAYOUT::None THEN // Processing-only
                                                                  TESTFIELD("Report Output Type","Report Output Type"::"None (Processing only)")
                                                                ELSE BEGIN
                                                                  IF "Report Output Type" = "Report Output Type"::"None (Processing only)" THEN
                                                                    FIELDERROR("Report Output Type");
                                                                  IF ReportLayoutSelection.HasCustomLayout("Object ID to Run") = 2 THEN // Word layout
                                                                    IF NOT ("Report Output Type" IN ["Report Output Type"::Print,"Report Output Type"::Word]) THEN
                                                                      FIELDERROR("Report Output Type");
                                                                END;
                                                                IF "Report Output Type" = "Report Output Type"::Print THEN
                                                                  "Printer Name" := InitServerPrinterTable.FindClosestMatchToClientDefaultPrinter("Object ID to Run")
                                                                ELSE
                                                                  "Printer Name" := '';
                                                              END;

                                                   CaptionML=[ENU=Report Output Type;
                                                              ESM=Tipo de salida de informe;
                                                              FRC=Type sortie rapport;
                                                              ENC=Report Output Type];
                                                   OptionCaptionML=[ENU=PDF,Word,Excel,Print,None (Processing only);
                                                                    ESM=PDF,Word,Excel,Imprimir,Ninguno (solo procesamiento);
                                                                    FRC=PDF,Word,Excel,Impression,Aucun (Traitement uniquement);
                                                                    ENC=PDF,Word,Excel,Print,None (Processing only)];
                                                   OptionString=PDF,Word,Excel,Print,None (Processing only) }
    { 11  ;   ;Maximum No. of Attempts to Run;Integer;
                                                   CaptionML=[ENU=Maximum No. of Attempts to Run;
                                                              ESM=Nß m†x. intentos ejecuci¢n;
                                                              FRC=Nombre maximal de tentatives d'exÇcution;
                                                              ENC=Maximum No. of Attempts to Run] }
    { 13  ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              ESM=Estado;
                                                              FRC=êtat;
                                                              ENC=Status];
                                                   OptionCaptionML=[ENU=Ready,In Process,Error,On Hold,Finished;
                                                                    ESM=Listo,En proceso,Error,En espera,Finalizado;
                                                                    FRC=Pràt,En cours,Erreur,En attente,TerminÇ;
                                                                    ENC=Ready,In Process,Error,On Hold,Finished];
                                                   OptionString=Ready,In Process,Error,On Hold,Finished;
                                                   Editable=No }
    { 14  ;   ;Priority            ;Integer       ;InitValue=1000;
                                                   CaptionML=[ENU=Priority;
                                                              ESM=Prioridad;
                                                              FRC=PrioritÇ;
                                                              ENC=Priority] }
    { 15  ;   ;Record ID to Process;RecordID      ;CaptionML=[ENU=Record ID to Process;
                                                              ESM=Id. registro que procesar;
                                                              FRC=Code d'enregistrement Ö traiter;
                                                              ENC=Record ID to Process] }
    { 16  ;   ;Parameter String    ;Text250       ;CaptionML=[ENU=Parameter String;
                                                              ESM=Cadena par†metros;
                                                              FRC=Chaåne de paramätre;
                                                              ENC=Parameter String] }
    { 17  ;   ;Recurring Job       ;Boolean       ;CaptionML=[ENU=Recurring Job;
                                                              ESM=Proyecto peri¢dico;
                                                              FRC=Projet rÇcurrent;
                                                              ENC=Recurring Job] }
    { 18  ;   ;No. of Minutes between Runs;Integer;OnValidate=BEGIN
                                                                SetRecurringField;
                                                              END;

                                                   CaptionML=[ENU=No. of Minutes between Runs;
                                                              ESM=Minutos entre ejecuciones;
                                                              FRC=Nombre de minutes entre les exÇcutions;
                                                              ENC=No. of Minutes between Runs] }
    { 19  ;   ;Run on Mondays      ;Boolean       ;OnValidate=BEGIN
                                                                SetRecurringField;
                                                              END;

                                                   CaptionML=[ENU=Run on Mondays;
                                                              ESM=Ejecutar en lunes;
                                                              FRC=ExÇcuter les lundis;
                                                              ENC=Run on Mondays] }
    { 20  ;   ;Run on Tuesdays     ;Boolean       ;OnValidate=BEGIN
                                                                SetRecurringField;
                                                              END;

                                                   CaptionML=[ENU=Run on Tuesdays;
                                                              ESM=Ejecutar en martes;
                                                              FRC=ExÇcuter les mardis;
                                                              ENC=Run on Tuesdays] }
    { 21  ;   ;Run on Wednesdays   ;Boolean       ;OnValidate=BEGIN
                                                                SetRecurringField;
                                                              END;

                                                   CaptionML=[ENU=Run on Wednesdays;
                                                              ESM=Ejecutar en miÇrcoles;
                                                              FRC=ExÇcuter les mercredis;
                                                              ENC=Run on Wednesdays] }
    { 22  ;   ;Run on Thursdays    ;Boolean       ;OnValidate=BEGIN
                                                                SetRecurringField;
                                                              END;

                                                   CaptionML=[ENU=Run on Thursdays;
                                                              ESM=Ejecutar en jueves;
                                                              FRC=ExÇcuter les jeudis;
                                                              ENC=Run on Thursdays] }
    { 23  ;   ;Run on Fridays      ;Boolean       ;OnValidate=BEGIN
                                                                SetRecurringField;
                                                              END;

                                                   CaptionML=[ENU=Run on Fridays;
                                                              ESM=Ejecutar en viernes;
                                                              FRC=ExÇcuter les vendredis;
                                                              ENC=Run on Fridays] }
    { 24  ;   ;Run on Saturdays    ;Boolean       ;OnValidate=BEGIN
                                                                SetRecurringField;
                                                              END;

                                                   CaptionML=[ENU=Run on Saturdays;
                                                              ESM=Ejecutar en s†bado;
                                                              FRC=ExÇcuter les samedis;
                                                              ENC=Run on Saturdays] }
    { 25  ;   ;Run on Sundays      ;Boolean       ;OnValidate=BEGIN
                                                                SetRecurringField;
                                                              END;

                                                   CaptionML=[ENU=Run on Sundays;
                                                              ESM=Ejecutar en domingo;
                                                              FRC=ExÇcuter les dimanches;
                                                              ENC=Run on Sundays] }
    { 26  ;   ;Starting Time       ;Time          ;OnValidate=BEGIN
                                                                TESTFIELD("Recurring Job");
                                                                IF "Starting Time" = 0T THEN
                                                                  "Reference Starting Time" := 0DT
                                                                ELSE
                                                                  "Reference Starting Time" := CREATEDATETIME(010100D,"Starting Time");
                                                              END;

                                                   CaptionML=[ENU=Starting Time;
                                                              ESM=Hora inicial;
                                                              FRC=Heure dÇbut;
                                                              ENC=Starting Time] }
    { 27  ;   ;Ending Time         ;Time          ;OnValidate=BEGIN
                                                                TESTFIELD("Recurring Job");
                                                              END;

                                                   CaptionML=[ENU=Ending Time;
                                                              ESM=Hora final;
                                                              FRC=Heure fin;
                                                              ENC=Ending Time] }
    { 28  ;   ;Reference Starting Time;DateTime   ;OnValidate=BEGIN
                                                                "Starting Time" := DT2TIME("Reference Starting Time");
                                                              END;

                                                   CaptionML=[ENU=Reference Starting Time;
                                                              ESM=Hora inicial de referencia;
                                                              FRC=Heure de dÇbut de rÇfÇrence;
                                                              ENC=Reference Starting Time];
                                                   Editable=No }
    { 30  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ESM=Descripci¢n;
                                                              FRC=Description;
                                                              ENC=Description] }
    { 31  ;   ;Run in User Session ;Boolean       ;CaptionML=[ENU=Run in User Session;
                                                              ESM=Ejecutar en sesi¢n de usuario;
                                                              FRC=ExÇcuter dans la session utilisateur;
                                                              ENC=Run in User Session];
                                                   Editable=No }
    { 32  ;   ;User Session ID     ;Integer       ;CaptionML=[ENU=User Session ID;
                                                              ESM=Id. sesi¢n de usuario;
                                                              FRC=Code session utilisateur;
                                                              ENC=User Session ID] }
    { 33  ;   ;Job Queue Category Code;Code10     ;TableRelation="Job Queue Category";
                                                   CaptionML=[ENU=Job Queue Category Code;
                                                              ESM=C¢d. categor°a cola proyectos;
                                                              FRC=Code catÇgorie de la file d'attente des travaux;
                                                              ENC=Job Queue Category Code] }
    { 34  ;   ;Error Message       ;Text250       ;CaptionML=[ENU=Error Message;
                                                              ESM=Mensaje de error;
                                                              FRC=Message d'erreur;
                                                              ENC=Error Message] }
    { 35  ;   ;Error Message 2     ;Text250       ;CaptionML=[ENU=Error Message 2;
                                                              ESM=Mensaje de error 2;
                                                              FRC=Message d'erreur 2;
                                                              ENC=Error Message 2] }
    { 36  ;   ;Error Message 3     ;Text250       ;CaptionML=[ENU=Error Message 3;
                                                              ESM=Mensaje de error 3;
                                                              FRC=Message d'erreur 3;
                                                              ENC=Error Message 3] }
    { 37  ;   ;Error Message 4     ;Text250       ;CaptionML=[ENU=Error Message 4;
                                                              ESM=Mensaje de error 4;
                                                              FRC=Message d'erreur 4;
                                                              ENC=Error Message 4] }
    { 40  ;   ;User Service Instance ID;Integer   ;CaptionML=[ENU=User Service Instance ID;
                                                              ESM=Id. de instancia de servicio de usuario;
                                                              FRC=Code instance service utilisateur;
                                                              ENC=User Service Instance ID] }
    { 41  ;   ;User Session Started;DateTime      ;CaptionML=[ENU=User Session Started;
                                                              ESM=Sesi¢n de usuario iniciada;
                                                              FRC=Session utilisateur dÇmarrÇe;
                                                              ENC=User Session Started];
                                                   Editable=No }
    { 42  ;   ;Timeout (sec.)      ;Integer       ;CaptionML=[ENU=Timeout (sec.);
                                                              ESM=Tiempo de espera (segundos);
                                                              FRC=DÇlai d'expiration (sec.);
                                                              ENC=Timeout (sec.)];
                                                   MinValue=0 }
    { 43  ;   ;Notify On Success   ;Boolean       ;CaptionML=[ENU=Notify On Success;
                                                              ESM=Notificar operaci¢n correcta;
                                                              FRC=Notification si rÇussite;
                                                              ENC=Notify On Success] }
    { 44  ;   ;User Language ID    ;Integer       ;CaptionML=[ENU=User Language ID;
                                                              ESM=Id. idioma de usuario;
                                                              FRC=Code langue utilisateur;
                                                              ENC=User Language ID] }
    { 45  ;   ;Printer Name        ;Text250       ;OnValidate=VAR
                                                                InitServerPrinterTable@1000 : Codeunit 9655;
                                                              BEGIN
                                                                TESTFIELD("Report Output Type","Report Output Type"::Print);
                                                                IF "Printer Name" = '' THEN
                                                                  EXIT;
                                                                InitServerPrinterTable.ValidatePrinterName("Printer Name");
                                                              END;

                                                   OnLookup=VAR
                                                              Printer@1001 : Record 2000000039;
                                                              ServerPrinters@1000 : Page 683;
                                                            BEGIN
                                                              ServerPrinters.SetSelectedPrinterName("Printer Name");
                                                              IF ServerPrinters.RUNMODAL = ACTION::OK THEN BEGIN
                                                                ServerPrinters.GETRECORD(Printer);
                                                                "Printer Name" := Printer.ID;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Printer Name;
                                                              ESM=Nombre impresora;
                                                              FRC=Nom de l'imprimante;
                                                              ENC=Printer Name] }
    { 46  ;   ;Report Request Page Options;Boolean;OnValidate=BEGIN
                                                                IF "Report Request Page Options" THEN
                                                                  RunReportRequestPage
                                                                ELSE BEGIN
                                                                  CLEAR(XML);
                                                                  MESSAGE(RequestPagesOptionsDeletedMsg);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Report Request Page Options;
                                                              ESM=Opciones de la p†gina de solicitud de informe;
                                                              FRC=Options page requàte rapport;
                                                              ENC=Report Request Page Options] }
    { 47  ;   ;Rerun Delay (sec.)  ;Integer       ;CaptionML=[ENU=Rerun Delay (sec.);
                                                              ESM=Volver a ejecutar retraso (seg.);
                                                              FRC=DÇlai de rÇexÇcution (sec.);
                                                              ENC=Rerun Delay (sec.)];
                                                   MinValue=0;
                                                   MaxValue=3600 }
  }
  KEYS
  {
    {    ;ID                                      ;Clustered=Yes }
    {    ;Priority,Last Ready State                }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1000 : TextConst 'ENU=There is no error message.;ESM=No hay ning£n mensaje de error.;FRC=Absence de message d''erreur.;ENC=There is no error message.';
      Text002@1001 : TextConst '@@@=%1 is a status value, such as Success or Error.;ENU=You cannot delete an entry that has status %1.;ESM=No puede eliminar un movimiento con estado %1.;FRC=Vous ne pouvez pas supprimer une Çcriture dont l''Çtat est %1.;ENC=You cannot delete an entry that has status %1.';
      Text003@1002 : TextConst '@@@="%1=a date, %2 = a user.";ENU=Scheduled for posting on %1 by %2.;ESM=Programado para registro el %1 por %2.;FRC=ProgrammÇ pour report le %1 par %2.;ENC=Scheduled for posting on %1 by %2.';
      NoRecordErr@1003 : TextConst 'ENU=No record is associated with the job queue entry.;ESM=No hay registros asociados con la entrada de cola de proyecto.;FRC=Aucun enregistrement n''est associÇ Ö l''Çcriture de file d''attente des travaux.;ENC=No record is associated with the job queue entry.';
      RequestPagesOptionsDeletedMsg@1004 : TextConst 'ENU=You have cleared the report parameters. Select the check box in the field to show the report request page again.;ESM=Ha borrado los par†metros del informe. Active la casilla del campo para volver a mostrar la p†gina de solicitud de informe.;FRC=Vous avez effacÇ les paramätres du rapport. Activez le champ pour afficher Ö nouveau la page de sÇlection du rapport.;ENC=You have cleared the report parameters. Select the check box in the field to show the report request page again.';
      ExpiresBeforeStartErr@1005 : TextConst '@@@="%1 = Expiration Date, %2=Start date";ENU=%1 must be later than %2.;ESM=%1 debe ser posterior a %2.;FRC=%1 doit àtre ultÇrieur Ö %2.;ENC=%1 must be later than %2.';
      UserSessionJobsCannotBeRecurringErr@1006 : TextConst 'ENU=You cannot set up user session job queue entries to be recurring.;ESM=No se pueden configurar los movimientos de cola de proyectos de sesi¢n de usuario de modo que sean recurrentes.;FRC=Vous ne pouvez pas paramÇtrer la rÇcurrence des Çcritures de la file d''attente des travaux de session utilisateur.;ENC=You cannot set up user session job queue entries to be recurring.';

    PROCEDURE GetErrorMessage@1() : Text;
    BEGIN
      EXIT("Error Message" + "Error Message 2" + "Error Message 3" + "Error Message 4");
    END;

    PROCEDURE SetErrorMessage@2(ErrorText@1000 : Text);
    BEGIN
      "Error Message 2" := '';
      "Error Message 3" := '';
      "Error Message 4" := '';
      "Error Message" := COPYSTR(ErrorText,1,250);
      IF STRLEN(ErrorText) > 250 THEN
        "Error Message 2" := COPYSTR(ErrorText,251,250);
      IF STRLEN(ErrorText) > 500 THEN
        "Error Message 3" := COPYSTR(ErrorText,501,250);
      IF STRLEN(ErrorText) > 750 THEN
        "Error Message 4" := COPYSTR(ErrorText,751,250);
    END;

    PROCEDURE ShowErrorMessage@8();
    VAR
      e@1000 : Text;
    BEGIN
      e := GetErrorMessage;
      IF e = '' THEN
        e := Text001;
      MESSAGE('%1',e);
    END;

    PROCEDURE SetError@7(ErrorText@1000 : Text);
    BEGIN
      LOCKTABLE;
      GET(ID);
      SetErrorMessage(ErrorText);
      ClearServiceValues;
      SetStatusValue(Status::Error);
      MODIFY;
    END;

    PROCEDURE SetStatus@3(NewStatus@1000 : Option);
    BEGIN
      LOCKTABLE;
      GET(ID);
      ClearServiceValues;
      SetStatusValue(NewStatus);
      MODIFY;
    END;

    PROCEDURE Cancel@4();
    BEGIN
      LOCKTABLE;
      IF GET(ID) THEN
        DELETE(TRUE);
    END;

    PROCEDURE Restart@5();
    BEGIN
      TESTFIELD("User ID",USERID);
      LOCKTABLE;
      GET(ID);
      SetStatusValue(Status::Ready);
      ClearServiceValues;
      IF "Run in User Session" THEN
        STARTSESSION("User Session ID",CODEUNIT::"Job Queue User Session",COMPANYNAME,Rec);
      MODIFY;
    END;

    LOCAL PROCEDURE SetDefaultValues@6();
    BEGIN
      IF ISNULLGUID(ID) THEN
        ID := CREATEGUID;
      IF ("User ID" = '') OR ("Object Type to Run" <> xRec."Object Type to Run") OR ("Object ID to Run" <> xRec."Object ID to Run") OR
         ("Parameter String" <> xRec."Parameter String")
      THEN
        "User ID" := USERID;
      IF "Last Ready State" = 0DT THEN
        "Last Ready State" := CURRENTDATETIME;
      "User Language ID" := GLOBALLANGUAGE;
    END;

    LOCAL PROCEDURE ClearServiceValues@9();
    BEGIN
      "User Session Started" := 0DT;
      "User Service Instance ID" := 0;
      "User Session ID" := 0;
    END;

    PROCEDURE CleanupAfterExecution@11();
    BEGIN
      IF "Notify On Success" THEN
        CODEUNIT.RUN(CODEUNIT::"Job Queue - Send Notification",Rec);

      IF "Recurring Job" THEN BEGIN
        IF Status <> Status::"On Hold" THEN
          SetStatusValue(Status::Ready);
        ClearServiceValues;
        MODIFY;
      END ELSE
        DELETE;
    END;

    PROCEDURE HandleExecutionError@12();
    VAR
      JobQueueSendNotification@1000 : Codeunit 454;
    BEGIN
      SetStatusValue(Status::Error);
      MODIFY;
      COMMIT;
      IF JobQueueSendNotification.RUN(Rec) THEN;
    END;

    PROCEDURE GetTimeout@10() : Integer;
    BEGIN
      IF "Timeout (sec.)" > 0 THEN
        EXIT("Timeout (sec.)");
      EXIT(1000000000);
    END;

    LOCAL PROCEDURE SetRecurringField@13();
    BEGIN
      "Recurring Job" :=
        "Run on Mondays" OR
        "Run on Tuesdays" OR "Run on Wednesdays" OR "Run on Thursdays" OR "Run on Fridays" OR "Run on Saturdays" OR "Run on Sundays";

      IF "Recurring Job" AND "Run in User Session" THEN
        ERROR(UserSessionJobsCannotBeRecurringErr);
    END;

    LOCAL PROCEDURE SetStatusValue@14(NewStatus@1000 : Option);
    VAR
      JobQueueDispatcher@1001 : Codeunit 448;
    BEGIN
      IF (Status <> Status::Ready) AND (NewStatus = Status::Ready) THEN BEGIN
        "Last Ready State" := CURRENTDATETIME;
        "Earliest Start Date/Time" := JobQueueDispatcher.CalcInitialRunTime(Rec,CURRENTDATETIME);
      END;

      Status := NewStatus;
    END;

    PROCEDURE ShowStatusMsg@15(JQID@1000 : GUID);
    VAR
      JobQueueEntry@1001 : Record 472;
    BEGIN
      IF JobQueueEntry.GET(JQID) THEN
        CASE JobQueueEntry.Status OF
          JobQueueEntry.Status::Error:
            MESSAGE(JobQueueEntry.GetErrorMessage);
          JobQueueEntry.Status::"In Process":
            MESSAGE(FORMAT(JobQueueEntry.Status::"In Process"));
          ELSE
            MESSAGE(Text003,JobQueueEntry."User Session Started",JobQueueEntry."User ID");
        END;
    END;

    PROCEDURE LookupRecordToProcess@16();
    VAR
      RecRef@1002 : RecordRef;
      RecVariant@1001 : Variant;
    BEGIN
      IF ISNULLGUID(ID) THEN
        EXIT;
      IF FORMAT("Record ID to Process") = '' THEN
        ERROR(NoRecordErr);
      RecRef.GET("Record ID to Process");
      RecRef.SETRECFILTER;
      RecVariant := RecRef;
      PAGE.RUN(0,RecVariant);
    END;

    PROCEDURE LookupObjectID@19(VAR NewObjectID@1000 : Integer) : Boolean;
    VAR
      AllObjWithCaption@1002 : Record 2000000058;
      Objects@1001 : Page 358;
    BEGIN
      IF AllObjWithCaption.GET("Object Type to Run","Object ID to Run") THEN;
      AllObjWithCaption.FILTERGROUP(2);
      AllObjWithCaption.SETRANGE("Object Type","Object Type to Run");
      AllObjWithCaption.FILTERGROUP(0);
      Objects.SETRECORD(AllObjWithCaption);
      Objects.SETTABLEVIEW(AllObjWithCaption);
      Objects.LOOKUPMODE := TRUE;
      IF Objects.RUNMODAL = ACTION::LookupOK THEN BEGIN
        Objects.GETRECORD(AllObjWithCaption);
        NewObjectID := AllObjWithCaption."Object ID";
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE LookupDateTime@26(InitDateTime@1000 : DateTime;EarliestDateTime@1001 : DateTime;LatestDateTime@1003 : DateTime) : DateTime;
    VAR
      DateTimeDialog@1004 : Page 684;
      NewDateTime@1002 : DateTime;
    BEGIN
      NewDateTime := InitDateTime;
      IF InitDateTime < EarliestDateTime THEN
        InitDateTime := EarliestDateTime;
      IF (LatestDateTime <> 0DT) AND (InitDateTime > LatestDateTime) THEN
        InitDateTime := LatestDateTime;

      DateTimeDialog.SetDateTime(ROUNDDATETIME(InitDateTime,1000));

      IF DateTimeDialog.RUNMODAL = ACTION::OK THEN
        NewDateTime := DateTimeDialog.GetDateTime;
      EXIT(NewDateTime);
    END;

    LOCAL PROCEDURE CheckStartAndExpirationDateTime@24();
    BEGIN
      IF ("Expiration Date/Time" <> 0DT) AND
         ("Earliest Start Date/Time" <> 0DT) AND
         ("Earliest Start Date/Time" >= "Expiration Date/Time")
      THEN
        ERROR(ExpiresBeforeStartErr,FIELDCAPTION("Expiration Date/Time"),FIELDCAPTION("Earliest Start Date/Time"));
    END;

    PROCEDURE GetReportParameters@17() : Text;
    VAR
      InStr@1000 : InStream;
      Params@1001 : Text;
    BEGIN
      TESTFIELD("Object Type to Run","Object Type to Run"::Report);
      TESTFIELD("Object ID to Run");

      CALCFIELDS(XML);
      IF XML.HASVALUE THEN BEGIN
        XML.CREATEINSTREAM(InStr,TEXTENCODING::UTF8);
        InStr.READ(Params);
      END;

      EXIT(Params);
    END;

    PROCEDURE SetReportParameters@20(Params@1002 : Text);
    VAR
      OutStr@1001 : OutStream;
    BEGIN
      TESTFIELD("Object Type to Run","Object Type to Run"::Report);
      TESTFIELD("Object ID to Run");
      CLEAR(XML);
      IF Params <> '' THEN BEGIN
        "Report Request Page Options" := TRUE;
        XML.CREATEOUTSTREAM(OutStr,TEXTENCODING::UTF8);
        OutStr.WRITE(Params);
      END;
      MODIFY;
    END;

    PROCEDURE RunReportRequestPage@18();
    VAR
      Params@1000 : Text;
    BEGIN
      IF "Object Type to Run" <> "Object Type to Run"::Report THEN
        EXIT;
      IF "Object ID to Run" = 0 THEN
        EXIT;

      Params := REPORT.RUNREQUESTPAGE("Object ID to Run",GetReportParameters);

      IF Params <> '' THEN
        SetReportParameters(Params);
    END;

    PROCEDURE SessionExists@22() : Boolean;
    VAR
      ActiveSession@1001 : Record 2000000110;
      SessionEvent@1000 : Record 2000000111;
    BEGIN
      IF "User Session ID" = 0 THEN
        EXIT(FALSE);

      ActiveSession.SETRANGE("Server Instance ID","User Service Instance ID");
      ActiveSession.SETRANGE("Session ID","User Session ID");
      ActiveSession.SETRANGE("Client Type",ActiveSession."Client Type"::Background);
      IF NOT ActiveSession.FINDFIRST THEN
        EXIT(FALSE);

      SessionEvent.SETRANGE("Server Instance ID","User Service Instance ID");
      SessionEvent.SETRANGE("Session ID","User Session ID");
      SessionEvent.SETRANGE("Client Type",SessionEvent."Client Type"::Background);
      SessionEvent.SETFILTER("Event Datetime",'>=%1',ActiveSession."Login Datetime");
      SessionEvent.SETCURRENTKEY("Event Datetime");
      IF SessionEvent.ISEMPTY THEN
        EXIT(FALSE);

      IF SessionEvent.FINDLAST THEN
        EXIT(SessionEvent."Event Type" IN [SessionEvent."Event Type"::Logon,SessionEvent."Event Type"::Start]);
      EXIT(FALSE);
    END;

    PROCEDURE ScheduleJobQueueEntry@21(CodeunitID@1000 : Integer;RecordIDToProcess@1001 : RecordID);
    VAR
      JobQueueEnqueue@1003 : Codeunit 453;
    BEGIN
      INIT;
      ID := CREATEGUID;
      "Earliest Start Date/Time" := CREATEDATETIME(TODAY,TIME);
      "Object Type to Run" := "Object Type to Run"::Codeunit;
      "Object ID to Run" := CodeunitID;
      "Record ID to Process" := RecordIDToProcess;
      "Run in User Session" := FALSE;
      Priority := 1000;
      JobQueueEnqueue.EnqueueJobQueueEntry(Rec,FALSE);
    END;

    PROCEDURE GetStartingDateTime@27(Date@1000 : DateTime) : DateTime;
    BEGIN
      IF "Reference Starting Time" = 0DT THEN
        VALIDATE("Starting Time");
      EXIT(CREATEDATETIME(DT2DATE(Date),DT2TIME("Reference Starting Time")));
    END;

    PROCEDURE GetEndingDateTime@30(Date@1000 : DateTime) : DateTime;
    BEGIN
      IF "Reference Starting Time" = 0DT THEN
        VALIDATE("Starting Time");
      IF "Ending Time" = 0T THEN
        EXIT(CREATEDATETIME(DT2DATE(Date),0T));
      IF "Starting Time" = 0T THEN
        EXIT(CREATEDATETIME(DT2DATE(Date),"Ending Time"));
      IF "Starting Time" < "Ending Time" THEN
        EXIT(CREATEDATETIME(DT2DATE(Date),"Ending Time"));
      EXIT(CREATEDATETIME(DT2DATE(Date) + 1,"Ending Time"));
    END;

    PROCEDURE ScheduleRecurrentJobQueueEntry@25(ObjType@1001 : Option;ObjID@1002 : Integer);
    BEGIN
      RESET;
      SETRANGE("Object Type to Run",ObjType);
      SETRANGE("Object ID to Run",ObjID);
      LOCKTABLE;

      IF NOT FINDFIRST THEN BEGIN
        CLEAR(Rec);
        "Earliest Start Date/Time" := CREATEDATETIME(TODAY,TIME);
        "Object Type to Run" := ObjType;
        "Object ID to Run" := ObjID;
        "Recurring Job" := TRUE;
        "Run on Mondays" := TRUE;
        "Run on Tuesdays" := TRUE;
        "Run on Wednesdays" := TRUE;
        "Run on Thursdays" := TRUE;
        "Run on Fridays" := TRUE;
        "Run on Saturdays" := TRUE;
        "Run on Sundays" := TRUE;
        "Starting Time" := 080000T;
        "Maximum No. of Attempts to Run" := 3;
        "No. of Minutes between Runs" := 5;
        SetStatusValue(Status::Ready);
        INSERT(TRUE);
      END;

      IF Status <> Status::Ready THEN BEGIN
        SetStatusValue(Status::Ready);
        MODIFY;
      END;
    END;

    PROCEDURE FindJobQueueEntry@23(ObjType@1002 : Option;ObjID@1001 : Integer) : Boolean;
    BEGIN
      RESET;
      SETRANGE("Object Type to Run",ObjType);
      SETRANGE("Object ID to Run",ObjID);
      EXIT(FINDFIRST);
    END;

    BEGIN
    END.
  }
}

