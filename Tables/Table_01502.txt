OBJECT Table 1502 Workflow Step
{
  OBJECT-PROPERTIES
  {
    Date=10/23/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.43402;
  }
  PROPERTIES
  {
    Permissions=TableData 1504=rimd,
                TableData 1523=ri,
                TableData 1524=rimd;
    OnInsert=BEGIN
               TESTFIELD("Workflow Code");
               CheckEditingIsAllowed;
             END;

    OnModify=BEGIN
               CheckEditingIsAllowed;
             END;

    OnDelete=VAR
               WorkflowStepArgument@1002 : Record 1523;
               ChildWorkflowStep@1000 : Record 1502;
             BEGIN
               CheckEditingIsAllowed;

               IF WorkflowStepArgument.GET(Argument) THEN
                 WorkflowStepArgument.DELETE;
               DeleteStepRules;

               // Change Previous Workflow Step ID to not point to the deleted step
               ChildWorkflowStep.SETRANGE("Workflow Code","Workflow Code");
               ChildWorkflowStep.SETRANGE("Previous Workflow Step ID",ID);
               IF ChildWorkflowStep.FINDSET THEN
                 REPEAT
                   ChildWorkflowStep.VALIDATE("Previous Workflow Step ID","Previous Workflow Step ID");
                   ChildWorkflowStep.MODIFY(TRUE);
                 UNTIL ChildWorkflowStep.NEXT <> 1;
             END;

    OnRename=BEGIN
               CheckEditingIsAllowed;
             END;

    CaptionML=[ENU=Workflow Step;
               ESM=Paso de flujo de trabajo;
               FRC=êtape de flux de travail;
               ENC=Workflow Step];
    LookupPageID=Page1503;
  }
  FIELDS
  {
    { 1   ;   ;ID                  ;Integer       ;AutoIncrement=Yes;
                                                   CaptionML=[ENU=ID;
                                                              ESM=Id.;
                                                              FRC=Code;
                                                              ENC=ID] }
    { 2   ;   ;Workflow Code       ;Code20        ;TableRelation=Workflow;
                                                   CaptionML=[ENU=Workflow Code;
                                                              ESM=C¢digo de flujo de trabajo;
                                                              FRC=Code flux de travail;
                                                              ENC=Workflow Code];
                                                   NotBlank=Yes }
    { 4   ;   ;Description         ;Text100       ;CaptionML=[ENU=Description;
                                                              ESM=Descripci¢n;
                                                              FRC=Description;
                                                              ENC=Description] }
    { 9   ;   ;Entry Point         ;Boolean       ;CaptionML=[ENU=Entry Point;
                                                              ESM=Punto de entrada;
                                                              FRC=Point d'entrÇe;
                                                              ENC=Entry Point] }
    { 11  ;   ;Previous Workflow Step ID;Integer  ;TableRelation="Workflow Step".ID WHERE (Workflow Code=FIELD(Workflow Code));
                                                   OnValidate=BEGIN
                                                                IF "Previous Workflow Step ID" = ID THEN
                                                                  FIELDERROR("Previous Workflow Step ID",StepIdsCannotBeTheSameErr);
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF LookupOtherWorkflowStepID("Previous Workflow Step ID") THEN
                                                                VALIDATE("Previous Workflow Step ID");
                                                            END;

                                                   CaptionML=[ENU=Previous Workflow Step ID;
                                                              ESM=Id. de paso de flujo de trabajo anterior;
                                                              FRC=Code Çtape de flux de travail prÇcÇdente;
                                                              ENC=Previous Workflow Step ID] }
    { 12  ;   ;Next Workflow Step ID;Integer      ;TableRelation="Workflow Step".ID WHERE (Workflow Code=FIELD(Workflow Code));
                                                   OnValidate=BEGIN
                                                                IF "Next Workflow Step ID" = ID THEN
                                                                  FIELDERROR("Next Workflow Step ID",StepIdsCannotBeTheSameErr);
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF LookupOtherWorkflowStepID("Next Workflow Step ID") THEN
                                                                VALIDATE("Next Workflow Step ID");
                                                            END;

                                                   CaptionML=[ENU=Next Workflow Step ID;
                                                              ESM=Id. de siguiente paso de flujo de trabajo;
                                                              FRC=Code Çtape de flux de travail suivante;
                                                              ENC=Next Workflow Step ID] }
    { 13  ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                "Function Name" := '';
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              ESM=Tipo;
                                                              FRC=Type;
                                                              ENC=Type];
                                                   OptionCaptionML=[ENU=Event,Response,Sub-Workflow;
                                                                    ESM=Evento,Respuesta,Flujo de trabajo secundario;
                                                                    FRC=EvÇnement,RÇponse,Sous-flux de travail;
                                                                    ENC=Event,Response,Sub-Workflow];
                                                   OptionString=Event,Response,Sub-Workflow }
    { 14  ;   ;Function Name       ;Code128       ;TableRelation=IF (Type=CONST(Event)) "Workflow Event"
                                                                 ELSE IF (Type=CONST(Response)) "Workflow Response"
                                                                 ELSE IF (Type=CONST(Sub-Workflow)) Workflow;
                                                   OnValidate=VAR
                                                                WorkflowStepArgument@1000 : Record 1523;
                                                                WorkflowRule@1001 : Record 1524;
                                                                EmptyGuid@1002 : GUID;
                                                              BEGIN
                                                                CASE Type OF
                                                                  Type::"Sub-Workflow":
                                                                    IF "Function Name" = "Workflow Code" THEN
                                                                      FIELDERROR("Function Name",CannotReferToCurrentWorkflowErr);
                                                                  ELSE
                                                                    IF "Function Name" <> xRec."Function Name" THEN BEGIN
                                                                      IF WorkflowStepArgument.GET(Argument) THEN BEGIN
                                                                        WorkflowStepArgument.DELETE(TRUE);
                                                                        CLEAR(Argument);
                                                                      END;
                                                                      WorkflowRule.SETRANGE("Workflow Code","Workflow Code");
                                                                      WorkflowRule.SETRANGE("Workflow Step ID",ID);
                                                                      WorkflowRule.SETRANGE("Workflow Step Instance ID",EmptyGuid);
                                                                      IF NOT WorkflowRule.ISEMPTY THEN
                                                                        WorkflowRule.DELETEALL;
                                                                    END;
                                                                END;

                                                                IF (Type = Type::Response) AND ("Function Name" <> '') THEN
                                                                  CreateResponseArgument;
                                                              END;

                                                   OnLookup=VAR
                                                              Workflow@1000 : Record 1501;
                                                              WorkflowEvent@1002 : Record 1520;
                                                              WorkflowResponse@1003 : Record 1521;
                                                              WorkflowLookupCode@1001 : Code[20];
                                                            BEGIN
                                                              CASE Type OF
                                                                Type::"Event":
                                                                  IF PAGE.RUNMODAL(0,WorkflowEvent) = ACTION::LookupOK THEN
                                                                    VALIDATE("Function Name",WorkflowEvent."Function Name");
                                                                Type::Response:
                                                                  IF PAGE.RUNMODAL(0,WorkflowResponse) = ACTION::LookupOK THEN
                                                                    VALIDATE("Function Name",WorkflowResponse."Function Name");
                                                                Type::"Sub-Workflow":
                                                                  BEGIN
                                                                    Workflow.GET("Workflow Code");
                                                                    IF Workflow.LookupOtherWorkflowCode(WorkflowLookupCode) THEN
                                                                      VALIDATE("Function Name",WorkflowLookupCode);
                                                                  END;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Function Name;
                                                              ESM=Nombre de funci¢n;
                                                              FRC=Nom de fonction;
                                                              ENC=Function Name] }
    { 15  ;   ;Argument            ;GUID          ;TableRelation="Workflow Step Argument" WHERE (Type=FIELD(Type));
                                                   OnValidate=VAR
                                                                WorkflowStepArgument@1000 : Record 1523;
                                                              BEGIN
                                                                IF WorkflowStepArgument.GET(xRec.Argument) THEN
                                                                  WorkflowStepArgument.DELETE(TRUE);
                                                              END;

                                                   CaptionML=[ENU=Argument;
                                                              ESM=Argumento;
                                                              FRC=Argument;
                                                              ENC=Argument] }
    { 16  ;   ;Sequence No.        ;Integer       ;InitValue=1;
                                                   CaptionML=[ENU=Sequence No.;
                                                              ESM=Nß secuencia;
                                                              FRC=N¯ sÇquence;
                                                              ENC=Sequence No.] }
  }
  KEYS
  {
    {    ;Workflow Code,ID                        ;Clustered=Yes }
    {    ;Sequence No.                             }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      CannotReferToCurrentWorkflowErr@1000 : TextConst 'ENU=cannot refer to the current workflow;ESM=no puede hacer referencia al flujo de trabajo actual;FRC=ne peut pas àtre liÇ au flux de travail actuel;ENC=cannot refer to the current workflow';
      StepIdsCannotBeTheSameErr@1002 : TextConst '@@@=Example: Previous Workflow Step ID cannot be the same as ID.;ENU=cannot be the same as ID;ESM=no puede ser igual que el id.;FRC=ne peut pas àtre identique Ö Code.;ENC=cannot be the same as ID';
      ViewFilterDetailsTxt@1001 : TextConst 'ENU=(View filter details);ESM=(Ver detalles de filtro);FRC=(Afficher les dÇtails du filtre);ENC=(View filter details)';

    PROCEDURE CreateInstance@27(WorkflowInstanceID@1002 : GUID;WorkflowCode@1004 : Code[20];PreviousWorkflowStepID@1006 : Integer;SubWorkflowStep@1005 : Record 1502);
    VAR
      WorkflowStepArgument@1000 : Record 1523;
      WorkflowStepInstance@1001 : Record 1504;
    BEGIN
      WorkflowStepInstance.INIT;
      WorkflowStepInstance.ID := WorkflowInstanceID;
      WorkflowStepInstance."Workflow Code" := WorkflowCode;
      WorkflowStepInstance."Workflow Step ID" := ID;
      WorkflowStepInstance.Description := Description;
      WorkflowStepInstance."Entry Point" := "Entry Point";
      WorkflowStepInstance."Previous Workflow Step ID" := PreviousWorkflowStepID;
      WorkflowStepInstance."Next Workflow Step ID" := "Next Workflow Step ID";
      WorkflowStepInstance.Type := Type;
      WorkflowStepInstance."Function Name" := "Function Name";
      WorkflowStepInstance."Sequence No." := "Sequence No.";

      IF WorkflowStepArgument.GET(Argument) THEN
        WorkflowStepInstance.Argument := WorkflowStepArgument.Clone;

      WorkflowStepInstance."Original Workflow Code" := SubWorkflowStep."Workflow Code";
      WorkflowStepInstance."Original Workflow Step ID" := SubWorkflowStep.ID;

      WorkflowStepInstance.INSERT(TRUE);
      InstantiateStepRules(WorkflowStepInstance.ID);
    END;

    PROCEDURE ConvertEventConditionsToFilters@7(RecRef@1005 : RecordRef);
    VAR
      TempBlob@1002 : Record 99008535;
      WorkflowStepArgument@1000 : Record 1523;
      RequestPageParametersHelper@1001 : Codeunit 1530;
    BEGIN
      TESTFIELD(Type,Type::"Event");
      TESTFIELD("Function Name");

      IF WorkflowStepArgument.GET(Argument) THEN BEGIN
        WorkflowStepArgument.CALCFIELDS("Event Conditions");

        TempBlob.INIT;
        TempBlob.Blob := WorkflowStepArgument."Event Conditions";

        RequestPageParametersHelper.ConvertParametersToFilters(RecRef,TempBlob);
      END;
    END;

    PROCEDURE DeleteEventConditions@4();
    VAR
      WorkflowStepArgument@1000 : Record 1523;
      ZeroGUID@1001 : GUID;
    BEGIN
      CheckEditingIsAllowed;

      TESTFIELD(Type,Type::"Event");
      TESTFIELD("Function Name");

      IF WorkflowStepArgument.GET(Argument) THEN BEGIN
        WorkflowStepArgument.DELETE(TRUE);
        Argument := ZeroGUID;
        MODIFY(TRUE);
      END;

      DeleteStepRules;
    END;

    PROCEDURE OpenEventConditions@17();
    VAR
      WorkflowEvent@1000 : Record 1520;
      WorkflowStepArgument@1001 : Record 1523;
      ReturnFilters@1002 : Text;
      CurrentEventFilters@1004 : Text;
      UserClickedOK@1005 : Boolean;
    BEGIN
      TESTFIELD(Type,Type::"Event");
      TESTFIELD("Function Name");

      WorkflowEvent.GET("Function Name");

      IF WorkflowStepArgument.GET(Argument) THEN
        CurrentEventFilters := WorkflowStepArgument.GetEventFilters
      ELSE
        CurrentEventFilters := WorkflowEvent.CreateDefaultRequestPageFilters;

      UserClickedOK := WorkflowEvent.RunRequestPage(ReturnFilters,CurrentEventFilters);
      IF UserClickedOK AND (ReturnFilters <> CurrentEventFilters) THEN BEGIN
        CheckEditingIsAllowed;
        IF ReturnFilters = WorkflowEvent.CreateDefaultRequestPageFilters THEN
          DeleteEventConditions
        ELSE BEGIN
          IF ISNULLGUID(Argument) THEN
            CreateEventArgument(WorkflowStepArgument,Rec);
          WorkflowStepArgument.SetEventFilters(ReturnFilters);
        END;
      END;
    END;

    PROCEDURE OpenAdvancedEventConditions@20();
    VAR
      WorkflowEvent@1000 : Record 1520;
      WorkflowRule@1003 : Record 1524;
      TempWorkflowRule@1006 : TEMPORARY Record 1524;
      WorkflowEventConditions@1007 : Page 1526;
    BEGIN
      TESTFIELD(Type,Type::"Event");
      TESTFIELD("Function Name");

      WorkflowEvent.GET("Function Name");

      WorkflowRule.SETRANGE("Workflow Code","Workflow Code");
      WorkflowRule.SETRANGE("Workflow Step ID",ID);
      IF WorkflowRule.FINDFIRST THEN
        TempWorkflowRule := WorkflowRule
      ELSE BEGIN
        TempWorkflowRule."Table ID" := WorkflowEvent."Table ID";
        TempWorkflowRule."Workflow Code" := "Workflow Code";
        TempWorkflowRule."Workflow Step ID" := ID;
      END;

      WorkflowEventConditions.SetRule(TempWorkflowRule);
      IF WorkflowEventConditions.RUNMODAL = ACTION::LookupOK THEN BEGIN
        WorkflowEventConditions.GETRECORD(TempWorkflowRule);
        IF TempWorkflowRule."Field No." = 0 THEN
          DeleteStepRules
        ELSE BEGIN
          WorkflowRule.COPY(TempWorkflowRule);
          IF NOT WorkflowRule.INSERT(TRUE) THEN
            WorkflowRule.MODIFY(TRUE);
        END;
      END;
    END;

    PROCEDURE CompareEventConditions@5(WorkflowStep@1000 : Record 1502) : Boolean;
    VAR
      OtherWorkflowEvent@1004 : Record 1520;
      ThisWorkflowEvent@1003 : Record 1520;
      OtherRecRef@1006 : RecordRef;
      ThisRecRef@1005 : RecordRef;
    BEGIN
      TESTFIELD(Type,Type::"Event");
      ThisWorkflowEvent.GET("Function Name");
      ThisRecRef.OPEN(ThisWorkflowEvent."Table ID");
      ConvertEventConditionsToFilters(ThisRecRef);

      WorkflowStep.TESTFIELD(Type,WorkflowStep.Type::"Event");
      OtherWorkflowEvent.GET(WorkflowStep."Function Name");
      OtherRecRef.OPEN(OtherWorkflowEvent."Table ID");
      WorkflowStep.ConvertEventConditionsToFilters(OtherRecRef);

      EXIT(ThisRecRef.GETFILTERS = OtherRecRef.GETFILTERS);
    END;

    PROCEDURE CompareEventRule@21(WorkflowStep@1000 : Record 1502) : Boolean;
    VAR
      OtherWorkflowRule@1004 : Record 1524;
      ThisWorkflowRule@1003 : Record 1524;
    BEGIN
      TESTFIELD("Workflow Code");
      TESTFIELD(ID);
      WorkflowStep.TESTFIELD("Workflow Code");
      WorkflowStep.TESTFIELD(ID);

      FindWorkflowRules(ThisWorkflowRule);
      WorkflowStep.FindWorkflowRules(OtherWorkflowRule);

      EXIT((ThisWorkflowRule.COUNT <= 1) AND (ThisWorkflowRule.COUNT = OtherWorkflowRule.COUNT) AND
        (ThisWorkflowRule."Field No." = OtherWorkflowRule."Field No.") AND
        (ThisWorkflowRule.Operator = OtherWorkflowRule.Operator))
    END;

    PROCEDURE InsertAfterStep@15(VAR NewWorkflowStep@1000 : Record 1502);
    VAR
      ChildWorkflowStep@1002 : Record 1502;
    BEGIN
      ChildWorkflowStep.SETRANGE("Workflow Code","Workflow Code");
      ChildWorkflowStep.SETRANGE("Previous Workflow Step ID",ID);
      ChildWorkflowStep.MODIFYALL("Previous Workflow Step ID",NewWorkflowStep.ID);

      NewWorkflowStep.TESTFIELD("Workflow Code","Workflow Code");
      NewWorkflowStep.VALIDATE("Previous Workflow Step ID",ID);
      NewWorkflowStep.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateEventArgument@9(VAR WorkflowStepArgument@1000 : Record 1523;VAR WorkflowStep@1001 : Record 1502);
    BEGIN
      WorkflowStep.TESTFIELD(Type,WorkflowStep.Type::"Event");

      WorkflowStepArgument.INIT;
      WorkflowStepArgument.Type := WorkflowStepArgument.Type::"Event";
      WorkflowStepArgument.INSERT(TRUE);

      WorkflowStep.Argument := WorkflowStepArgument.ID;
      WorkflowStep.MODIFY(TRUE);
    END;

    PROCEDURE LookupOtherWorkflowStepID@8(VAR LookupID@1001 : Integer) : Boolean;
    VAR
      TempWorkflowStepBuffer@1002 : TEMPORARY Record 1507;
    BEGIN
      TempWorkflowStepBuffer.PopulateLookupTable("Workflow Code");
      TempWorkflowStepBuffer.SETFILTER("Event Step ID",'0|%1',LookupID);
      TempWorkflowStepBuffer.SETFILTER("Response Step ID",'0|%1',LookupID);
      IF TempWorkflowStepBuffer.FINDFIRST THEN;
      TempWorkflowStepBuffer.RESET;
      IF PAGE.RUNMODAL(PAGE::"Workflow Steps",TempWorkflowStepBuffer) = ACTION::LookupOK THEN BEGIN
        LookupID := TempWorkflowStepBuffer."Event Step ID" + TempWorkflowStepBuffer."Response Step ID";
        EXIT(TRUE);
      END;
    END;

    PROCEDURE GetDescription@1() : Text[250];
    VAR
      WorkflowStep@1000 : Record 1502;
      WorkflowEvent@1001 : Record 1520;
      WorkflowStepArgument@1003 : Record 1523;
      WorkflowResponseHandling@1002 : Codeunit 1521;
    BEGIN
      CASE Type OF
        WorkflowStep.Type::"Event":
          IF WorkflowEvent.GET("Function Name") THEN
            EXIT(WorkflowEvent.Description);
        WorkflowStep.Type::Response:
          IF WorkflowStepArgument.GET(Argument) THEN
            EXIT(WorkflowResponseHandling.GetDescription(WorkflowStepArgument));
      END;
      EXIT('');
    END;

    LOCAL PROCEDURE CheckEditingIsAllowed@12();
    VAR
      Workflow@1000 : Record 1501;
    BEGIN
      Workflow.GET("Workflow Code");
      Workflow.CheckEditingIsAllowed;
    END;

    PROCEDURE ToString@2() : Text;
    BEGIN
      EXIT(STRSUBSTNO('%1,%2,%3',"Workflow Code",ID,Type));
    END;

    PROCEDURE FindByAttributes@14(WorkflowStepAttributes@1001 : Text);
    BEGIN
      SETFILTER("Workflow Code",'%1',SELECTSTR(1,WorkflowStepAttributes));
      SETFILTER(ID,SELECTSTR(2,WorkflowStepAttributes));
      SETFILTER(Type,SELECTSTR(3,WorkflowStepAttributes));
      FINDFIRST;
    END;

    PROCEDURE GetConditionAsDisplayText@11() : Text;
    VAR
      WorkflowEvent@1000 : Record 1520;
      RecordRef@1001 : RecordRef;
    BEGIN
      IF Type <> Type::"Event" THEN
        EXIT;

      IF NOT WorkflowEvent.GET("Function Name") THEN
        EXIT;

      RecordRef.OPEN(WorkflowEvent."Table ID");
      ConvertEventConditionsToFilters(RecordRef);

      IF RecordRef.GETFILTERS <> '' THEN
        EXIT(RecordRef.GETFILTERS);

      IF HasArgumentsContent THEN
        EXIT(ViewFilterDetailsTxt);

      EXIT('');
    END;

    PROCEDURE GetRuleAsDisplayText@22() : Text;
    VAR
      WorkflowRule@1002 : Record 1524;
    BEGIN
      IF Type <> Type::"Event" THEN
        EXIT;

      WorkflowRule.SETRANGE("Workflow Code","Workflow Code");
      WorkflowRule.SETRANGE("Workflow Step ID",ID);
      IF WorkflowRule.FINDFIRST THEN
        EXIT(WorkflowRule.GetDisplayText);

      EXIT('');
    END;

    LOCAL PROCEDURE CreateResponseArgument@13() : Boolean;
    VAR
      WorkflowStepArgument@1000 : Record 1523;
    BEGIN
      TESTFIELD(Type,Type::Response);

      IF ISNULLGUID(Argument) OR (NOT WorkflowStepArgument.GET(Argument)) THEN BEGIN
        WorkflowStepArgument.INIT;
        WorkflowStepArgument.Type := WorkflowStepArgument.Type::Response;
        WorkflowStepArgument."Response Function Name" := "Function Name";
        WorkflowStepArgument.INSERT(TRUE);
        Argument := WorkflowStepArgument.ID;
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE HasArgumentsContent@16() : Boolean;
    VAR
      WorkflowStepArgument@1000 : Record 1523;
    BEGIN
      IF NOT WorkflowStepArgument.GET(Argument) THEN
        EXIT(FALSE);

      EXIT(WorkflowStepArgument."Event Conditions".HASVALUE);
    END;

    PROCEDURE HasEventsInSubtree@32(VAR ChildWorkflowStep@1001 : Record 1502) : Boolean;
    BEGIN
      ChildWorkflowStep.SETRANGE("Workflow Code","Workflow Code");
      ChildWorkflowStep.SETRANGE("Previous Workflow Step ID",ID);
      ChildWorkflowStep.SETRANGE(Type,ChildWorkflowStep.Type::"Event");
      IF ChildWorkflowStep.FINDFIRST THEN
        EXIT(TRUE);

      ChildWorkflowStep.SETRANGE(Type);
      IF ChildWorkflowStep.FINDSET THEN
        REPEAT
          IF ChildWorkflowStep.HasEventsInSubtree(ChildWorkflowStep) THEN
            EXIT(TRUE);
        UNTIL ChildWorkflowStep.NEXT = 0;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE DeleteStepRules@3();
    VAR
      WorkflowRule@1000 : Record 1524;
    BEGIN
      FindWorkflowRules(WorkflowRule);
      WorkflowRule.DELETEALL;
    END;

    LOCAL PROCEDURE InstantiateStepRules@18(InstanceID@1003 : GUID);
    VAR
      WorkflowRule@1000 : Record 1524;
      InstanceWorkflowRule@1002 : Record 1524;
      ZeroGuid@1001 : GUID;
    BEGIN
      WorkflowRule.SETRANGE("Workflow Code","Workflow Code");
      WorkflowRule.SETRANGE("Workflow Step ID",ID);
      WorkflowRule.SETRANGE("Workflow Step Instance ID",ZeroGuid);
      IF WorkflowRule.FINDSET THEN
        REPEAT
          InstanceWorkflowRule.COPY(WorkflowRule);
          InstanceWorkflowRule.ID := 0;
          InstanceWorkflowRule."Workflow Step Instance ID" := InstanceID;
          InstanceWorkflowRule.INSERT(TRUE);
        UNTIL WorkflowRule.NEXT = 0;
    END;

    PROCEDURE FindWorkflowRules@19(VAR WorkflowRule@1000 : Record 1524) : Boolean;
    VAR
      ZeroGuid@1001 : GUID;
    BEGIN
      TESTFIELD("Workflow Code");
      TESTFIELD(ID);
      WorkflowRule.SETRANGE("Workflow Code","Workflow Code");
      WorkflowRule.SETRANGE("Workflow Step ID",ID);
      WorkflowRule.SETRANGE("Workflow Step Instance ID",ZeroGuid);
      EXIT(WorkflowRule.FINDSET);
    END;

    PROCEDURE HasParentEvent@23(VAR WorkflowStep@1000 : Record 1502) : Boolean;
    BEGIN
      WorkflowStep.SETRANGE(ID,"Previous Workflow Step ID");
      WorkflowStep.SETRANGE("Workflow Code","Workflow Code");
      WorkflowStep.SETRANGE(Type,WorkflowStep.Type::"Event");

      IF WorkflowStep.FINDFIRST THEN
        EXIT(TRUE);

      WorkflowStep.SETRANGE(Type);
      IF WorkflowStep.FINDSET THEN
        REPEAT
          IF WorkflowStep.HasParentEvent(WorkflowStep) THEN
            EXIT(TRUE);
        UNTIL WorkflowStep.NEXT = 0;

      EXIT(FALSE);
    END;

    BEGIN
    END.
  }
}

