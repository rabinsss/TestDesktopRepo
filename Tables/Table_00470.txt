OBJECT Table 470 Job Queue
{
  OBJECT-PROPERTIES
  {
    Date=09/09/14;
    Time=12:00:00 PM;
    Version List=NAVW18.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Job Queue;
               ESM=Cola proyecto;
               FRC=File d'attente des travaux;
               ENC=Job Queue];
    LookupPageID=Page670;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code10        ;CaptionML=[ENU=Code;
                                                              ESM=C¢digo;
                                                              FRC=Code;
                                                              ENC=Code];
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text30        ;CaptionML=[ENU=Description;
                                                              ESM=Descripci¢n;
                                                              FRC=Description;
                                                              ENC=Description] }
    { 3   ;   ;Job Queue Category Filter;Text80   ;TableRelation="Job Queue Category";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Job Queue Category Filter;
                                                              ESM=Filtro categor¡a cola proyectos;
                                                              FRC=Filtre cat‚gorie file d'attente des travaux;
                                                              ENC=Job Queue Category Filter] }
    { 4   ;   ;Server Instance ID  ;Integer       ;CaptionML=[ENU=Server Instance ID;
                                                              ESM=Id. instancia de servidor;
                                                              FRC=Code instance de serveur;
                                                              ENC=Server Instance ID];
                                                   Editable=No }
    { 5   ;   ;Session ID          ;Integer       ;CaptionML=[ENU=Session ID;
                                                              ESM=Id. sesi¢n;
                                                              FRC=Code session;
                                                              ENC=Session ID];
                                                   Editable=No }
    { 6   ;   ;Last Heartbeat      ;DateTime      ;CaptionML=[ENU=Last Heartbeat;
                                                              ESM=éltimo latido;
                                                              FRC=DerniŠre pulsation;
                                                              ENC=Last Heartbeat];
                                                   Editable=No }
    { 7   ;   ;Started             ;Boolean       ;CaptionML=[ENU=Started;
                                                              ESM=Iniciado;
                                                              FRC=D‚marr‚;
                                                              ENC=Started];
                                                   Editable=No }
    { 8   ;   ;Start Automatically From NAS;Boolean;
                                                   CaptionML=[ENU=Start Automatically From NAS;
                                                              ESM=Iniciar autom ticamente desde NAS;
                                                              FRC=D‚marrer automatiquement … partir de NAS;
                                                              ENC=Start Automatically From NAS] }
    { 9   ;   ;Start on This NAS Computer;Text250 ;OnLookup=BEGIN
                                                              LookUpServerInstance(TRUE);
                                                            END;

                                                   CaptionML=[ENU=Start on This NAS Computer;
                                                              ESM=Iniciar en este equipo NAS;
                                                              FRC=D‚marrer sur cet ordinateur NAS;
                                                              ENC=Start on This NAS Computer] }
    { 10  ;   ;Start on This NAS Instance;Text250 ;OnLookup=BEGIN
                                                              LookUpServerInstance(FALSE);
                                                            END;

                                                   CaptionML=[ENU=Start on This NAS Instance;
                                                              ESM=Iniciar en esta instancia NAS;
                                                              FRC=D‚marrer sur cette instance NAS;
                                                              ENC=Start on This NAS Instance] }
    { 11  ;   ;Running as User ID  ;Text132       ;TableRelation=User."User Name";
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Running as User ID;
                                                              ESM=Ejecut ndose como Id. usuario;
                                                              FRC=Ex‚cution en tant que code utilisateur;
                                                              ENC=Running as User ID];
                                                   Editable=No }
    { 12  ;   ;Running on Server Computer;Text250 ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Server Instance"."Server Computer Name" WHERE (Server Instance ID=FIELD(Server Instance ID)));
                                                   CaptionML=[ENU=Running on Server Computer;
                                                              ESM=Ejecut ndose en equipo servidor;
                                                              FRC=Ex‚cution sur le serveur;
                                                              ENC=Running on Server Computer];
                                                   Editable=No }
    { 13  ;   ;Running on Server Instance;Text250 ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Server Instance"."Server Instance Name" WHERE (Server Instance ID=FIELD(Server Instance ID)));
                                                   CaptionML=[ENU=Running on Server Instance;
                                                              ESM=Ejecut ndose en instancia de servidor;
                                                              FRC=Ex‚cution sur l'instance du serveur;
                                                              ENC=Running on Server Instance];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1000 : TextConst 'ENU=This Job Queue has been set up to start from NAS. The Job Queue will start automatically when the NAS service is started.;ESM=Esta cola de proyecto se ha configurado para iniciar desde NAS. La cola de proyecto se iniciar  autom ticamente cuando se inicie el servicio NAS.;FRC=Cette file d''attente des travaux a ‚t‚ configur‚e pour d‚marrer … partir de NAS. Elle d‚marrera automatiquement au d‚marrage du service NAS.;ENC=This Job Queue has been set up to start from NAS. The Job Queue will start automatically when the NAS service is started.';

    PROCEDURE StartQueueFromUI@9(CompanyName@1000 : Text[30]) : Integer;
    BEGIN
      IF "Start Automatically From NAS" THEN BEGIN
        MESSAGE(Text001);
        EXIT;
      END;
      EXIT(StartQueue(CompanyName));
    END;

    PROCEDURE StartQueue@2(CompanyName@1000 : Text[30]) : Integer;
    VAR
      ServerInstance@1001 : Record 2000000112;
    BEGIN
      IF NOT GET(Code) THEN
        EXIT;
      IF QueueIsRunning THEN
        EXIT;

      IF "Start Automatically From NAS" AND (("Start on This NAS Computer" <> '') OR ("Start on This NAS Instance" <> '')) THEN BEGIN
        ServerInstance.GET(SERVICEINSTANCEID);
        IF ("Start on This NAS Computer" <> '') AND
           (LOWERCASE(ServerInstance."Server Computer Name") <> LOWERCASE("Start on This NAS Computer")) OR
           ("Start on This NAS Instance" <> '') AND
           (LOWERCASE(ServerInstance."Server Instance Name") <> LOWERCASE("Start on This NAS Instance"))
        THEN
          EXIT;
      END;

      LOCKTABLE;
      GET(Code);
      Started := TRUE;
      "Server Instance ID" := SERVICEINSTANCEID;
      "Running as User ID" := COPYSTR(USERID,1,MAXSTRLEN("Running as User ID"));
      STARTSESSION("Session ID",CODEUNIT::"Job Queue Dispatcher",CompanyName);
      MODIFY;
      COMMIT;
      EXIT("Session ID");
    END;

    PROCEDURE StopQueue@5();
    BEGIN
      LOCKTABLE;
      IF NOT GET(Code) THEN
        EXIT;
      Started := FALSE;  // Signal to background session (Job Queue Dispatcher).
      ResetServiceValues;
      MODIFY;
      COMMIT;
    END;

    PROCEDURE QueueIsRunning@1() : Boolean;
    VAR
      ActiveSession@1001 : Record 2000000110;
      SessionEvent@1000 : Record 2000000111;
      LastSessionEvent@1002 : Record 2000000111;
    BEGIN
      IF "Session ID" = 0 THEN
        EXIT(FALSE);

      // Note that records in the Active Session table recycle the Session ID whenever the Service
      // is restarted (ie. IDs increment from 1 again). In cases where restarting the Service
      // will not spawn sessions in the same sequence, the following code block may positively identify
      // the wrong session.
      ActiveSession.SETRANGE("Server Instance ID","Server Instance ID");
      ActiveSession.SETRANGE("Session ID","Session ID");
      ActiveSession.SETRANGE("Client Type",ActiveSession."Client Type"::Background);
      IF NOT ActiveSession.FINDFIRST THEN
        EXIT(FALSE);

      SessionEvent.SETRANGE("Server Instance ID","Server Instance ID");
      SessionEvent.SETRANGE("Session ID","Session ID");
      SessionEvent.SETRANGE("Client Type",SessionEvent."Client Type"::Background);
      SessionEvent.SETFILTER("Event Datetime",'>=%1',ActiveSession."Login Datetime");
      IF SessionEvent.ISEMPTY THEN
        EXIT(FALSE);

      IF SessionEvent.FINDSET THEN
        REPEAT
          IF SessionEvent."Event Datetime" > LastSessionEvent."Event Datetime" THEN
            LastSessionEvent := SessionEvent;
        UNTIL SessionEvent.NEXT = 0;

      // This assumes that the last Session Events are not Logon or Start. Note that in special cases such as when
      // a Service remains offline, the Active Session record is assumed dead and removed after 5mins,
      // but no Session Event records are added to the table (with Event Type 4).
      EXIT(LastSessionEvent."Event Type" IN [LastSessionEvent."Event Type"::Logon,LastSessionEvent."Event Type"::Start]);
    END;

    PROCEDURE UpdateHeartbeat@3();
    BEGIN
      LOCKTABLE;
      IF GET(Code) THEN BEGIN
        "Last Heartbeat" := CURRENTDATETIME;
        MODIFY;
      END;
    END;

    PROCEDURE ResetServiceValues@4();
    BEGIN
      "Server Instance ID" := 0;
      "Session ID" := 0;
      "Running as User ID" := '';
      "Last Heartbeat" := 0DT;
    END;

    LOCAL PROCEDURE LookUpServerInstance@6(OnlyServer@1002 : Boolean);
    VAR
      ServerInstance@1000 : Record 2000000112;
      ServerInstanceList@1001 : Page 676;
    BEGIN
      IF "Start on This NAS Computer" <> '' THEN
        ServerInstance.SETRANGE("Server Computer Name","Start on This NAS Computer");
      IF "Start on This NAS Instance" <> '' THEN
        ServerInstance.SETRANGE("Server Instance Name","Start on This NAS Instance");
      IF ServerInstance.FINDFIRST THEN;
      ServerInstanceList.SETRECORD(ServerInstance);
      ServerInstance.RESET;
      ServerInstanceList.LOOKUPMODE := TRUE;
      IF ServerInstanceList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        ServerInstanceList.GETRECORD(ServerInstance);
        "Start on This NAS Computer" := ServerInstance."Server Computer Name";
        IF NOT OnlyServer THEN
          "Start on This NAS Instance" := ServerInstance."Server Instance Name";
      END;
    END;

    PROCEDURE SaveEditedRecord@8();
    VAR
      JobQueue@1000 : Record 470;
    BEGIN
      JobQueue := Rec;
      LOCKTABLE;
      GET(Code);
      Description := JobQueue.Description;
      "Job Queue Category Filter" := JobQueue."Job Queue Category Filter";
      "Start Automatically From NAS" := JobQueue."Start Automatically From NAS";
      "Start on This NAS Computer" := JobQueue."Start on This NAS Computer";
      "Start on This NAS Instance" := JobQueue."Start on This NAS Instance";
      MODIFY;
    END;

    PROCEDURE CleanupStatusForAll@7();
    VAR
      JobQueue@1000 : Record 470;
    BEGIN
      IF JobQueue.FINDSET THEN
        REPEAT
          IF JobQueue.Started THEN
            IF NOT JobQueue.QueueIsRunning THEN BEGIN
              JobQueue.ResetServiceValues;
              JobQueue.Started := FALSE;
              JobQueue.MODIFY;
            END;
        UNTIL JobQueue.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

