OBJECT Table 99000850 Planning Assignment
{
  OBJECT-PROPERTIES
  {
    Date=09/15/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Planning Assignment;
               ESM=Asignar planificaci¢n;
               FRC=Planification des activit‚s;
               ENC=Planning Assignment];
  }
  FIELDS
  {
    { 1   ;   ;Item No.            ;Code20        ;TableRelation=Item.No.;
                                                   CaptionML=[ENU=Item No.;
                                                              ESM=N§ producto;
                                                              FRC=Nø d'article;
                                                              ENC=Item No.] }
    { 2   ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   CaptionML=[ENU=Variant Code;
                                                              ESM=C¢d. variante;
                                                              FRC=Code variante;
                                                              ENC=Variant Code] }
    { 3   ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   CaptionML=[ENU=Location Code;
                                                              ESM=C¢d. almac‚n;
                                                              FRC=Code d'emplacement;
                                                              ENC=Location Code] }
    { 10  ;   ;Latest Date         ;Date          ;CaptionML=[ENU=Latest Date;
                                                              ESM=éltima fecha;
                                                              FRC=Date la plus r‚cente;
                                                              ENC=Latest Date] }
    { 12  ;   ;Inactive            ;Boolean       ;CaptionML=[ENU=Inactive;
                                                              ESM=Inactivo;
                                                              FRC=Inactif;
                                                              ENC=Inactive] }
    { 13  ;   ;Action Msg. Response Planning;Boolean;
                                                   OnValidate=BEGIN
                                                                IF "Action Msg. Response Planning" THEN
                                                                  Inactive := FALSE;
                                                              END;

                                                   CaptionML=[ENU=Action Msg. Response Planning;
                                                              ESM=Planificaci¢n resp. mens. acc.;
                                                              FRC=Planific. r‚ponse mess. action;
                                                              ENC=Action Msg. Response Planning] }
    { 14  ;   ;Net Change Planning ;Boolean       ;OnValidate=BEGIN
                                                                IF "Net Change Planning" THEN
                                                                  Inactive := FALSE;
                                                              END;

                                                   CaptionML=[ENU=Net Change Planning;
                                                              ESM=Planif. saldo periodo;
                                                              FRC=Planification variation nette;
                                                              ENC=Net Change Planning] }
  }
  KEYS
  {
    {    ;Item No.,Variant Code,Location Code     ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ManufacturingSetup@1000 : Record 99000765;
      InvtSetup@1001 : Record 313;

    PROCEDURE ItemChange@3(VAR NewItem@1000 : Record 27;VAR OldItem@1001 : Record 27);
    BEGIN
      IF NewItem."Reordering Policy" = NewItem."Reordering Policy"::" " THEN
        IF OldItem."Reordering Policy" <> OldItem."Reordering Policy"::" " THEN
          AnnulAllAssignment(NewItem."No.")
        ELSE
          EXIT
      ELSE
        IF (NewItem."Safety Stock Quantity" <> OldItem."Safety Stock Quantity") OR
           (NewItem."Safety Lead Time" <> OldItem."Safety Lead Time") OR
           (NewItem."Lead Time Calculation" <> OldItem."Lead Time Calculation") OR
           (NewItem."Reorder Point" <> OldItem."Reorder Point") OR
           (NewItem."Reordering Policy" <> OldItem."Reordering Policy") OR
           (NewItem."Replenishment System" <> OldItem."Replenishment System") OR
           (NewItem."Include Inventory" <> OldItem."Include Inventory")
        THEN BEGIN
          ManufacturingSetup.GET;
          InvtSetup.GET;
          IF (ManufacturingSetup."Components at Location" <> '') OR
             NOT InvtSetup."Location Mandatory"
          THEN
            AssignOne(NewItem."No.",'',ManufacturingSetup."Components at Location",WORKDATE);
        END;
    END;

    PROCEDURE SKUChange@9(VAR NewSKU@1000 : Record 5700;VAR OldSKU@1001 : Record 5700);
    BEGIN
      IF NewSKU."Reordering Policy" = NewSKU."Reordering Policy"::" " THEN
        IF OldSKU."Reordering Policy" <> OldSKU."Reordering Policy"::" " THEN BEGIN
          SETRANGE("Item No.",NewSKU."Item No.");
          SETRANGE("Variant Code",NewSKU."Variant Code");
          SETRANGE("Location Code",NewSKU."Location Code");
          IF FIND THEN BEGIN
            "Net Change Planning" := FALSE;
            MODIFY;
          END;
        END ELSE
          EXIT
      ELSE
        IF (NewSKU."Safety Stock Quantity" <> OldSKU."Safety Stock Quantity") OR
           (NewSKU."Safety Lead Time" <> OldSKU."Safety Lead Time") OR
           (NewSKU."Lead Time Calculation" <> OldSKU."Lead Time Calculation") OR
           (NewSKU."Reorder Point" <> OldSKU."Reorder Point") OR
           (NewSKU."Reordering Policy" <> OldSKU."Reordering Policy") OR
           (NewSKU."Replenishment System" <> OldSKU."Replenishment System") OR
           (NewSKU."Include Inventory" <> OldSKU."Include Inventory")
        THEN
          AssignOne(NewSKU."Item No.",NewSKU."Variant Code",NewSKU."Location Code",WORKDATE);
    END;

    PROCEDURE RoutingReplace@11(VAR Item@1000 : Record 27;OldRoutingNo@1001 : Code[20]);
    BEGIN
      IF OldRoutingNo <> Item."Routing No." THEN
        IF Item."Reordering Policy" <> Item."Reordering Policy"::" " THEN
          AssignPlannedOrders(Item."No.",FALSE);
    END;

    PROCEDURE BomReplace@8(VAR Item@1000 : Record 27;OldProductionBOMNo@1001 : Code[20]);
    BEGIN
      IF OldProductionBOMNo <> Item."Production BOM No." THEN BEGIN
        IF Item."Reordering Policy" <> Item."Reordering Policy"::" " THEN
          AssignPlannedOrders(Item."No.",FALSE);
        IF OldProductionBOMNo <> '' THEN
          OldBom(OldProductionBOMNo);
      END;
    END;

    PROCEDURE OldBom@2(ProductionBOMNo@1000 : Code[20]);
    VAR
      Item@1001 : Record 27;
      ProductionBOMHeader@1002 : Record 99000771;
      ProductionBOMVersion@1003 : Record 99000779;
      ProductionBOMLine@1004 : Record 99000772;
      UseVersions@1005 : Boolean;
      EndLoop@1006 : Boolean;
    BEGIN
      ProductionBOMVersion.SETRANGE("Production BOM No.",ProductionBOMNo);
      ProductionBOMVersion.SETRANGE(Status,ProductionBOMVersion.Status::Certified);
      UseVersions := ProductionBOMVersion.FINDSET;

      IF ProductionBOMHeader.GET(ProductionBOMNo) AND
         (ProductionBOMHeader.Status = ProductionBOMHeader.Status::Certified)
      THEN BEGIN
        ProductionBOMVersion."Production BOM No." := ProductionBOMHeader."No.";
        ProductionBOMVersion."Version Code" := '';
      END ELSE
        IF NOT ProductionBOMVersion.FINDSET THEN
          EXIT;

      REPEAT
        ProductionBOMLine.SETRANGE("Production BOM No.",ProductionBOMVersion."Production BOM No.");
        ProductionBOMLine.SETRANGE("Version Code",ProductionBOMVersion."Version Code");
        IF ProductionBOMLine.FINDSET THEN
          REPEAT
            IF ProductionBOMLine.Type = ProductionBOMLine.Type::Item THEN BEGIN
              IF Item.GET(ProductionBOMLine."No.") THEN
                IF Item."Reordering Policy" <> Item."Reordering Policy"::" " THEN
                  AssignPlannedOrders(ProductionBOMLine."No.",FALSE);
            END ELSE
              IF ProductionBOMLine.Type = ProductionBOMLine.Type::"Production BOM" THEN
                OldBom(ProductionBOMLine."No.");
          UNTIL ProductionBOMLine.NEXT = 0;
        IF UseVersions THEN
          EndLoop := ProductionBOMVersion.NEXT = 0
        ELSE
          EndLoop := TRUE;
      UNTIL EndLoop;
    END;

    PROCEDURE NewBOM@7(ProductionBOMNo@1000 : Code[20]);
    VAR
      Item@1001 : Record 27;
    BEGIN
      Item.SETCURRENTKEY("Production BOM No.");
      Item.SETRANGE("Production BOM No.",ProductionBOMNo);
      IF Item.FINDSET THEN
        REPEAT
          IF Item."Reordering Policy" <> Item."Reordering Policy"::" " THEN
            AssignPlannedOrders(Item."No.",FALSE);
        UNTIL Item.NEXT = 0;
    END;

    PROCEDURE AssignPlannedOrders@4(ItemNo@1000 : Code[20];CheckSKU@1001 : Boolean);
    VAR
      ProdOrderLine@1002 : Record 5406;
      ReqLine@1003 : Record 246;
      AssignThis@1004 : Boolean;
    BEGIN
      ProdOrderLine.SETCURRENTKEY(Status,"Item No.","Variant Code","Location Code");
      ProdOrderLine.SETRANGE(Status,ProdOrderLine.Status::Planned);
      ProdOrderLine.SETRANGE("Item No.",ItemNo);
      IF ProdOrderLine.FINDSET(TRUE,TRUE) THEN
        REPEAT
          IF CheckSKU THEN
            AssignThis := NOT SKUexists(ProdOrderLine."Item No.",ProdOrderLine."Variant Code",ProdOrderLine."Location Code")
          ELSE
            AssignThis := TRUE;
          IF AssignThis THEN
            AssignOne(ProdOrderLine."Item No.",ProdOrderLine."Variant Code",ProdOrderLine."Location Code",WORKDATE);
          ProdOrderLine.SETRANGE("Variant Code",ProdOrderLine."Variant Code");
          ProdOrderLine.SETRANGE("Location Code",ProdOrderLine."Location Code");
          ProdOrderLine.FINDLAST;
          ProdOrderLine.SETRANGE("Variant Code");
          ProdOrderLine.SETRANGE("Location Code");
        UNTIL ProdOrderLine.NEXT = 0;

      ReqLine.SETCURRENTKEY(Type,"No.","Variant Code","Location Code");
      ReqLine.SETRANGE(Type,ReqLine.Type::Item);
      ReqLine.SETRANGE("No.",ItemNo);
      IF ReqLine.FINDSET(TRUE,TRUE) THEN
        REPEAT
          IF CheckSKU THEN
            AssignThis := NOT SKUexists(ReqLine."No.",ReqLine."Variant Code",ReqLine."Location Code")
          ELSE
            AssignThis := TRUE;
          IF AssignThis THEN
            AssignOne(ReqLine."No.",ReqLine."Variant Code",ReqLine."Location Code",WORKDATE);
          ReqLine.SETRANGE("Variant Code",ReqLine."Variant Code");
          ReqLine.SETRANGE("Location Code",ReqLine."Location Code");
          ReqLine.FINDLAST;
          ReqLine.SETRANGE("Variant Code");
          ReqLine.SETRANGE("Location Code");
        UNTIL ReqLine.NEXT = 0;
    END;

    PROCEDURE AssignOne@6(ItemNo@1000 : Code[20];VariantCode@1001 : Code[10];LocationCode@1002 : Code[10];UpdateDate@1003 : Date);
    BEGIN
      LOCKTABLE;
      "Item No." := ItemNo;
      "Variant Code" := VariantCode;
      "Location Code" := LocationCode;
      IF FIND THEN BEGIN
        VALIDATE("Net Change Planning",TRUE);
        IF UpdateDate > "Latest Date" THEN
          "Latest Date" := UpdateDate;
        MODIFY;
      END ELSE BEGIN
        INIT;
        VALIDATE("Net Change Planning",TRUE);
        "Latest Date" := UpdateDate;
        INSERT;
      END
    END;

    PROCEDURE ChkAssignOne@1(ItemNo@1000 : Code[20];VariantCode@1001 : Code[10];LocationCode@1002 : Code[10];UpdateDate@1003 : Date);
    VAR
      Item@1004 : Record 27;
    BEGIN
      IF Item.GET(ItemNo) THEN
        IF Item."Reordering Policy" <> Item."Reordering Policy"::" " THEN
          AssignOne(ItemNo,VariantCode,LocationCode,UpdateDate);
    END;

    LOCAL PROCEDURE AnnulAllAssignment@5(ItemNo@1000 : Code[20]);
    BEGIN
      SETRANGE("Item No.",ItemNo);
      MODIFYALL("Net Change Planning",FALSE);
    END;

    LOCAL PROCEDURE SKUexists@10(ItemNo@1000 : Code[20];VariantCode@1001 : Code[10];LocationCode@1002 : Code[10]) : Boolean;
    VAR
      SKU@1003 : Record 5700;
    BEGIN
      SKU.SETRANGE("Item No.",ItemNo);
      SKU.SETRANGE("Variant Code",VariantCode);
      SKU.SETRANGE("Location Code",LocationCode);
      EXIT(NOT SKU.ISEMPTY);
    END;

    BEGIN
    END.
  }
}

